<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">

<article>
 
 <articleinfo>
 
 <title>Game Server HOWTO</title>
 
 <author>
 	<firstname>Anders</firstname>
	<surname>Jensen-Urstad</surname>
	<affiliation>
	<address>
	<email>anders@unix.se</email>
	</address>
	</affiliation>
</author>

<PubDate>$Id: Game-Server-HOWTO.sgml,v 1.5 2003/04/08 20:49:11 andersju Exp $</PubDate>
  
<abstract>
<para>
This document explains how to install, configure and maintain servers for various popular multiplayer games.
</para>
</abstract>

</articleinfo>

<sect1 id="intro">
 <title>Introduction</title>
 
<para>
This document describes how to install, configure and maintain dedicated servers for various popular multiplayer games, such as the Quake series, Half-Life/Counter-Strike and other first-person shooters. Linux makes a great operating system for game servers because of its stability and speed (not to mention it's Free).
</para>

<sect2 id="copyright">
 <title>Copyright and License</title>

   <para>
    This document is (c) 2001-2002 Anders Jensen-Urstad. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is available at <ulink url="http://www.gnu.org/copyleft/fdl.html">http://www.gnu.org/copyleft/fdl.html</ulink>.
   </para>

</sect2>


<sect2 id="history">
 <title>History</title>

<para>
I wrote this document because I couldn't find any decent documents covering more than one game. Wading through piles of readmes, guides, howtos and webpages can be quite tedious. 
</para>

<para>
   <revhistory>

      <revision>
         <revnumber>1.0</revnumber>
         <date>2002-12-16</date>
         <authorinitials>aju</authorinitials>
	 
	 <revremark>
	   Added KTeams Pro to QW. Updated most version numbers and links. Removed the actual GFDL from the document. Many minor changes. 
         </revremark>
      </revision>

      <revision>
         <revnumber>0.99</revnumber>
         <date>2001-07-08</date>
         <authorinitials>aju</authorinitials>
	 
	 <revremark>
	    Changed license, minor fixes.
         </revremark>
      </revision> 

      <revision>
         <revnumber>0.23</revnumber>
         <date>2001-03-03</date>
         <authorinitials>aju</authorinitials>
	 
	 <revremark>
	    Revised and changed Half-Life/Counter-Strike.
         </revremark>
      </revision> 

      <revision>
         <revnumber>0.22</revnumber>
         <date>2001-01-28</date>
         <authorinitials>aju</authorinitials>
	 
	 <revremark>
	    Added Rocket Arena 3 and Alliance to Quake3.
         </revremark>
      </revision>  
      

      <revision>
         <revnumber>0.22</revnumber>
         <date>2001-01-26</date>
         <authorinitials>aju</authorinitials>
	 
	 <revremark>
	    Added Security and permissions, revised QuakeWorld; added QuakeForge. Revised LMCTF. Added Lithium II, L-Fire DM and L-Fire CTF. Revised Q2Admin.
         </revremark>
      </revision>  

      <revision>
         <revnumber>0.21</revnumber>
         <date>2001-01-15</date>
         <authorinitials>aju</authorinitials>
	 <revremark>
	    Updated Half-Life/Counter-Strike. Added Rocket Arena to QuakeWorld.
         </revremark>
      </revision>   
   
      <revision>
         <revnumber>0.20</revnumber>
         <date>2001-01-14</date>
         <authorinitials>aju</authorinitials>
          <revremark>
            First draft.
         </revremark>
      </revision>

   </revhistory>
</para>

</sect2>

<sect2 id="newversions">
 <title>New versions</title>
 
 <para>
 The newest version of this document can be found at its homepage <ulink url="http://x.unix.se/howto/">http://x.unix.se/howto/</ulink> (both HTML and its SGML source).
 Other versions may be found in different formats at the <ulink url="http://www.tldp.org/">Linux Documentation Project</ulink>.
 </para>

</sect2>

<sect2 id="credits">
 <title>Credits</title>
 
 <para>
 I've gathered information from lots and lots of different READMEs, HOWTOs, web pages, and of course personal experience.
 The Unreal Tournament section was written by Knight Walker <email>kwalker@aros.net</email>.
 </para>

<para>
   <itemizedlist>
    <listitem>
     <para>
      Christer <email>vendor@nfn.net</email> helped with some parts about QuakeWorld.
     </para>
    </listitem>

    <listitem>
     <para>
       The <ulink url="http://www.tldp.org/HOWTO/Quake-HOWTO.html">Quake-HOWTO</ulink> by Bob Zimbinski <email>bobz@mr.net</email> gave info about various things.
     </para>
    </listitem>

    <listitem>
     <para>
      The <ulink url="http://www.bluesnews.com/faqs/q2s-faq.html">Q2 Server FAQ</ulink>.
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.atomicage.com:80/quake/server/server_cfg/">http://www.atomicage.com:80/quake/server/server_cfg/</ulink>.
     </para>
    </listitem>

    <listitem>
     <para>
      <ulink url="http://www.planethalflife.com/server/">http://www.planethalflife.com/server/</ulink>.
     </para>
    </listitem>

    <listitem>
     <para>
      Lots of Counter-Strike info from <ulink url="http://server.counter-strike.net">http://server.counter-strike.net</ulink>.
     </para>
    </listitem>

    <listitem>
     <para>
       #nucdawn@EFnet, <ulink url="http://unix.se">unix.se</ulink>, #unix.se@freenode
     </para>
    </listitem>

    <listitem>
     <para>
      id Software for making the best multiplayer games.
     </para>
    </listitem>
   
       <listitem>
     <para>
      Dave "Zoid" Kirsch for making Threewave CTF for all the Quake games and for the Linux ports!
     </para>
    </listitem>

    <listitem>
     <para>
      Loki Entertainment Software for their work on Quake3 and for everything they contributed to the Linux and open-source community.
     </para>
    </listitem>
    
   </itemizedlist>
</para>

</sect2>
 
<sect2 id="feedback">
 <title>Feedback</title>
 <para>
 If you have any questions, comments, suggestions, corrections or whatever, please mail them to <email>anders@unix.se</email>.
 </para>
</sect2>

</sect1>


 <sect1 id="basics">
 <title>Basics</title>
 
  <para>
Game servers can consume a lot of CPU and bandwidth (depending on the game and the number of connected players). If you don't own the machine and want to run a server from your account, ask the system administrator first.
 </para>

 <sect2 id="permissions">
 <title>Security and permissions</title>

<para>
 All dedicated servers are strongly recommended to be run from another user than root. I recommend that you create a new user that handles all the game servers. You may not have permission to create certain directories mentioned in this document as a normal user, for example <filename>/usr/local/games/quake3</filename>. If so, create it as root and then <literal>chown user:group /usr/local/games/quake</literal>, where user is your username and group your group, or simply create it in your home directory.
</para>

 </sect2>
 
 <sect2 id="keeprunning">
 <title>Keeping the server running</title>
 
 <para>If your game server crashes, a shell script like the one below might come in handy so you won't have to restart it manually. It can easily be modified for whatever server(s) you're running. 
 </para>

<screen>
#!/bin/sh

quake3dir="/usr/local/games/quake3"
process=`ps auxw | grep linuxq3ded | grep -v grep | awk '{print $11}'`

if [ -z "$process" ]; then

  echo "Couldn't find Quake3 running, restarting it."
  cd "$quake3dir"
  nohup ./linuxq3ded +exec ffa.cfg &
  echo ""

fi
</screen>

<para>
Put the script somewhere, name it sv_up or whatever you like, and make cron run it every 5-10 minutes:
</para>

<screen>
*/10 * * * * /usr/local/games/quake3/sv_up.sh >/dev/null 2>&1
</screen>
<para>
Put this in crontab (crontab -e). It will execute sv_up.sh (the shell script above) every 10 minutes and its output is sent to /dev/null (in other words, it disappears instead of being mailed to you).
</para>

</sect2>

</sect1>

 <sect1 id="quakeworld">
  <title>QuakeWorld</title>
  
 <para>
 QuakeWorld is a multiplayer-only version of Quake with optimized network code. id Software released the source code for Quake/QuakeWorld in 1999, spawning a number of projects set out to improve, optimize and add more features to the code and make it more secure. <ulink url="http://www.quakeforge.net">QuakeForge</ulink> is quite well-developed on the client side, but mvdsv (part of the <ulink url="http://qwex.does.it">qwextended</ulink> project) seems to be the most popular server in the QW community. It's famous for its ability to record demos from each player's POV (Point of View) and store them for retrieval by the players.</para>
 
 <sect2 id="qwrequirements">
  <title>System requirements</title>
  
 <para>
Here are the minimum system requirements for the QW (QuakeWorld) server. Remember that the requirements vary depending on the number of clients.
 </para>
 
 <para>
  <itemizedlist>

   <listitem>
    <para>
    Pentium 90 or better
    </para>
   </listitem>

   <listitem>
    <para>
    16 MB RAM
    </para>
   </listitem>

   <listitem>
    <para>
    The *.pak files from the Quake CD-ROM
    </para>
   </listitem>

   <listitem>
    <para>
    Kernel 2.0.24 or later
    </para>
   </listitem>

   <listitem>
    <para>
    Enough free space on your HDD (depends on what you want to install; at least 40-70 MB)
    </para>
   </listitem>

 </itemizedlist>
 </para>
</sect2>

 <sect2 id="qwinstalling">
 <title>Installing</title>

 <para>
 id Software's old qwsv is quite dated and should not be used (nor <emphasis>can</emphasis> it be used in most cases, since it's built for the ancient libc5). So, use either mvdsv or QuakeForge. 
 </para>

 <para>
 <emphasis>Note:</emphasis> Both mvdsv QuakeForge are actively being developed (more or less), and it's highly possible that newer versions than the ones linked below have been released, so check <ulink url="http://qwex.does.it/">http://qwex.does.it/</ulink> or <ulink url="http://quakeforge.net/files.php">http://quakeforge.net/files.php</ulink> before you proceed further.
 </para>

 <para>
  <itemizedlist>

   <listitem>
    <para>
    <ulink url="http://www.wsb.poznan.pl/~pawel/q/q/ktpro/develop/qwex_src-0.165b.tar.gz">mvdsv 0.165b source</ulink>
    </para>
   </listitem>
 
    <listitem>
    <para>
    <ulink url="http://www.wsb.poznan.pl/~pawel/q/q/ktpro/develop/mvdsv.0.165b.linux.glibc2.1.3.gz">mvdsv 0.165b binary (glibc 2.1.3)</ulink>
    </para>
   </listitem>

   <listitem>
    <para>
    <ulink url="http://download.sourceforge.net/quake/quakeforge-0.5.2.tar.bz2">QuakeForge 0.5.2 source</ulink>
    </para>
   </listitem>

  </itemizedlist>

 </para>

 <para>
Create a directory for the QW server in your home directory:
 </para>

<screen format="linespecific">
<prompt>$</prompt> <command>mkdir quake</command>
</screen>

 <para>
 <emphasis>If you downloaded the mvdsv source:</emphasis>
 </para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf qwex_src-0.165b.tar.gz</command>
<prompt>$</prompt> <command>cd mvdsrc</command>
<prompt>$</prompt> <command>make build_sv</command>
<prompt>$</prompt> <command>cp releasei386-glibc/mvdsv ../quake</command> 
</screen>

 <para>
 <emphasis>If you downloaded the mvdsv binary:</emphasis>
 </para>

<screen format="linespecific">
<prompt>$</prompt> <command>gunzip mvdsv.0.165b.linux.glibc2.1.3.gz</command>
<prompt>$</prompt> <command>mv mvdsv.0.165b.linux.glibc2.1.3 mvdsv</command>
<prompt>$</prompt> <command>chmod +x mvdsv</command>
<prompt>$</prompt> <command>mv mvdsv quake/</command> 
</screen>

 <para>
 <emphasis>If you downloaded the QuakeForge source:</emphasis>
 </para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf quakeforge-0.2.99beta6.tar.gz</command>
<prompt>$</prompt> <command>cd quakeforge-0.2.99beta6</command>
<prompt>$</prompt> <command>./configure --prefix=$HOME/quake --bindir=$HOME/quake; make; make install</command>
</screen>

 <para>
 This will <emphasis>at least</emphasis> build qf-server, nq-server (RealQuake) and some client binaries. We don't need the latter; you can choose not to compile them, or simply remove them later. Anyway, if the compilation went fine you should now have a binary called qf-server in <filename>$HOME/quake</filename>, where $HOME is your home directory (usually /home/user).
 </para>

<para>
You might want to rename mdsv or qw-server to qwsv, since that's what I'll call it in the rest of this document. Now create the directory <literal>id1</literal> in the quake directory and copy the pak0.pak and pak1.pak files from your Quake CD or wherever you have them into that directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd ~/quake</command>
<prompt>$</prompt> <command>mkdir id1</command>
<prompt>$</prompt> <command>cp /some/where/id1/pak*.pak id1</command>
</screen>

<para>
You also need the qw files:
</para>

<itemizedlist>
   <listitem>
    <para>
<ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quakeworld/qwsv230.zip">qwsv230.zip</ulink>
    </para>
   </listitem>
</itemizedlist>

<para>
Unzip it in your <filename>quake</filename> directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd ~/quake</command>
<prompt>$</prompt> <command>unzip qwsv230.zip</command>
</screen>

<para>
Now you're ready to run qwsv. Start it by running <literal>./qwsv</literal> in the quake directory. It should work fine (if not, make sure all the filenames are in lower-case). Try connecting to your server with a client.
</para>
</sect2>

 <sect2 id="qwconfiguring">
 <title>Configuring</title>

 <para>
 Now it's time to configure your QW server. Make a server.cfg file in the id1 directory containing the following:
 </para>
<screen format="linespecific">
sv_gamedir qw
deathmatch 1
hostname                "QW testserver"
serverinfo admin        "webmaster@xyz.com"
serverinfo url          "http://url.net"
rcon_password xxxx
timelimit 35
fraglimit 150
noexit 1
pausable 0
samelevel 2
maxclients 16
map dm3
floodprot 4 8 30
floodprotmsg "You have activated the flood protection and will be silenced for 30 seconds"
maxspectators 2
allow_dowload 1
allow_download_skins 1
allow_download_models 1
allow_download_sounds 1
allow_download_maps 1
</screen>

<para>
As you can see the server.cfg file contains all kinds of variables the server uses.
</para>

<para>
<itemizedlist>
<listitem><para><literal>-master IP-address</literal> - Command line parameter. Connects to the specified master server. QWSV starts in masterless mode by default.
</para></listitem>
<listitem><para><literal>-port</literal> - Specifies which port the server will listen to, default is 27500.</para></listitem>
<listitem><para><literal>gamedir</literal> - Which game directory you want to use. Change it if you want to run a mod. The QW directory is used by default.</para></listitem>
<listitem><para><literal>deathmatch</literal> - Can be set to 1, 2 or 3. 1 = Normal deathmatch; Weapons/items can be picked up and respawned (30 sec respawn time). 2 = Weapon stay. You can only pick up a weapon once, ammo & armor doesn't respawn. 3 = Combination between 1 and 2. You can only pick up a weapon once, ammo respawns after 15 seconds, everything else respawns normally.</para></listitem>
<listitem><para><literal>hostname</literal> - Servername.</para></listitem>
<listitem><para><literal>serverinfo admin</literal> -  The admin's e-mail address.</para></listitem>
<listitem><para><literal>serverinfo url</literal> - Server URL.</para></listitem>
<listitem><para><literal>timelimit</literal> - Match ends when timelimit (specified in minutes) is reached.</para></listitem>
<listitem><para><literal>fraglimit</literal> - Match ends when fraglimit is reached.</para></listitem>
<listitem><para><literal>maxclients</literal> - Max number of players.</para></listitem>
<listitem><para><literal>map mapname</literal> - Map that will be played.</para></listitem>
<listitem><para><literal>maxspectators</literal> - Max number of spectators.</para></listitem>
<listitem><para><literal>password</literal> - Password protect the server. Clients must set a matching password to be able to connect.</para></listitem>
<listitem><para><literal>rcon_password</literal> - Password used for remote administration.</para></listitem>
<listitem><para><literal>allow_download</literal> - Set this to 1 to allow clients to download files they don't have from the server.</para></listitem>
</itemizedlist>
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./qwsv > /dev/null &</command>
</screen>

<para>
The above command runs the qwsv server in the background and sends the output to /dev/null (if you want to log the output, just replace /dev/null with /blah/qw.log or whatever). -port specifies the port the server will use; QW's default is 27500. 
For a complete list of commands and the official QW manual, see <ulink url="http://www.quakeworld.net">QuakeWorld.net</ulink>. For a list of special commands that can be used with mvdsv, see the <ulink url="http://www.wsb.poznan.pl/~pawel/q/q/qwex/readme.txt">qwex readme</ulink>.
</para>
</sect2>

<sect2 id="qwctf">
<title>Threewave CTF (Capture The Flag)</title>

<para>
Capture The Flag, or CTF for short, is - or was, at least - the most popular Quake modification. There are many different CTF variants. Threewave CTF is the original and most popular CTF modification for QW.
You need the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/threewave/ctf/server/3wave42.zip">ftp://ftp.sunet.se/planetquake/threewave/ctf/server/3wave42.zip</ulink> - All the server files.</para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/threewave/ctf/server/3wave421.zip">ftp://ftp.sunet.se/planetquake/threewave/ctf/server/3wave421.zip</ulink> - Some bugs fixed (4.2 is required).</para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/threewave/ctf/client/3wctfc.zip">ftp://ftp.sunet.se/planetquake/threewave/ctf/client/3wctfc.zip</ulink> - All the CTF maps.</para></listitem>
</itemizedlist>
</para>
<para>
Create a ctf directory and extract all the files you downloaded to it:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd ~/quake</command>
<prompt>$</prompt> <command>mkdir ctf</command>
<prompt>$</prompt> <command>unzip 3wave42.zip -d ctf</command>
<prompt>$</prompt> <command>unzip 3wave421.zip -d ctf</command>
<prompt>$</prompt> <command>unzip 3wctfc.zip -d ctf</command>
</screen>

<para>
Now try to start the server (if you don't specify a map it'll default to an interesting modified version of Quake's start level):
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./qwsv +gamedir ctf +map ctf1</command>
</screen>

<para>
For more information, read <filename>ctf/server.txt</filename>.
</para>

</sect2>


<sect2 id="qwkt">
<title>Kombat Teams Pro</title>

<para>
Kombat Teams is a very popular mod that's been around for a long time. Most QW servers run it. KTeams greatly simplifies all forms of DM games by supplying commands to set teams, timer, readiness and much more.
</para>

<para>
Download the following:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="http://www.wsb.poznan.pl/~pawel/q/q/ktpro/ktpro.1.57.tar.gz">http://www.wsb.poznan.pl/~pawel/q/q/ktpro/ktpro.1.57.tar.gz</ulink></para></listitem>
</itemizedlist>
</para>
<para>
Extract it in your quake directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf ktpro.1.57.tar.gz</command>
</screen>

<para>
Start the server:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./qwsv +gamedir ktprosrv</command>
</screen>

<para>
Default is a 1on1 server. To start a 2on2 server you'd add +exec 2on2.cfg, or +exec 4on4.cfg for a 4on4 server, or +exec free.cfg for a free for all server. KTPro comes with a bunch of scripts which do this; ktpro1on1, ktpron2on2, etc. in the quake directory. Check out all the configuration examples in <filename>ktprosrv/</filename> and the documentation in <filename>ktpro.doc/</filename>. 
</para>

</sect2>


<sect2 id="qwra">
 <title>Rocket Arena</title>

 <para>
 <ulink url="http://www.planetquake.com/servers/arena/">Rocket Arena</ulink> is a very exciting modification. It's one-on-one games with the simple rule "winner stays, loser goes". Each player waits for his/her turn to fight in the arena. Every player gets full armor (200), 100 health and all weapons when they enter the arena. The winner stays to fight again, the loser goes back to the line. Simple? Yes. Boring? Not at all!
 </para>

<para>
 Now, on to installing this modification. Get the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/servers/arena/fasrv12.zip">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/servers/arena/fasrv12.zip</ulink> - All the server files.</para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/servers/arena/farena12.zip">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/servers/arena/farena12.zip</ulink> - The required client files (maps and sounds).</para></listitem>
</itemizedlist>
</para>

<para>
Create a directory called <filename>arena</filename> in your quake directory and unzip the above files to it:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake</command>
<prompt>$</prompt> <command>mkdir arena</command>
<prompt>$</prompt> <command>unzip ~/fasrv12.zip -d arena</command>
<prompt>$</prompt> <command>unzip ~/farena12.zip -d arena</command>
</screen>

<para>
Start the server:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./qwsv +gamedir arena +setmaster 204.182.161.2 +exec rotate.cfg +maxclients 6 +timelimit 20 +fraglimit 15</command>
</screen>

<para>
For the map rotation you can choose one of the following (of course you can edit these or make your own, remember that the last map must loop to the first):
</para>

<para>
<itemizedlist>
<listitem><para><literal>rotate.cfg</literal> - All the Final Arena maps.</para></listitem>
<listitem><para><literal>newmaps.cfg</literal> - The new Final Arena and the TF arena maps.</para></listitem>
<listitem><para><literal>classic.cfg</literal> - The most popular older Arena maps.</para></listitem>
</itemizedlist>
</para>

</sect2>

</sect1>

<sect1 id="quake2">
<title>Quake II</title>

 <para>
  Quake II is the sequel to Quake, featuring great multiplayer capabilities just like its prequel.
 </para>

 <sect2 id="q2sysreq">
  <title>System requirements</title>

 <para>
 As always, the minimum system requirements vary depending on the number of clients.
 </para>
 
 <para>
 <itemizedlist>
<listitem><para>A Pentium-class processor or better is recommended. More players = more CPU.</para></listitem>
<listitem><para>At least 16 MB RAM. 1 MB per player is recommended.</para></listitem>
<listitem><para>Some maps require more CPU/RAM than others.</para></listitem>
<listitem><para>The *.pak files from the Quake II CD-ROM.</para></listitem>
<listitem><para>Enough free space on your HDD, at least ~500 MB.</para></listitem>
<listitem><para>If you're going to run a Q2 server on the Internet, make sure you have enough bandwidth. The more players the more bandwidth you need.</para></listitem>
</itemizedlist>
 </para>

 </sect2>

 <sect2 id="q2installing">
  <title>Installing</title>

<para>
To start a Q2 server you need the Q2 client package and the pak files from the Q2 CD. Download the one that suits your system (glibc, unless your distribution is really ancient):
</para>

<para>
 <itemizedlist>
  <listitem><para><ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/unix/quake2-3.20-glibc-i386-unknown-linux2.0.tar.gz">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/unix/quake2-3.20-glibc-i386-unknown-linux2.0.tar.gz</ulink></para></listitem>
  <listitem><para><ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/unix/quake2-3.20-i386-unknown-linux2.0.tar.gz">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/unix/quake2-3.20-i386-unknown-linux2.0.tar.gz</ulink></para></listitem>
 </itemizedlist>
</para>

<para>
Create a directory for Q2 and extract the Q2 client package to it: 
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>mkdir quake2</command>
<prompt>$</prompt> <command>tar zxvf quake2-3.20-glibc-i386-unknown-linux2.0.tar.gz -C quake2</command>
</screen>

<para>
Now create a <filename>baseq2</filename> directory inside the quake2 directory and copy the pak files to it from the Q2 CD-ROM:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>mkdir quake2/baseq2</command>
<prompt>$</prompt> <command>cp /mnt/cdrom/baseq2/*.pak quake2/baseq2</command>
</screen>

<para>
Go to the Quake2 directory and start the server:
</para>
<screen>
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +set deathmatch 1</command>
</screen>

<para>
It should work fine and people should be able to connect to it.
</para>

 </sect2>

 <sect2 id="q2configuring">
  <title>Configuring</title>
  
  <para>
You'll want to create a server config (cfg) file. Put the following in a file called server.cfg in the baseq2 directory and modify it as you like:
  </para>

<screen>
set hostname "Q2 testserver"
set deathmatch "1"
set rcon_password "xxxx"
set timelimit "30"
set fraglimit "100"
set maxclients "16"
set allow_download "1"
set allow_download_players "0"
set allow_download_models "1"
set allow_download_sounds "1"
set allow_download_maps "1"
</screen>

<para>
Settings:
</para>

<itemizedlist>
<listitem><para><literal>dmflags</literal> - A bitflag, controls gameplay options.</para></listitem>
<listitem><para><literal>fraglimit</literal> - Next map is loaded when fraglimit is reached.</para></listitem>
<listitem><para><literal>timelimit</literal> - Next map is loaded when timelimit is reached.</para></listitem>
<listitem><para><literal>map</literal> - Which map to start.</para></listitem>
<listitem><para><literal>maxclients</literal> - Max number of players.</para></listitem>
<listitem><para><literal>hostname</literal> - Name of the server.</para></listitem>
<listitem><para><literal>deathmatch</literal> - If you want to play DM (deathmatch), set this to 1.</para></listitem>
<listitem><para><literal>game</literal> - Which mod directory to use, if you want to play a mod.</para></listitem>
<listitem><para><literal>port</literal> - Which port you want the server to listen to.</para></listitem>
</itemizedlist>

<para>
Now start the server with <literal>./quake2 +set dedicated 1 +exec server.cfg</literal>. Your config file will be read and the variables in it will be used.
You can have different config files for different game types, for example ffa.cfg, ctf.cfg, etc. with customized settings. They should all be in the baseq2 directory.
</para>

<para>
To have your server listed on the master servers (so people using GameSpy, XQF and similar programs can see your server), type <literal>set public 1</literal> in the server console or in the config file.
With the command <literal>set setmaster 'master server'</literal> you can change master server (default is id Software's master server).
</para>

 </sect2>

 <sect2 id="q2ctf">
  <title>Q2CTF (Capture The Flag)</title>
 
 <para>
 Download one of the following (you'll most likely want the glibc one, unless your distribution is ancient).
 </para>
 
<para>
<itemizedlist>
 <listitem><para><ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/unix/q2ctf150-glibc-i386-unknown-linux.tar.gz">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/unix/q2ctf150-glibc-i386-unknown-linux.tar.gz</ulink></para></listitem>
 <listitem><para><ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/unix/q2ctf150-i386-unknown-linux.tar.gz">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/unix/q2ctf150-i386-unknown-linux.tar.gz</ulink></para></listitem>
 </itemizedlist>
</para>

<para>
It only contains the file <filename>gamei386.so</filename>. Create a ctf directory in your Q2 directory and extract the q2ctf archive:
</para>

<screen>
<prompt>$</prompt> <command>mkdir quake2/ctf</command>
<prompt>$</prompt> <command>tar zxvf q2ctf150-glibc-i386-unknown-linux.tar.gz -C quake2/ctf</command>
</screen>

<para>
You'll also want the Q2CTF package with the CTF maps, <ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/q2ctf150.zip">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake2/ctf/q2ctf150.zip</ulink> (9.1 MB). Unzip it to the ctf directory.
To start a CTF server, run <literal>./quake2 +set dedicated 1 +set game ctf +exec server.cfg</literal>, where server.cfg is a file you should create in the ctf directory, containing this: 
</para>

<screen>
deathmatch 3
maxclients 12
rcon_password password
fraglimit 0
timelimit 30
set hostname "Q2CTF Testserver"
set admin "admin@xyz.com"
map q2ctf1
</screen>

 </sect2>

 <sect2 id="q2lmctf">
  <title>LMCTF (Loki's Minions CTF)</title>
  
<para>
<ulink url="http://www.planetquake.com/lmctf">LMCTF</ulink>, Loki's Minions CTF, is a popular CTF modification for Q2. You need all the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lmctf/lm520-linux_bin.zip">ftp://ftp.sunet.se/planetquake/lmctf/lm520-linux_bin.zip</ulink></para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lmctf/lmctf456.zip">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lmctf/lmctf456.zip</ulink></para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lmctf/lmctf50.zip">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lmctf/lmctf50.zip</ulink></para></listitem>
</itemizedlist>
</para>

<para>
Create a <filename>lmctf</filename> directory in your Q2 directory and unzip all the files to it.
Go to the Q2 root directory and start with the following command:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +set deathmatch 1 +set game lmctf +exec server.cfg</command>
</screen>

<para>
There are some files in the lmctf directory that you'll probably want to edit: <filename>server.cfg</filename> is the main cfg file containing many standard server options. <filename>maplist.txt</filename> contains the list of maps the server cycles through.
To alter the map list, create a file in your root Q2 directory called maplist.txt containing the names of the maps and add +map mapname to the command line when you start the server, where <literal>mapname</literal> is the name of the first map in the maplist.txt you just created.
The file <filename>motd.txt</filename> contains the "message of the day" clients will see when joining the server. 
</para>

<para>
For more information on LMCTF, see its <ulink url="http://www.planetquake.com/lmctf">homepage</ulink>.
</para>

 </sect2>

 <sect2 id="q2ra">
  <title>Rocket Arena 2</title>
 
<para>
To run a <ulink url="http://www.planetquake.com/servers/arena/">Rocket Arena 2</ulink> server you need the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/servers/arena/ra2250sv.zip">ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/servers/arena/ra2250sv.zip</ulink></para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/servers/arena/ra2250cl.exe">ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/servers/arena/ra2250cl.exe</ulink> - required client files (maps and such).</para></listitem>
</itemizedlist>
</para> 

<para>
Create a directory called <filename>arena</filename> in your quake2 directory and extract the above files:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>mkdir arena</command>
<prompt>$</prompt> <command>unzip ra2250sv.zip -d arena</command>
<prompt>$</prompt> <command>unzip ra2250cl.exe -d arena</command>
</screen>

<para>
Edit <filename>server.cfg</filename> to your liking. Another file that you may want to edit is <filename>arena.cfg</filename>, which is used to customize settings on a per arena basis as well as map rotation information. Start the server:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +set game arena +exec server.cfg
</command>
</screen>

</sect2>


 <sect2 id="q2lithium">
  <title>Lithium II</title>
 
 <para>
 <ulink url="http://www.planetquake.com/lithium">Lithium II</ulink> is a very popular and configurable server-side deathmatch mod, adding things like the grappling hook and letting you configure pretty much everything; see its readme.txt file for more information. Download the following file:
 </para>
 
<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lithium/lithium2_1.24-i386-unknown-linux2.0.tar.gz">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lithium/lithium2_1.24-i386-unknown-linux2.0.tar.gz</ulink></para></listitem>
</itemizedlist>
</para> 

<para>
Extract the file in your quake2 directory. All the files will be placed in a new directory called <filename>lithium</filename>: 
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>tar zxvf lithium2_1.24-i386-unknown-linux2.0.tar.gz</command>
</screen>

<para>
Lithium II comes with four different config files, copy one of them to <filename>server.cfg</filename> and modify it to your liking:
</para>

<para>
<itemizedlist>
<listitem><para><literal>lithium.cfg</literal> - default Lithium II server.</para></listitem>
<listitem><para><literal>stock.cfg</literal> - stock Quake2 server.</para></listitem>
<listitem><para><literal>lithctf.cfg</literal> - default Lithium II CTF server.</para></listitem>
<listitem><para><literal>stockctf.cfg</literal> - stock CTF server.</para></listitem>
</itemizedlist>
</para> 

<para>
Start a deathmatch server with the following command: 
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +set game lithium +exec server.cfg</command>
</screen>

<para>
To start a CTF server, you must have Q2CTF installed. Extract the lithium archive to your ctf directory and start with the following command:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +set game ctf +set ctf 1 +exec server.cfg</command>
</screen>

</sect2>


 <sect2 id="q2lfiredm">
  <title>L-Fire DM</title>
  
  <para>
   <ulink url="http://www.planetquake.com/lfire">L-Fire</ulink> DM is a server-side mod that adds many features to Q2, such as organized match support, anti-spam, highscore lists for each level, profanity filtering, etc. What you need:
  </para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireDM_v1_11_Linux.tar.gz">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireDM_v1_11_Linux.tar.gz</ulink></para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireDM_v1_11_Config.tar.gz">ftp://ftp.sunet.se/planetquake/lfire/LFireDM_v1_11_Config.tar.gz</ulink></para></listitem>
</itemizedlist>
</para> 

<para>
You can run L-Fire DM from either the <filename>baseq2</filename> directory (in that case it'll show up as a standard DM mod in GameSpy and similar tools, or you can give it its own directory (<filename>lfiredm</filename> or whatever you prefer). Extract the archive (actually, it only contains two files, gamei386.so and readme.txt), or in other words place gamei386.so in your directory of choice.
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>mkdir lfiredm</command>
<prompt>$</prompt> <command>tar zxvf LFireDM_v1_11_Linux.tar.gz -C lfiredm</command>
</screen>

<para>
<filename>LFireDM_v1_11_Config.tar.gz</filename> contains many config files which you may want to edit. Extract it to the directory where you put gamei386.so:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf ~/LFireDM_v1_11_Config.tar.gz -C lfiredm</command>
</screen>

<para>
Start the server:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +game lfiredm</command>
</screen>

 </sect2>
 
 <sect2 id="q2lfirectf">
  <title>L-Fire CTF</title>
  
<para>
<ulink url="http://www.planetquake.com/lfire">L-Fire</ulink> CTF is like L-Fire DM a server-side mod that adds many features to Q2CTF like match support, anti-spam, highscore lists for each level, rocket arena/sudden death overtime, etc. What you need:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireCTF_v1_20_Linux.tar.gz">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireCTF_v1_20_Linux.tar.gz</ulink></para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireCTF_v1_20_Config.tar.gz">ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/lfire/LFireCTF_v1_20_Config.tar.gz</ulink></para></listitem>
</itemizedlist>
</para> 

<para>
Extract the archive to your Q2CTF directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>tar zxvf LFireCTF_v1_20_Linux.tar.gz -C ctf</command>
</screen>

<para>
<filename>LFireCTF_v1_20_Config.tar.gz</filename> contains a bunch of configuration files which you may want to edit. Extract it to the Q2CTF directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf LFireCTF_v1_20_Config.tar.gz -C ctf</command>
</screen>

<para>
Start the server just as you normally would:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./quake2 +set dedicated 1 +game ctf</command>
</screen>

 </sect2>
 
 <sect2 id="q2admin">
  <title>Q2Admin</title>
  
<para>
<ulink url="http://www.planetquake.com/q2admin/">Q2Admin</ulink> is a very good transparent proxy modificatiom that adds many admin functions, and the most important, ZBot/Ratbot (among other things) detection to preven cheating.
Q2Admin works with all Q2 mods transparently by filtering communication between the server and the mod it's running on top of.
I recommend that you install Q2Admin if you're going to run a public server. Download this file:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/games/PC/idgames2/planetquake/q2admin/q2admin18src.tar.gz">ftp://ftp.sunet.se/planetquake/q2admin/q2admin18src.tar.gz</ulink></para></listitem>
</itemizedlist>
</para> 

<para>
Now extract the archive and compile it:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd quake2</command>
<prompt>$</prompt> <command>mkdir q2admin</command>
<prompt>$</prompt> <command>tar zxvf q2admin18src.tar.gz -C q2admin</command>
<prompt>$</prompt> <command>cd q2admin; make</command>
</screen>

<para>
Now you should have a file called <filename>q2admin.so</filename> in the q2admin directory. For each mod you want to protect with Q2Admin, copy the <filename>install</filename> and <filename>q2admin.so</filename> files to each mod directory and optionally the *.txt files if you want to customize the Q2Admin settings for different mods.
Run install, <literal>./install</literal> (chmod +x install if it's not executable) and start the server as usual. The install script moves gamei386.so to gamei386.real.so and q2admin.so to gamei386.so. Run install again to move the files back to their original names.
There's a huge number of commands; See <filename>readme.txt</filename> included in the q2admin package for everything you need to know.
</para>

</sect2>

</sect1>

 <sect1 id="quake3">
  <title>Quake III Arena</title>
  
  <para>
  Quake III is the latest game in the Quake series, designed as a multiplayer deathmatch game.
  </para>
  
 <sect2 id="q3sysreq">
  <title>System requirements</title>
 
 <para>
 As always, the system requirements vary depending on the number of players on your server.
 </para> 
 
  <para>
<itemizedlist>
<listitem><para>Pentium II 266MHz. More CPU = more players.</para></listitem>
<listitem><para>At least 64 MB RAM.</para></listitem>
<listitem><para>Kernel 2.2.9 or higher, glibc 2.1.</para></listitem>
<listitem><para>The *.pk3 files from the Quake III Arena CD-ROM.</para></listitem>
<listitem><para>At least ~500 MB free space on your HDD.</para></listitem>
<listitem><para>Enough bandwidth if you're going to run an Internet server. More players = more bandwidth.</para></listitem>
</itemizedlist>
 </para>

</sect2>

 <sect2 id="q3installing">
  <title>Installing</title>
  
<para>
First download the latest Q3A Linux point release. As of this version of the HOWTO it's v1.32b, but that may have changed when you read this.
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake3/linux/linuxq3apoint-1.32b.x86.run">ftp://ftp.sunet.se/pub/pc/games/idgames2/idstuff/quake3/linux/linuxq3apoint-1.32b.x86.run</ulink></para></listitem>
</itemizedlist>
</para>

<para>
Run the installer:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>sh linuxq3apoint-1.32b.x86.run</command>
</screen>

<para>
The default installation directory is <filename>/usr/local/games/quake3</filename>. Copy the *.pk3 files from the Q3A CD-ROM to the baseq3 directory.
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cp /mnt/cdrom/Quake3/baseq3/*.pk3 /usr/local/games/quake3/baseq3</command>
</screen>

<para>
Go to the Q3 directory and test the dedicated server, <literal>./q3ded</literal>.
</para>

</sect2>

<sect2 id="q3configuring">
 <title>Configuring</title>
 
<para>
Now it's time to write some config files. They contain all the variables the server will use (maps to be played, gametype, etc..). All cfg's must be in the baseq3 directory. The file q3config.cfg is <emphasis>always</emphasis> executed.
I recommend that you have different cfg's for different gametypes, for example ctf.cfg, ffa.cfg, and so on. You can use q3config.cfg for general settings, and then another cfg on top of it.
Run <literal>./linuxq3ded +exec configfile.cfg</literal> to start the dedicated server and execute the specified config file.
This is what my FFA (Free For All) config file looks like:
</para>

<screen>
set sv_hostname "Foofighters FFA DM"
set sv_maxclients 10
set g_motd "To be or not to be..."
set g_forcerespawn 15
set rconpassword "password"
set g_gametype 1
set fraglimit 50
set timelimit 20

//Here's the map-cycle. When fraglimit or timelimit is reached, the map is automatically changed.
//Otherwise it would just play the same map again.
set m1 "map q3dm1; set nextmap vstr m2"
set m2 "map q3dm2; set nextmap vstr m3"
set m3 "map q3dm3; set nextmap vstr m4"
set m4 "map q3tourney1; set nextmap vstr m5"
set m5 "map q3dm4; set nextmap vstr m6"
set m6 "map q3dm5; set nextmap vstr m7"
set m7 "map q3dm6; set nextmap vstr m8"
set m8 "map q3tourney2; set nextmap vstr m9"
set m9 "map q3dm7; set nextmap vstr m10"
set m10 "map q3dm8; set nextmap vstr m11"
set m11 "map q3dm9; set nextmap vstr m12"
set m12 "map q3tourney3; set nextmap vstr m13"
set m13 "map q3dm10; set nextmap vstr m14"
set m14 "map q3dm11; set nextmap vstr m15"
set m15 "map q3dm12; set nextmap vstr m16"
set m16 "map q3tourney4; set nextmap vstr m17"
set m17 "map q3dm13; set nextmap vstr m18"
set m18 "map q3dm14; set nextmap vstr m19"
set m19 "map q3dm15; set nextmap vstr m20"
set m20 "map q3tourney5; set nextmap vstr m21"
set m21 "map q3dm16; set nextmap vstr m22"
set m22 "map q3dm17; set nextmap vstr m23"
set m23 "map q3dm18; set nextmap vstr m24"
set m24 "map q3dm19; set nextmap vstr m25"
set m25 "map q3tourney6; set nextmap vstr m1"
</screen>

<para>
<itemizedlist>
<listitem><para><literal>sv_maxclients</literal> - Max number of players.</para></listitem>
<listitem><para><literal>g_motd</literal> - The message people will see on the bottom of the screen when they connect.</para></listitem>
<listitem><para><literal>g_forcerespawn</literal> - Number of seconds until a client is automatically respawned, if the client doesn't do it by itself. Set it to 0 to disable force respawn.</para></listitem>
<listitem><para><literal>g_gametype</literal> - Gametype. 1 = DM, 2 = Tourney (1on1), 3 = Team DM, 4 = CTF.</para></listitem>
</itemizedlist>
</para>

<para>
Start the server with <literal>./q3ded +exec configfile.cfg</literal>. You can execute cfg's directly from the server console with the command <literal>exec configfile.cfg</literal>.
If you want to run the server in the background, immune to hangups, start using <literal>nohup ./q3ded +exec ffa.cfg &</literal>.
</para>

</sect2>

<sect2 id="q3ctf">
 <title>Q3CTF (Capture The Flag)</title>
 
<para>
CTF is built into Q3A (Q3CTF). Four CTF maps are included with Q3A, but you will want to download Dave 'Zoid' Kirsch's (the author of CTF for Q1/Q2/Q3) excellent Q3WCTF maps - <ulink url="ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/mappacks/q3wctf.zip">ftp://ftp.sunet.se/pubi/pc/games/idgames2/planetquake/mappacks/q3wctf.zip</ulink> (7.8 MB).
Here's a CTF cfg which includes all CTF maps in the mapcycle. Paste it in a new file, ctf.cfg, in the baseq3 directory:
</para>

<screen>
set sv_hostname "Foofighters CTF"
set sv_maxclients 16
set g_motd "To be or not to be.."
set g_forcerespawn 10
set rconpassword "password"
set g_gametype 4

set m1 "capturelimit 8; map q3ctf1; set nextmap vstr m2"
set m2 "capturelimit 8; map q3ctf2 ; set nextmap vstr m3"
set m3 "capturelimit 8; map q3ctf3 ; set nextmap vstr m4"
set m4 "capturelimit 8; map q3wctf1 ; set nextmap vstr m5"
set m5 "capturelimit 8; map q3wctf2 ; set nextmap vstr m6"
set m6 "capturelimit 8; map q3wctf3 ; set nextmap vstr m1"

vstr m1
</screen>

<para>
Start with <literal>./q3ded +exec ctf.cfg</literal>.
</para>

</sect2>

<sect2 id="q3ra3">
 <title>Rocket Arena 3</title>

<para>
<ulink url="http://www.planetquake.com/servers/arena/">Rocket Arena</ulink> 3 is the popular Quake3 version of Rocket Arena. You need the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.sunet.se/pube/os/FreeBSD/ports/distfiles/ra315sv.zip">ftp://ftp.sunet.se/pube/os/FreeBSD/ports/distfiles/ra315sv.zip</ulink> </para></listitem>
<listitem><para><ulink url="ftp://ftp.sunet.se/pube/os/FreeBSD/ports/distfiles/ra315cl_linuxmac.zip">ftp://ftp.sunet.se/pube/os/FreeBSD/ports/distfiles/ra315cl_linuxmac.zip</ulink> - required client files (maps).</para></listitem>
</itemizedlist>
</para>

<para>
Create a directory for RA3 and extract the files: 
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd /usr/local/games/quake3</command>
<prompt>$</prompt> <command>mkdir arena</command>
<prompt>$</prompt> <command>unzip ~/ra315sv.zip -d arena</command>
<prompt>$</prompt> <command>unzip ~/ra315cl_linuxmac.zip -d arena</command>
</screen>

<para>
Edit <filename>server.cfg</filename> to your liking. Start the server with the following command:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./q3ded +set fs_game arena +set sv_pure 0 +bot_enable 0 +set dedicated 2 +set net_port 27960 +exec server.cfg</command>
</screen>

<para>
Use <literal>+set dedicated 1</literal> to run a private server or <literal>+set dedicated 2</literal> to run a public. For more info on RA3 configuration options, read <filename>readsrv.txt</filename> in your <filename>arena</filename> directory.
</para>

</sect2>

<sect2 id="q3alliance">
 <title>Alliance</title>

<para>
<ulink url="http://www.planetquake.com/alliance/">Alliance</ulink> is a popular CTF/DM mod. It offers three different game styles:
</para>

<para>
<itemizedlist>
<listitem><para><emphasis>Alliance</emphasis> - Enhanced CTF with offhanded grappling hook (players can use the grapple and shoot their weapons at the same time).</para></listitem>
<listitem><para><emphasis>Combat</emphasis> - Resembles the mod Expert Q2. Players spawn with all weapons plus health and ammo regenerate. Slightly different weapons balance, physics and grappling hook style.</para></listitem>
<listitem><para><emphasis>Instagib</emphasis> - An interesting (and very entertaining) game type where players spawn with an enhanced rail gun with an infinite ammount of ammo. When you shoot your enemy they are instantly gibbed (killed), so health is not an issue here (also, the rail gun is the only weapon).</para></listitem>
</itemizedlist>
</para>

<para>
All the above game styles can be played as CTF, FFA, Team DM or Tourney. Note that the mod was made with CTF in mind. Anyway, you need the following files:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="http://www.hlrs.de/people/frenzel/actf/alliance30.zip">http://www.hlrs.de/people/frenzel/actf/alliance30.zip</ulink> </para></listitem>
<listitem><para><ulink url="http://www.planetquake3.net/download.php?op=viewdownloaddetails&lid=731&ttitle=Alliance_3.3_Upgrade_from_3.0_(.ZIP)">http://www.planetquake3.net/download.php?op=viewdownloaddetails&lid=731&ttitle=Alliance_3.3_Upgrade_from_3.0_(.ZIP)</ulink> - 3.0 to 3.3 upgrade.</para></listitem>
</itemizedlist>
</para>

<para>
Extract the files:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>cd /usr/local/games/quake3</command>
<prompt>$</prompt> <command>unzip ~/alliance30.zip</command>
<prompt>$</prompt> <command>unzip ~/alliance30-33.zip</command>
</screen>

<para>
Now start the server running your desired gametype. Alliance:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./q3ded +set dedicated 2 +set fs_game alliance30 +g_gametype 4 +exec sv_alliance.cfg +map actf13</command>
</screen>

<para>
Combat:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./q3ded +set dedicated 2 +set fs_game alliance30 +g_gametype 4 +exec sv_combat.cfg +map actf13</command>
</screen>

<para>
Instagib:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./q3ded +set dedicated 2 +set fs_game alliance30 +g_gametype 4 +exec sv_instagib.cfg +set fs_basepath $(/bin/pwd) +map actf13</command>
</screen>

<para>
Edit <literal>maplist.cfg</literal> to change the map rotation. Two large Alliance map packs can be downloaded from its <ulink url="http://www.planetquake.com/alliance/">homepage</ulink>.
</para>

</sect2>

</sect1>

<sect1 id="halflife">
 <title>Half-Life</title>
 <para>Half-Life is the most popular multiplayer first-person shooter on the Internet as of this version of the HOWTO - mainly thanks to the modification <ulink url="http://www.counter-strike.net">Counter-Strike</ulink>, hereafter referred to as CS.
</para>

<sect2 id="hlsysreq">
 <title>System requirements</title>

 <para>
 The system requirements vary depending on how many players you have on your server.
 </para>

<para>
<itemizedlist>
<listitem><para>CPU - Depends on the number of clients. At least P2 266 for hosting a full game, the more the better. 400MHz recommended.</para></listitem>
<listitem><para>RAM - Minimum 64 MB, 128 MB recommended.</para></listitem>
<listitem><para>Bandwidth - Also depends on the number of clients. At least 512kbps upstream recommended.</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2 id="hlinstalling">
 <title>Installing</title>
<para>
You need the HLDS (dedicated server) package to run a Half-Life server:
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://3dgamers.in-span.net/pub/3dgamers2/games/halflife/hlds_l_3110_full.bin">ftp://3dgamers.in-span.net/pub/3dgamers2/games/halflife/hlds_l_3110_full.bin</ulink></para></listitem>
</itemizedlist>
</para>

<para>
When you've downloaded the above file, create a directory for HLDS and run the downloaded file (specify $HOME/hlds as the directory to install to, if that's what you want): 
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>mkdir hlds</command>
<prompt>$</prompt> <command>sh hlds_l_3110_full.bin</command>
</screen>

<para>
Now we want hlds to see its dynamically linked libraries (*.so files). If you're running bash, which you most probably are, run:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>export LD_LIBRARY_PATH=$HOME/hlds:$LD_LIBRARY_PATH</command>
</screen>

<para>
This adds <literal>$HOME/hlds</literal> to the directories ld checks for libraries in.
</para>

</sect2>

<sect2 id="hlconfiguring">
 <title>Configuring</title>
<para>
Now you can start hlds; <literal>./hlds_l</literal> to start a dedicated Half-Life server. It should work with the default settings, so try it:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>hlds_l +maxplayers 12 +map crossfire</command>
</screen>

<para>
At the end you should see something like this:
</para>

<screen>
WON Auth Server
 . . .
 </screen>
 
<para>
If the 'Auth' is missing it's probably because your server is using an incorrect IP address. Type status in the server console and it will spit out some info.
If your IP isn't what it should be, quit the server with the exit command and start it again with this command:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>./hlds_l +ip xx.xx.xx.xx +maxplayers 12 +map crossfire</command>
</screen>

<para>
If it doesn't work now, you might be behind a firewall. If that's the case, let's just hope the network admin is friendly - make him open the port(s) you need. 27015 is the default port.
</para>

<para>
If you want to run a modification instead of regular DM or teamplay, pass the -game modname argument to hlds. Example: <literal>./hlds_l -game tfc +maxplayers 12 +map 2fort</literal>.
</para>

<para>
The server reads autoexec.cfg, server.cfg, motd.txt and mapcycle.txt. Edit these to your liking. Autoexec.cfg is only executed when you start the server. Server.cfg is executed at every map change. Motd.txt contains the text that players will see when they join your server; a good idea is to put your server name, homepage (server stats page?) and contact info in it. Mapcycle.txt contains the list of maps you want rotated on your server. Type in all the maps you want there, each on its own line, without the ".bsp" extension.
</para>

<para>
<itemizedlist>
<listitem><para><literal>sv_aim</literal> - Setting this to 1 causes the crosshairs to turn red when placed over a player.</para></listitem>
<listitem><para><literal>pausable</literal> - Clients are allowed to pause the server.</para></listitem>
<listitem><para><literal>mp_timelimit</literal> - Server changes map when timelimit (in minutes) is reached.</para></listitem>
<listitem><para><literal>mp_fraglimit</literal> - Server changes map when fraglimit is reached.</para></listitem>
<listitem><para><literal>mp_footsteps</literal> - Setting this to 0 turns off footsteps.</para></listitem>
<listitem><para><literal>mp_flashlight</literal> - Clients can use flashlights (useful on dark maps).</para></listitem>
<listitem><para><literal>mp_falldamage</literal> - Realistic fall damage.</para></listitem>
<listitem><para><literal>mp_friendlyfire</literal> - Allows players to kill people on the same team. More realistic, but this can be very problematic without active admins playing on the server, so on public servers it might be a good idea to set this to 0 to avoid lamers killing their own team members.</para></listitem>
</itemizedlist>
</para>

<para>
Min/max rates - The commands <literal>sv_maxrate xxxx</literal> and <literal>sv_minrate xxxx</literal> force clients to use the specified rate.
This is useful if you, for example, don't want LPB's stealing bandwidth (which makes HPW's annoyed) - type <literal>sv_maxrate 6000</literal> to do this. If you on the other hand want to run a server for LPB's,
set the minimum rate to something around 9000 with <literal>sv_minrate 9000</literal>.
</para>

<para>
Kicking/Banning - Each player is assigned an userid by the server. Type <literal>users</literal> in the server console to see the players id's. Usually you can kick people simply by typing <literal>kick nick</literal>, but this can be difficult if a client has a long nick or is using strange characters.
If this is the case, you can kick clients by their id with <literal>kick # </literal>.
If you want to ban a client, preventing them from coming back to the server, find their uniqueid with the <literal>users</literal> command and then ban with <literal>banid minutes uniqueid</literal>, where minutes is the number of minutes you want to ban the player (0 makes the ban permanent), and uniqueid the player's uniqueid.
To keep players banned even after restarting the server, type <literal>writeid</literal> before you quit the server, and add <literal>exec banned.cfg</literal> to your server.cfg so that the next time you start your server, it will read the uniqueid's in banned.cfg.
You can also kick and ban a client at the same time with <literal>banid uniqueid kick</literal>.
Remove a ban with <literal>removeid id</literal>, and don't forget to remove it from server.cfg if it's there too.
</para>

<para>
RCON - RCON lets clients on your server execute server commands remotely. Add the line <literal>rcon_password "password"</literal> to server.cfg. Clients type rcon_password password in the console and can then execute server commands, like rcon kick, rcon mapchange, etc. This is good if you want to deal with abusive players directly when you're playing on the server, or maybe let a few other trustworthy persons do it.
To use rcon when playing on your server, type <literal>rcon_password password</literal> in the in-game console. You can now execute several commands if the password was correct, but remember that you must add rcon before every command, for example <literal>rcon kick player</literal>.
</para>

</sect2>

 <sect2 id="hlcstrike">
  <title>Counter-Strike</title>

<para>First you need, of course, a working Half-Life server. Download the latest CS package. As of this revision of the HOWTO it's 1.5, but that may have changed when you read this.
</para>

<para>
<itemizedlist>
<listitem><para><ulink url="ftp://ftp.gamesdomain.co.uk:21/pub/games/halflife/mods/counterstrike/linux/cs_15_full.tar.gz">ftp://ftp.gamesdomain.co.uk:21/pub/games/halflife/mods/counterstrike/linux/cs_15_full.tar.gz</ulink></para></listitem>
</itemizedlist>
</para>

<para>
Extract it to your HLDS directory:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>tar zxvf cs_15_full.tar.gz -C $HOME/hlds</command>
</screen>

<para>
Now run the CS server:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>hlds_l -game cstrike +maxplayers 12 +map de_dust</command>
</screen>

<para>
Edit the <literal>/usr/local/games/hlds/cstrike/server.cfg</literal> file to change it to your liking and optimize the server. The file <literal>mapcycle.txt</literal> contains the list of maps to be included in the map cycle, and <literal>motd.txt</literal> contains the MOTD - Message Of The Day.
</para>

<para>
Maps - By typing mp_timelimit 1 in the console, the server will go to the next map in the cycle. The command changelevel followed by the mapname makes the server change to the specified map.
The maps must be in your cstrike/maps directory.
</para>

<para>
For more information on CS servers, see <ulink url="http://server.counter-strike.net">http://server.counter-strike.net</ulink>.
</para>

</sect2>
</sect1>

<sect1 id="ut">
 <title>Unreal Tournament</title>
 <para>
 Unreal Tournament is a very addictive first person shooter which is designed to be run in one of several modes; DeathMatch, Capture the Flag, Last Man Standing and Assault are the most popular. It features bots, a bevy of weapons and plenty of community support. It was originally ported as an in-house development effort at Epic but later releases are handled by
Loki Software. Current version as of this writing is 436.
</para>

<sect2 id="utsysreq">
 <title>System requirements</title>
<para>
As always, the system requirements will vary slightly depending on the
number of players on the server. Here are the basics:
</para>

<para>
<itemizedlist>

<listitem>
<para>
Pentium 266 (For more than 8 users, a faster server is recommended)
</para>
</listitem>

<listitem>
<para>
At least 32 MB RAM (For a VERY dedicated machine. The more maps,
  skins, mutators, bots, and players that are online, the more RAM the
  server will use.)  64 MB is highly recommended.
</para>
</listitem>

<listitem>
<para>
Linux kernel 2.2.14 or later, Glibc 2.1 or later.
</para>
</listitem>

<listitem>
<para>
The retail Unreal Tournament CD (Just the first one is necessary).
</para>
</listitem>

<listitem>
<para>
At least 500 MB disk space. Maps, skins, and mods will require a bit more.
</para>
</listitem>

<listitem>
<para>
Enough bandwidth if you're going to run an Internet server. Epic recommends about 20kbps per player.
</para>
</listitem>

</itemizedlist>
</para>

</sect2>

<sect2 id="utinstalling">
<title>Installing</title>

<para>
First, download the latest ut-install file from Loki's website.  As of
this version of the HOWTO, that is 436.
</para>

 <para>
  <itemizedlist>

   <listitem>
    <para>
    <ulink url="http://www.lokigames.com/products/ut/updates.php3">http://www.lokigames.com/products/ut/updates.php3</ulink>
    </para>
   </listitem>
  </itemizedlist>
 </para>

 <para>
Mount the Unreal Tournament CD (Usually /cdrom or /mnt/cdrom), and run
the ut-install*.run file.  It will verify the archive, check the CD for
the appropriate files, and begin installing.  It will ask you where you
want to install UT to, as well as a few other questions.  It is actually
fairly painless.
</para>

<para>
Once you have it installed, you will want to change ownership of the
files to the user ID that they will be running under (See Security and
permissions).
</para>

</sect2>

 <sect2 id="utconfiguring">
 <title>Configuring</title>

<para>
Now it's time to write a config file.  Unreal Tournament uses an INI-style
config file format which is exactly like Windows INI files.  This config
file will contain ALL the variables the server will use, including game
types, defaults for those types, number of players, bots, etc.  The cfg's
should be kept in the System/  directory (either <literal>$UTROOT/System/</literal> or
<literal>~/.loki/ut/System/</literal>).  If you have an UnrealTournament.ini and/or User.ini
in that System/ directory, it will be loaded and can override settings in
the server's cfg file. This is a sanitized copy of my server's cfg file
(called ucc.ini):</para>

<screen format="linespecific">
----[snip]-----
[URL]
Protocol=unreal
ProtocolDescription=Unreal Protocol
Name=Player
Map=Index.unr
LocalMap=DM-Deck16][.unr
Host=
Portal=
MapExt=unr
SaveExt=usa
Port=7777
Class=Botpack.TMale1

[FirstRun]
FirstRun=428

[PackageRemap]
UnrealShare=UnrealI

[Engine.Engine]
GameRenderDevice=NullDrv.NullRenderDevice
WindowedRenderDevice=NullDrv.NullRenderDevice
RenderDevice=NullDrv.NullRenderDevice
AudioDevice=NullDrv.NullRenderDevice
NetworkDevice=IpDrv.TcpNetDriver
DemoRecordingDevice=Engine.DemoRecDriver
Console=UTMenu.UTConsole
Language=int
GameEngine=Engine.GameEngine
EditorEngine=Editor.EditorEngine
DefaultGame=Botpack.DeathMatchPlus
DefaultServerGame=Botpack.DeathMatchPlus
ViewportManager=SDLDrv.SDLClient
Render=Render.Render
Input=Engine.Input
Canvas=Engine.Canvas

[Core.System]
PurgeCacheDays=30
SavePath=../Save
CachePath=../Cache
CacheExt=.uxx
Paths=../System/*.u
Paths=/path/to/ut/Maps/*.unr
Paths=/path/to/ut/Textures/*.utx
Paths=/path/to/ut/Sounds/*.uax
Paths=/path/to/ut/Music/*.umx
Suppress=DevLoad
Suppress=DevSave
Suppress=DevNetTraffic
Suppress=DevGarbage
Suppress=DevKill
Suppress=DevReplace
Suppress=DevSound
Suppress=DevCompile
Suppress=DevBind
Suppress=DevBsp

[Engine.GameEngine]
CacheSizeMegs=4
UseSound=False
ServerActors=IpDrv.UdpBeacon
ServerActors=IpServer.UdpServerQuery
;ServerActors=IpServer.UdpServerUplink MasterServerAddress=unreal.epicgames.com MasterServerPort=27900
;ServerActors=IpServer.UdpServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900
;ServerActors=IpServer.UdpServerUplink MasterServerAddress=master.mplayer.com MasterServerPort=27900
ServerActors=UWeb.WebServer
ServerPackages=SoldierSkins
ServerPackages=CommandoSkins
ServerPackages=FCommandoSkins
ServerPackages=SGirlSkins
ServerPackages=BossSkins
ServerPackages=Botpack

[Engine.Player]
ConfiguredInternetSpeed=20000
ConfiguredLanSpeed=20000

[IpDrv.TcpNetDriver]
AllowDownloads=True
ConnectionTimeout=15.0
InitialConnectTimeout=300.0
AckTimeout=1.0
KeepAliveTime=0.2
MaxClientRate=20000
SimLatency=0
RelevantTimeout=5.0
SpawnPrioritySeconds=1.0
ServerTravelPause=4.0
NetServerMaxTickRate=20
LanServerMaxTickRate=35
DownloadManagers=IpDrv.HTTPDownload
DownloadManagers=Engine.ChannelDownload

[Engine.DemoRecDriver]
DemoSpectatorClass=Botpack.CHSpectator
MaxClientRate=25000
ConnectionTimeout=15.0
InitialConnectTimeout=500.0
AckTimeout=1.0
KeepAliveTime=1.0
SimLatency=0
RelevantTimeout=5.0
SpawnPrioritySeconds=1.0
ServerTravelPause=4.0
NetServerMaxTickRate=60
LanServerMaxTickRate=60

[Engine.GameReplicationInfo]
ServerName=Generic UT Server
ShortName=UT Server
AdminName=Lamer
AdminEmail=root@localhost
Region=0
MOTDLine1=
MOTDLine2=
MOTDLine3=
MOTDLine4=

[IpDrv.TcpipConnection]
SimPacketLoss=0
SimLatency=0

[IpServer.UdpServerUplink]
DoUpLink=False
UpdateMinutes=1
MasterServerPort=27900

[IpServer.UdpServerQuery]
GameName=ut

[IpDrv.UdpBeacon]
DoBeacon=True
BeaconTime=0.50
BeaconTimeout=5.0
BeaconProduct=ut

[UMenu.UnrealConsole]
RootWindow=UMenu.UMenuRootWindow
UWindowKey=IK_Esc
ShowDesktop=False

[UMenu.UMenuMenuBar]
ShowHelp=True
GameUMenuDefault=UTMenu.UTGameMenu
MultiplayerUMenuDefault=UTMenu.UTMultiplayerMenu
OptionsUMenuDefault=UTMenu.UTOptionsMenu
ModMenuClass=UMenu.UMenuModMenu

[Botpack.ChallengeBotInfo]
Difficulty=1

[Botpack.DeathMatchPlus]
bNoviceMode=True
bHardCoreMode=False
bUseTranslocator=True
bCoopWeaponMode=False
MinPlayers=8
AirControl=0.350000
bChangeLevels=True
bMegaSpeed=False
bAltScoring=False
bTournament=False
NetWait=10
RestartWait=15
InitialBots=10
FragLimit=30
TimeLimit=0
bMultiWeaponStay=False
bForceRespawn=False
MaxCommanders=0
bNoMonsters=False
bHumansOnly=False
bClassicDeathMessages=False

[Botpack.CTFGame]
bUseTranslocator=True
bCoopWeaponMode=True
GoalTeamScore=3.000000
bNoTeamChanges=False
FriendlyFireScale=0.000000
MaxTeams=2
MaxTeamSize=16
FragLimit=0
TimeLimit=0
bMultiWeaponStay=True
bForceRespawn=False
MaxCommanders=0
bNoMonsters=False
bHumansOnly=True
bClassicDeathMessages=False

[Botpack.Domination]
bDumbDown=True
bUseTranslocator=True
bCoopWeaponMode=True
GoalTeamScore=100.000000
bNoTeamChanges=False
FriendlyFireScale=0.000000
MaxTeams=2
MaxTeamSize=16
FragLimit=30
TimeLimit=0
bMultiWeaponStay=True
bForceRespawn=False
MaxCommanders=0
bNoMonsters=False
bHumansOnly=False
bClassicDeathMessages=False

[Botpack.Assault]
bUseTranslocator=False
bCoopWeaponMode=True
Defenses=3
SavedTime=0.000000
NumDefenses=0
CurrentDefender=0
bDefenseSet=False
bTiePartOne=False
GameCode=
Part=1
bNoTeamChanges=False
FriendlyFireScale=0.000000
MaxTeams=2
GoalTeamScore=0.000000
MaxTeamSize=16
FragLimit=0
TimeLimit=7
bMultiWeaponStay=False
bForceRespawn=False
MaxCommanders=2
bNoMonsters=False
bHumansOnly=False
bClassicDeathMessages=False

[Botpack.TeamGamePlus]
bBalanceTeams=True
GoalTeamScore=30
bPlayersBalanceTeams=True

[Engine.GameInfo]
bLowGore=False
bVeryLowGore=False
bMuteSpectators=False
bNoCheating=True
bAllowFOV=False
AutoAim=0.930000
GameSpeed=1.000000
MaxSpectators=2
AdminPassword=
GamePassword=
MaxPlayers=16
IPPolicies[0]=ACCEPT,*
IPPolicies[1]=
IPPolicies[2]=
IPPolicies[3]=
IPPolicies[4]=
IPPolicies[5]=
IPPolicies[6]=
IPPolicies[7]=
IPPolicies[8]=
IPPolicies[9]=
IPPolicies[10]=
IPPolicies[11]=
IPPolicies[12]=
IPPolicies[13]=
IPPolicies[14]=
IPPolicies[15]=
IPPolicies[16]=
IPPolicies[17]=
IPPolicies[18]=
IPPolicies[19]=
IPPolicies[20]=
IPPolicies[21]=
IPPolicies[22]=
IPPolicies[23]=
IPPolicies[24]=
IPPolicies[25]=
IPPolicies[26]=
IPPolicies[27]=
IPPolicies[28]=
IPPolicies[29]=
IPPolicies[30]=
IPPolicies[31]=
IPPolicies[32]=
IPPolicies[33]=
IPPolicies[34]=
IPPolicies[35]=
IPPolicies[36]=
IPPolicies[37]=
IPPolicies[38]=
IPPolicies[39]=
IPPolicies[40]=
IPPolicies[41]=
IPPolicies[42]=
IPPolicies[43]=
IPPolicies[44]=
IPPolicies[45]=
IPPolicies[46]=
IPPolicies[47]=
IPPolicies[48]=
IPPolicies[49]=
ServerLogName=server.log
bLocalLog=True
bWorldLog=True
bBatchLocal=False
DemoBuild=0
DemoHasTuts=0
bExternalBatcher=False
bNoMonsters=False
bHumansOnly=False
bCoopWeaponMode=False
bClassicDeathMessages=False

[UnrealShare.UnrealGameOptionsMenu]
bCanModifyGore=True

[UWeb.WebServer]
Applications[0]=UTServerAdmin.UTServerAdmin
ApplicationPaths[0]=/ServerAdmin
Applications[1]=UTServerAdmin.UTImageServer
ApplicationPaths[1]=/images
DefaultApplication=0
bEnabled=True
ListenPort=5080
MaxConnections=30

[UTServerAdmin.UTServerAdmin]
AdminUsername=utadmin
AdminPassword=utpasswd
MenuPage=menu
RootPage=root
CurrentPage=current
CurrentMenuPage=current_menu
CurrentIndexPage=current_index
CurrentPlayersPage=current_players
CurrentGamePage=current_game
CurrentConsolePage=current_console
CurrentConsoleLogPage=current_console_log
CurrentConsoleSendPage=current_console_send
DefaultSendText=say
CurrentMutatorsPage=current_mutators
CurrentRestartPage=current_restart
DefaultsPage=defaults
DefaultsMenuPage=defaults_menu
DefaultsMapsPage=defaults_maps
DefaultsRulesPage=defaults_rules
DefaultsSettingsPage=defaults_settings
DefaultsBotsPage=defaults_bots
DefaultsServerPage=defaults_server
DefaultsIPPolicyPage=defaults_ippolicy
DefaultsRestartPage=defaults_restart
MessageUHTM=message.uhtm
DefaultBG=#aaaaaa
HighlightedBG=#ffffff
AdminRealm=UT Remote Admin Server

[IpDrv.HTTPDownLoad]
UseCompression=True

[Engine.StatLog]
LocalBatcherURL=../NetGamesUSA.com/ngStats/ngStatsUT
LocalBatcherParams=
LocalStatsURL=../NetGamesUSA.com/ngStats/html/ngStats_Main.html
WorldBatcherURL=../NetGamesUSA.com/ngWorldStats/bin/ngWorldStats
WorldBatcherParams=-d ../NetGamesUSA.com/ngWorldStats/logs -g UT
WorldStatsURL=http://www.netgamesusa.com
LocalLogDir=../Logs
WorldLogDir=../NetGamesUSA.com/ngWorldStats/logs
bWorldBatcherError=False

[Botpack.TrainingDM]
FragLimit=3
TimeLimit=0
bMultiWeaponStay=True
bForceRespawn=False
bUseTranslocator=False
MaxCommanders=0
bNoMonsters=False
bHumansOnly=False
bCoopWeaponMode=False
bClassicDeathMessages=False

[Botpack.TrainingDOM]
bDumbDown=True
bNoTeamChanges=False
FriendlyFireScale=0.000000
MaxTeams=2
GoalTeamScore=100.000000
MaxTeamSize=16
FragLimit=0
TimeLimit=0
bMultiWeaponStay=True
bForceRespawn=False
bUseTranslocator=True
MaxCommanders=0
bNoMonsters=False
bHumansOnly=False
bCoopWeaponMode=True
bClassicDeathMessages=False

[UTMenu.UTServerSetupPage]
bLanPlay=True

[UTMenu.UTStartGameCW]
Map=DM-Deck16][.unr
GameType=BotPack.DeathMatchPlus
MutatorList=
bKeepMutators=False

[Botpack.TDMmaplist]
Maps[0]=DM-Liandri.unr
Maps[1]=DM-Codex.unr
Maps[2]=DM-Grinder.unr
Maps[3]=DM-Pressure.unr
Maps[4]=DM-HyperBlast.unr
Maps[5]=DM-Peak.unr
Maps[6]=DM-KGalleon.unr
Maps[7]=DM-Turbine.unr
Maps[8]=DM-StalwartXL.unr
Maps[9]=DM-Curse][.unr
Maps[10]=DM-Deck16][.unr
Maps[11]=DM-Phobos.unr
Maps[12]=
Maps[13]=
Maps[14]=
Maps[15]=
Maps[16]=
Maps[17]=
Maps[18]=
Maps[19]=
Maps[20]=
Maps[21]=
Maps[22]=
Maps[23]=
Maps[24]=
Maps[25]=
Maps[26]=
Maps[27]=
Maps[28]=
Maps[29]=
Maps[30]=
Maps[31]=
MapNum=0

[Botpack.TrainingCTF]
bNoTeamChanges=False
FriendlyFireScale=0.000000
MaxTeams=2
GoalTeamScore=3.000000
MaxTeamSize=16
FragLimit=0
TimeLimit=0
bMultiWeaponStay=True
bForceRespawn=False
bUseTranslocator=True
MaxCommanders=0
bNoMonsters=False
bHumansOnly=True
bCoopWeaponMode=True
bClassicDeathMessages=False

[UTMenu.UTMenuBotmatchCW]
Map=DM-Gothic.unr
GameType=BotPack.DeathMatchPlus
MutatorList=
bKeepMutators=False

[Botpack.ASMapList]
Maps[0]=AS-Hispeed.unr
Maps[1]=AS-Frigate.unr
Maps[2]=AS-Rook.unr
Maps[3]=AS-Mazon.unr
Maps[4]=AS-OceanFloor.unr
Maps[5]=AS-Overlord.unr
Maps[6]=AS-Guardia.unr
Maps[7]=
Maps[8]=
Maps[9]=
Maps[10]=
Maps[11]=
Maps[12]=
Maps[13]=
Maps[14]=
Maps[15]=
Maps[16]=
Maps[17]=
Maps[18]=
Maps[19]=
Maps[20]=
Maps[21]=
Maps[22]=
Maps[23]=
Maps[24]=
Maps[25]=
Maps[26]=
Maps[27]=
Maps[28]=
Maps[29]=
Maps[30]=
Maps[31]=
MapNum=0

-----[snip]-----
</screen>

<para>
A few things of note here.
</para>

<para>
The following values should be changed before the server is launched for
the first time:
</para>

<screen format="linespecific">
[Core.System]
Paths=../System/*.u
Paths=/path/to/ut/Maps/*.unr
Paths=/path/to/ut/Textures/*.utx
Paths=/path/to/ut/Sounds/*.uax
Paths=/path/to/ut/Music/*.umx
</screen>

<para>
Should all be set to where Unreal Tournament is installed.
</para>

<screen format="linespecific">
[Engine.GameEngine]
;ServerActors=IpServer.UdpServerUplink
</screen>

<para>
Should be uncommented if you wish to link your Unreal Tournament server
into an existing Unreal Tournament league and have it accessible over the
Internet.
</para>

<screen format="linespecific">
[IpServer.UdpServerUplink]
DoUpLink=False
</screen>

<para>
Additionally, if you do want to link your UT server with an Internet
league, you will need to allow UpLinking.
</para>

<screen format="linespecific">
[Engine.Player]
ConfiguredInternetSpeed=20000
</screen>

<para>
This should be set to the allocated bandwidth (in bytes per second) for
each player.  Leaving it at the recommended 20000 is good.
</para>

<screen format="linespecific">
[Engine.GameReplicationInfo]
ServerName=Generic UT Server
ShortName=UT Server
AdminName=Lamer
AdminEmail=root@localhost
Region=0
MOTDLine1=
MOTDLine2=
MOTDLine3=
MOTDLine4=
</screen>

<para>
All of that should be changed.
</para>

<screen format="linespecific">
[Engine.GameInfo]
AdminPassword=
MaxPlayers=16
</screen>

<para>
An admin password should be set, and the Max Players should be set to a
sane value (See ConfiguredInternetSpeed).
</para>

<screen format="linespecific">
[UWeb.WebServer]
bEnabled=True
ListenPort=5080
</screen>

<para>
One of the most interesting aspects of running a UT server is the
web-server interface for admins.  By setting bEnabled to True and
specifying a ListenPort, you can administer an UnrealTournament server via
a normal Web Browser.
</para>

<screen format="linespecific">
[UTServerAdmin.UTServerAdmin]
AdminUsername=utadmin
AdminPassword=utpasswd
AdminRealm=UT Remote Admin Server
</screen>

<para>
If you do decide to run the UT Webserver interface (Recommended), the
above values should be set.  AdminRealm is less important, but will be
used by your browser to know when to ask for the administrator username
and password.
</para>

<para>
All other values should be checked and seasoned to taste.
</para>

</sect2>

<sect2 id="utstarting">
<title>Starting the server</title>

<para>
To start the Unreal Tournament server, you will need to use the
command "ucc server" and specify a few things on the command line.  These
being:</para>

<para>
<itemizedlist>
<listitem><para>Mapname - Name of the map to start from the Maps/ directory, minus the
  .unr extension.</para></listitem>
<listitem><para>Gametype - One of Botpack.DeathMatchPlus, Botpack.Domination,
  Botpack.CTFGame.</para></listitem>
<listitem><para>INI - The config file to use to start the server.</para></listitem>
<listitem><para>LOG - the log file the server should use.</para></listitem>
<listitem><para>Port - (Optional) the port the UT server should use.</para></listitem>
</itemizedlist>
</para>

<para>
Most of this is specified in the config file, but the mapname and Gametype
are required.
</para>

<para>
Here is an example:
</para>

<screen format="linespecific">
<prompt>$</prompt> <command>ucc server "DM-Turbine?game=Botpack.DeathMatchPlus" ini=ucc.ini log=ucc.log</command>
</screen>

<para>
I quoted the mapname and gametype because of the presence of the ? (Linux
shells use that as a wild card) and because a lot of Unreal Tournament
maps have odd characters in their name (DM-Deck16][ anyone?).  I recommend
they always be quoted.
</para>

<para>
Once the server starts, it will load the settings specified in the
System/ucc.ini file and load the game.
</para>

<para>
I also recommend the server be started with the nohup command and placed
in the background.  All the configuration will take place in the web
interface.
</para>

</sect2>

<sect2 id="utadmin">
<title>Administrating the server</title>
<para>
Administering the server is as easy as browsing a website.  When you
started the server, you should have seen something like this toward the
end:
</para>

<screen format="linespecific">
Spawning: IpDrv.UdpBeacon
Spawning: IpServer.UdpServerQuery
Spawning: UWeb.WebServer
Bound to UWeb.so
</screen>

<para>
Notice the UWeb.Webserver and UWeb.so sections?  Those are the webserver,
and since it didn't give any errors, we know it's running.
</para>

<para>
Now, in the configuration section, you told it what port to listen on:
</para>

<screen format="linespecific">
[UWeb.WebServer]
bEnabled=True
ListenPort=5080
</screen>

<para>
So, to connect to the administration server, you would need to browse to
<literal>http://utserver:5080/ServerAdmin</literal>
</para>

<para>
The first thing that will happen is that your browser will ask you for
authentication.  Back in the configuration file, we specified that:
</para>

<screen format="linespecific">
[UTServerAdmin.UTServerAdmin]
AdminUsername=utadmin
AdminPassword=utpasswd
AdminRealm=UT Remote Admin Server
</screen>

<para>
So in this case, you would sign in as utadmin with a password of utpasswd
(You had better change these before you actually start the server).
</para>

<para>
Once you are authenticated, you are presented with an interface that
allows you to specify the game type, map, number of bots and connections
as well as kick and ban users. It's all very point-n-click.
</para>

</sect2>
</sect1>

</article>
