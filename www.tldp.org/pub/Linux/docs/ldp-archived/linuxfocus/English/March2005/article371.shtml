<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf371, SoftwareDevelopment: Optimizing C/C++ programs using the GProf profiler</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Arnout Engelen
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Optimizing C/C++ programs using the GProf profiler
 =LF=NUMBER: 371
 =LF=ANAME_: article371.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Map</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Search</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.html"><FONT color=
           "#FFFFFF">News</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">About LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/March2005/article371.shtml">English</a> &nbsp;<A href="../../ChineseGB/March2005/article371.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/March2005/article371.shtml">Deutsch</a> &nbsp;<A href="../../Francais/March2005/article371.shtml">Francais</a> &nbsp;<A href="../../Russian/March2005/article371.shtml">Russian</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<IMG SRC="../../common/images2/ArnoutEngelen.png" ALT="Arnout Engelen" width="164" height="200">
<BR>by  Arnout Engelen <br> <small>&lt;arnouten(Q)bzzt.net&gt;</small>
<BR><BR>
<I>About the author:</I><BR>
<!-- aboutauthor_start -->
<P>
Arnout Engelen is a CS student at the University of Nijmegen, the
Netherlands, and an employee at TUNIX, an internet security company. In his spare
time, he likes to run distances and play the tenor sax.
</P>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO en -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Content</i>:
<UL>
  <LI><A HREF="#371lfindex0">Profiling in a nutshell</A></LI>
  <LI><A HREF="#371lfindex1">Case study: Pathalizer</A></LI>
  <LI><A HREF="#371lfindex2">Timing the application</A></LI>
  <LI><A HREF="#371lfindex3">The profiling</A></LI>
  <LI><A HREF="#371lfindex4">The optimization</A></LI>
  <LI><A HREF="#371lfindex5">Results</A></LI>
  <LI><A HREF="#371lfindex6">A second pass</A></LI>
  <LI><A HREF="#371lfindex7">Other C/C++ profilers</A></LI>
  <LI><A HREF="#371lfindex8">Profiling other languages</A></LI>
  <LI><A HREF="#371lfindex9">Conclusion</A></LI>
  <LI><A HREF="#371lfindex10">References</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_03-0371.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>Optimizing C/C++ programs using the GProf profiler</H2>
 <IMG SRC="../../common/images2/article371/profilingpicture.png" ALT="Profiling with GProf" HSPACE=10 width="400" height="63">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Abstract</i>:
<P>
<!-- articleabstract_start -->

One of the most important things to keep in mind while optimizing an application
is: optimize where it counts. It is no use to spend hours optimizing a piece
of code that usually runs for only 0.04 seconds anyway.
<p>
GProf provides a surprisingly easy way to profile your C/C++ application and spot
the interesting pieces right away. A small case study shows how GProf was used
to reduce the running time of a real-world application from over 3 minutes to
under 5 seconds, by identifying 2 data structures as important and optimizing those.
<p>
Historically, the program goes back as far as 1982, when it was introduced on the
the SIGPLAN Symposium on Compiler Construction. It is now a standard tool available
on virtually all flavors of UNIX.

<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


<A NAME="371lfindex0">&nbsp;</A>
<H2>Profiling in a nutshell</H2>


The concept of profiling is a very simple one: by recording at what times a
program enters and leaves functions, it's possible to calculate in what parts of
the program it spends most of its time. Now making this measurement sounds
like something that requires a lot of effort - luckily, nothing is further
from the truth! It's as simple as compiling with an extra gcc flag ('-pg'),
running the program (to collect the profiling data), and running 'gprof' on the
resulting statistics file to present it in a more convenient manner.

<A NAME="371lfindex1">&nbsp;</A>
<H2>Case study: Pathalizer</H2>


I use a real-world application as an example here, part of
<a href="http://pathalizer.bzzt.net">pathalizer</a>: The <code>event2dot</code>
executable which translates a pathalizer 'events' file to a graphviz 'dot' file.
<p>
In short, it reads the events from a file, storing them as graphs (with
pages as nodes, and transitions between pages as edges). This collection
of graphs is then 'summarized' into one big graph, which is printed
in the graphviz 'dot' format.

<A NAME="371lfindex2">&nbsp;</A>
<H3>Timing the application</H3>

First, we run the program we want to optimize without profiling, and measure
how long it takes. The example sources used, along with a sample input of
considerable size (55000 lines), are provided.
<p>
On my machine, a run of <code>event2dot</code> took more than 3 minutes on this input:
<pre class="code">
real    3m36.316s
user    0m55.590s
sys     0m1.070s
</pre>

<A NAME="371lfindex3">&nbsp;</A>
<H3>The profiling</H3>

Enabling gprof profiling is done by adding the '-pg' flag at compile time. We recompile
the application with this flag:
<pre class="code">
g++ -pg dotgen.cpp readfile.cpp main.cpp graph.cpp config.cpp -o event2dot
</pre>
<p>
We can now run <code>event2dot</code> again on our test-eventsfile. During this run,
profiling information on <code>event2dot</code> will be gathered, and a 'gmon.out' file
will be generated. We view the result by running 'gprof <code>event2dot</code> | less'.
<p>
gprof now shows us the following functions are important:
<pre class="code">
 % cumulative  self              self     total
 time seconds  seconds  calls s/call s/call name
43.32   46.03  46.03 339952989  0.00  0.00 CompareNodes(Node *,Node *)
25.06   72.66  26.63    55000   0.00  0.00 getNode(char *,NodeListNode *&amp;)
16.80   90.51  17.85 339433374  0.00  0.00 CompareEdges(Edge *,AnnotatedEdge *)
12.70  104.01  13.50    51987   0.00  0.00 addAnnotatedEdge(AnnotatedGraph *,Edge *)
 1.98  106.11   2.10    51987   0.00  0.00 addEdge(Graph *,Node *,Node *)
 0.07  106.18   0.07        1   0.07  0.07 FindTreshold(AnnotatedEdge *,int)
 0.06  106.24   0.06        1   0.06 28.79 getGraphFromFile(char *,NodeListNode *&amp;,Config *)
 0.02  106.26   0.02        1   0.02 77.40 summarize(GraphListNode *,Config *)
 0.00  106.26   0.00    55000   0.00  0.00 FixName(char *)
</pre>

The most interesting column is the first one: this is the percentage of the running time
of the program that is spent in this function.

<A NAME="371lfindex4">&nbsp;</A>
<H3>The optimization</H3>


This shows the program spends almost half its time in <code>CompareNodes</code>. A quick grep shows
CompareNodes is called only by <code>CompareEdges</code>, which in turn is only called by
<code>addAnnotatedEdge</code> - both of which are also in this list. This looks like an interesting
point to do some optimizing.

<p>
We notice <code>addAnnotatedEdge</code> is traversing a linked list. Though easy to implement, a linked
list is not the best of data types. We decide to replace g-&gt;edges with a binary tree: this should make
finding stuff in the structure much faster, while still being able to 'walk' through it.
<A NAME="371lfindex5">&nbsp;</A>
<H3>Results</H3>

We see this indeed reduces the execution time:
<pre class="code">
real    2m19.314s
user    0m36.370s
sys     0m0.940s
</pre>
<A NAME="371lfindex6">&nbsp;</A>
<H3>A second pass</H3>

Running gprof again reveals:
<pre class="code">
%   cumulative self           self    total
 time   seconds seconds calls  s/call  s/call name
87.01     25.25  25.25  55000    0.00    0.00 getNode(char *,NodeListNode *&amp;)
10.65     28.34   3.09  51987    0.00    0.00 addEdge(Graph *,Node *,Node *)
</pre>
It looks like the functions that used to take up more than half of the time have now
been reduced to irrelevant details! Let's try this again: we replace the NodeList by a
NodeHashTable.
<p>
This is also clearly a big improvement:
<pre class="code">
real    0m3.269s
user    0m0.830s
sys     0m0.090s
</pre>

<A NAME="371lfindex7">&nbsp;</A>
<H2>Other C/C++ profilers</H2>


<img src="../../common/images2/article371/shot.png" align="right" width="565" height="337">
There are several profilers available that use the gprof data, for example <a href="http://kprof.sf.net">KProf</a> (screenshot) and <a href="http://mvertes.free.fr/">cgprof</a>. Though the graphical views are a nice touch, personally I think the commandline gprof is more convenient.
<br clear="all">

<A NAME="371lfindex8">&nbsp;</A>
<H2>Profiling other languages</H2>


We covered profiling C/C++ applications with gprof here, but similar things can be done for other languages: for Perl, you use the Devel::DProf module. Start your application with <code>perl -d:DProf mycode.pl</code> and view the results with <code>dprofpp</code>. If you can compile your Java program with gcj, you can just use gprof, however only single threaded Java code is currently supported.

<A NAME="371lfindex9">&nbsp;</A>
<H2>Conclusion</H2>


We have seen that, using profiling, we can quickly find the portions of an
application that would benefit from optimization. By optimizing where it
counts, we have reduced the running time of the example application from 3m36
to less than 5 seconds.

<A NAME="371lfindex10">&nbsp;</A>
<H2>References</H2>

<ul>
<li>Pathalizer:   <a
href="http://pathalizer.sf.net">http://pathalizer.sf.net</a><br><br>
<li>KProf:        <a
href="http://kprof.sf.net">http://kprof.sf.net</a><br><br>
<li>cgprof:       <a
href="http://mvertes.free.fr">http://mvertes.free.fr</a><br><br>
<li>Devel::DProf  <a
href="http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html">http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html</a><br><br>
<li>gcj:          <a
href="http://gcc.gnu.org/java">http://gcc.gnu.org/java</a><br><br>
<li>: pathalizer example files:         <a href="../../common/src2/article371/index.html">download for article371</a><br><br>
</ul>


<!-- vim: set sw=2 ts=2 et tw=74: -->

<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Webpages maintained by the LinuxFocus Editor team</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Arnout Engelen</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Arnout Engelen <small>&lt;arnouten(Q)bzzt.net&gt;</small></font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-04-01, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
