<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf374, SoftwareDevelopment: LINUX &amp; PERL, computer tools for study and analysis of biological information</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Carlos     Andr&eacute;s P&eacute;rez
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: LINUX &amp; PERL, computer tools for study and analysis of biological information
 =LF=NUMBER: 374
 =LF=ANAME_: article374.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Map</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Search</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.html"><FONT color=
           "#FFFFFF">News</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">About LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/April2005/article374.shtml">English</a> &nbsp;<A href="../../Castellano/April2005/article374.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/April2005/article374.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/April2005/article374.shtml">Deutsch</a> &nbsp;<A href="../../Francais/April2005/article374.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/CarlosAndresPerez.jpg" alt=
    "La Foto">
<BR>by  Carlos Andr&eacute;s P&eacute;rez <br> <small>&lt;caperez /at/ usc.edu.co&gt;</small>
<BR><BR>
<I>About the author:</I><BR>
<!-- aboutauthor_start -->
<p>Carlos Andr&eacute;s P&eacute;rez is specialist in
    Mollecular Simulation, Candidate to Doctor in Biotechnolgy.
    Technical advisor of the Grupo de Investigaci&oacute;n en
    Educaci&oacute;n Virtual (GIEV) - Research Group in Virtual
    Learning. Address: Universidad Santiago de Cali, Calle 5&ordf;
    carrera 62 Campus Pampalinda, Cali &ndash; Colombia.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO en -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Content</i>:
<UL>
  <LI><A HREF="#374lfindex0">Bioinformatics</A></LI>
  <LI><A HREF="#374lfindex1">Perl</A></LI>
  <LI><A HREF="#374lfindex2">Perl File Management:</A></LI>
  <LI><A HREF="#374lfindex3">Search for aminoacid patterns</A></LI>
  <LI><A HREF="#374lfindex4">Calculus of aminoacid frequences:</A></LI>
  <LI><A HREF="#374lfindex5">Bibliographic References</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_04-0374.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>LINUX &amp; PERL, computer tools for study and analysis of biological information</H2>
 <img src="../../common/images2/article374.jpg" alt=
    "[Illustration]" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Abstract</i>:
<P>
<!-- articleabstract_start -->

    This article wants to show some of the advantages of Perl
    programming on Unix, for extraction of the biological
    information of the DNA, RNA and proteine sequences Databases.
    They can be used in comparative processes or analysis. The
    Human Genome project and the DNA clonation techniques have
    accelerated the scientific progress in this area.
    Daily generated
    information in this field outgrows often the capability of
    processing this information from an evolutive viewpoint.
    <br><br>
    The fast proliferation of the biological information on
    different genomes (dowry of genes of an organism) is driving
    bioinformatics as one fundamental discipline for the handling
    and analysis of these data.

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="374lfindex0">&nbsp;</A>
<H2>Bioinformatics</H2>


    <p>Bioinformatics was born when scientists began to store the
    biological sequences in a digital format and the first programs
    to compare them arose. For a long time bioinformatics was
    limited to the analysis of sequences. Nevertheless, the
    importance to establish the structural form of molecules caused
    that computers become an important tool for investigation in
    theoretical biochemistry. Each day there is more information
    and more collections of data on the 3D conformation of
    molecules. Genes changed from being studied in an individual
    way to be studied over the complete or an extense part of them.
    It's now easier to understand how they behave between them,
    the the proteines and how they organize in the metabolic
    pathways. Every time we are more conscious of how important
    is to organize the data.</p>

    <p>Each one of the described activities has at least two faces
    from which they are interesting. On one hand the biological
    interest is to know the relations between life molecules, and
    on the other hand the assembly becomes an interesting
    software design problem to solve. The necessity is to combine
    and to integrate the biological information to obtain a global
    and effective vision of the biological processes that lies
    there. We have also noticed ourselves of the necessity
    to combine the different areas in computer science to come to  an
    effective solution. One is management of data bases, also data
    integration; efficient algorithms, powerful hardware - grids,
    multiprocessors, etc.

    <A NAME="374lfindex1">&nbsp;</A>
<H2>Perl</H2>


    <p><strong>Larry Wall</strong> began the development of Perl in
    1986. Perl is an interpreted programming language, ideal to
    manipulate texts, files and processes. Perl allows to quickly
    develop small programs.
    It could be said that  Perl is an optimized mixture of
    a high-level language (for example C) and a scripting language
    (for example bash).<br>
    <br>
    Perl programs can run on several operating
    systems / platforms. However, where Perl was born and where it
    has spread is under the UNIX operating systems.
    Perl fully exceeded its initial scope thanks to the impulse
    that it received trought the immediate use as a web applications
    language. Before Perl was
    used<strong>awk</strong>,<strong>thirst</strong>
    and<strong>grep</strong> were the tools to analyze files and to
    extract information.</p>

    <p>Perl reunited the possibilities of these UNIX tools in a
    single program extending and modernizing each one with more
functionality.</p>

    <p>Perl is a free programming language and it is possible to be
    run in any of the operating systems that are generally present
    in the biological research laboratories.
    Under UNIX and MacOSX it comes pre-installed, in others is
    necessary to install perl. It is enough to obtain it from the
    site:<a href="http://www.cpan.org/">http://www.cpan.org</a> for
    the system that we are using.</p>

    <p>The programs in Perl under Linux are called with the name of
    the file that contains the instructions to execute.
     The instructions are keep in a file and Perl is
    invoked with the name of the file as argument.</p>

    <p>Another frequent method is  to
    keep the Perl instructions in a file but without invoking perl with
    the file as argument.
    For that we must make two things: (a) to put
    a special comment at the first line of the program:</p>
<pre class="code">
#!/usr/bin/env perl<br>
print "Hi\n";
</pre>

    <p>and (b)&nbsp;store the file and assign it the UNIX
    properties for execution:</p>
<pre class="code">
% chmod +x greetings.pl
</pre>

    <p>Once made this, the file program can be used
    by just calling it with the file name.
    </p>

    <A NAME="374lfindex2">&nbsp;</A>
<H2>Perl File Management:</H2>


    <p>When we have a database of molecular sequences in text
    format, we can make in Perl a sequence search tool. In this
    example we see how to search for a proteine sequence in a
    database with SWISS-PROT format (db_human_swissprot), using its
    id code.</p>
<pre class="code">
#!/usr/bin/perl<br>
# Look for aminoacid sequence in a database<br>
# SWISS-PROT formated, with a given id code<br>
# Ask for the code in the ID field<br>
# and it assigns it from the input(STDIN)to a variable<br>
print "Enter the ID to search: ";
$id_query=&lt;STDIN&gt;;
chomp $id_query;
# We open the database file<br>
# but if it isn't possible the program ends<br>
open (db, "human_kinases_swissprot.txt") ||
 die "problem opening the file human_kinases_swissprot.txt\n";
# Look line by line in the database<br>
while (&lt;db&gt;) {
chomp $_;
# Check if we are in the ID field
if ($_ =~ /^ID/) {
# If it is possitive we gather the information<br>
# breaking the line by spaces<br>
($a1,$id_db) = split (/\s+/,$_);
# but if there is no coincidence of ID we continue to the following<br>
next if ($id_db ne $id_query);
# When they coincide, we put a mark<br>
$signal_good=1;
# Then we check the sequence field<br>
# and if the mark is 1 (chosen sequence)
# If possitive, we change the mark to 2,to collect the sequence<br>
} elsif (($_ =~ /^SQ/) &amp;&amp; ($signal_good==1)) {
$signal_good=2;
# Finally, if the mark is 2, we present each line<br>
# of the sequence, until the line begins with //
# is such case we broke the while
} elsif ($signal_good == 2) {
last if ($_ =~ /^\/\//);
print &quot;$_\n&quot;;
}
}
# When we left the while instruction we check the mark<br>
# if negative that means that we don't find the chosen sequence<br>
# that will give us an error<br>
if (!$signal_good) {
print &quot;ERROR: &quot;.&quot;Sequence not found\n&quot;;
}
# Finally, we close the file
# that still si open<br>
close (db);
exit;
</pre>
    <br>

    <A NAME="374lfindex3">&nbsp;</A>
<H2>Search for aminoacid patterns</H2>

<pre class="code">
#!/usr/bin/perl
# Searcher for aminoacid patterns
# Ask the user the patterns for search
print "Please, introduce the pattern to search in query.seq: ";
$patron = &lt;STDIN&gt;;
chomp $patron;
# Open the database file
# but if it can't it ends the program
open (query, "query_seq.txt") || die "problem opening the file query_seq.txt\n";
# Look line by line the SWISS-PROT sequence
while (&lt;query&gt;) {
chomp $_;
# When arrives to the SQ field,put the mark in 1<br>
   if ($_ =~ /^SQ/) {<br>
         $signal_seq = 1;
# When arrive to the end of sequence, leave the curl<br>
# Check that this expression is put before to check<br>
# the mark=1,because this line doesn't belong to the aminoacid sequence<br>
   } elsif ($_ =~ /^\/\//) {<br>
         last;
# Check the mark if it is equal to 1, if possitive<br>
# eliminate the blank spaces in the sequence line<br>
# and join every line in a new variable<br>
# To concatenate, we also can do:<br>
# $secuencia_total.=$_;<br>
   } elsif ($signal_seq == 1) {<br>
         $_ =~ s/ //g;<br>
         $secuencia_total=$secuencia_total.$_;<br>
   }<br>
  }
# Now check the sequence, collected in its entirety,<br>
# for the given pattern<br>
  if ($secuencia_total =~ /$patron/) {<br>
   print &quot;The sequence query.seq contains the pattern $patron\n&quot;;<br>
  } else {<br>
   print &quot;The sequence query.seq doesn't contains the pattern $patron\n&quot;;<br>
  }
# Finally we close the file<br>
# and leave the program<br>
close (query);<br>
exit;
</pre>

    <p>If we want to know the exact position where it has found the
    pattern, we must make use of a special variable `$&amp;'. This
    variable keeps the pattern found after evaluating a regular
    expression (would be necessary to put it just after the line `
    <strong>if ($$secuencia_total&gt;= ~/$$patron&gt;/)
    {</strong>`. In addition is possible to combine with the
    variables ` $ ` ' and ` $ &acute; ' that store everything in
    the left and right of the found pattern. It modifies the
    previous program with these new variables, to give the exact
    position of the pattern. Note: Also you can find useful the
    <strong>length</strong> function, that gives the length of a
    chain.</p>

    <p>&nbsp;</p>
<pre class="code">
# Only we need to change the if where the pattern was found
# Now check the sequence, collected in its entirety,<br>
# for the given pattern<br>
# and check its position in the sequence<br>
  if ($secuencia_total =~ /$patron/) {<br>
   $posicion=length($`)+1;<br>
   print &quot;The sequence query_seq.txt contains the pattern $patron in the following position $posicion\n&quot;;
  } else {<br>
  print &quot;The sequence query_seq.txt doesn't contains the pattern $patron\n&quot;;<br>
  }
</pre>

    <A NAME="374lfindex4">&nbsp;</A>
<H2>Calculus of aminoacid frequences:</H2>


    <p>The frequency of the different aminoacid in proteins is
    variable, as a result of its different functions or favourite
    surroundings. Thus, in this example, we will see how to
    calculate the aminoacide frequency of a given sequence
    of aminoacid.</p>
<pre class="code">
<br>
#!/usr/bin/perl
# Calculates the frequency of aminoacid in a proteinic sequence
# Gets the file name from the command line
# (SWISS-PROT formatted)
# Also can be asked with print from the &lt;STDIN&gt;
if (!$ARGV[0]) {print &quot;The execution line shall be: program.pl file_swissprot\n&quot;;}
$fichero = $ARGV[0];
# Initialize the variable $errores
my $errores=0;
# Open the file for reading
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";
# First we check the sequence as did in the example 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
   last if ($_ =~ /^\/\//);
   $_ =~ s/\s//g;
   $secuencia.=$_;
}
}
close (FICHA);
# Now use a curl that checks every position of the aminoacid
# in the sequence (from a funcion of its own,that can be used after in other
# programs)
comprueba_aa ($secuencia);
# Print the results to the screen
# First the  20 aminoacids and then the array with their frequencies
# In this case 'sort' can't be used in foreach,
# because the array contains the frequencies (numbers)
print&quot;A\tC\tD\tE\tF\tG\tH\tI\tK\tL\tM\tN\tP\tQ\tR\tS\tT\tV\tW\tY\n&quot;;
foreach $each_aa (@aa) {
print &quot;$each_aa\t&quot;;
}
# Ten it gives the possible errors
# and ends the program
print "\nerrores = $errores\n";
exit;
# Functions
# This one calculates each aminoacid frequency
# from a proteinic sequence
sub comprueba_aa {
# Gets the sequence
my ($secuencia)=@_;
# and runs aminoacid by aminoacid, using a for running
# from 0 until the sequence length
for ($posicion=0 ; $posicion&lt;length $secuencia ; $posicion++ ) {
# Gets the aminoacid
$aa = substr($secuencia, $posicion, 1);
# and checks which one is using if
# when it is checked it aggregates 1 to the correspondant frequency
# in an array using a pointer for each one
# ordered in alphabetic way
if ( $aa eq 'A' ) {
$aa[0]++;
} elsif ( $aa eq 'C' ) {
$aa[1]++;
} elsif ( $aa eq 'D' ) {
$aa[2]++;
} elsif ( $aa eq 'E' ) {
$aa[3]++;
} elsif ( $aa eq 'F' ) {
$aa[4]++;
} elsif ( $aa eq 'G' ) {
$aa[5]++;
} elsif ( $aa eq 'H' ) {
$aa[6]++;
} elsif ( $aa eq 'I' ) {
$aa[7]++;
} elsif ( $aa eq 'K' ) {
$aa[8]++;
} elsif ( $aa eq 'L' ) {
$aa[9]++;
} elsif ( $aa eq 'M' ) {
$aa[10]++;
} elsif ( $aa eq 'N' ) {
$aa[11]++;
} elsif ( $aa eq 'P' ) {
$aa[12]++;
} elsif ( $aa eq 'Q' ) {
$aa[13]++;
} elsif ( $aa eq 'R' ) {
$aa[14]++;
} elsif ( $aa eq 'S' ) {
$aa[15]++;
} elsif ( $aa eq 'T' ) {
$aa[16]++;
} elsif ( $aa eq 'V' ) {
$aa[17]++;
} elsif ( $aa eq 'W' ) {
$aa[18]++;
} elsif ( $aa eq 'Y' ) {
$aa[19]++;
# If the aminoacid is not found
# it aggregates 1 to the errors
} else {
print "ERROR: Aminoacid not found: $aa\n";
$errores++;
}
}
# Finally returns to the frequency array
return @aa;
}
</pre>

    <p>Now we are going to make the following step that follows the
    flow of information in a cell, after the transcription. One is
    the translation, by which a sequence of ARN coming from a gene,
    that was of DNA, passes to proteins or aminoacid sequences. For
    that we must use the genetic code, that is based on which
    triplets of ARN/ADN correspond to an aminoacid. The sequence
    that we are going to extract of a card of a gene
    of<em>Escherichia coli</em>, in format EMBL and soon we will
    verify the translation with the existing one in the card. For
    this example, it will be necessary to introduce the associative
    variables of arrays or tables hash. In the program we should
    consider than only is needed the codificarte area, included in
    the 'FT CDS field.</p>
<pre class="code">
<br>
#!/usr/bin/perl
# Translates an ADN sequence from an EMBL fiche
# to the aminoacid correspondant
# Gets the file name from the command line
# (SWISS-PROT formatted)
# Also can be asked with print from the &lt;STDIN&gt;
if (!$ARGV[0]) {print "The program line shall be: program.pl ficha_embl\n";}
$fichero = $ARGV[0];
# Open the file for reading
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";
# First we check the sequence as did in the example 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^FT CDS/) {
$_ =~ tr/../ /;
($a1,$a2,$a3,$a4) = split (" ",$_);
}
elsif ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
last if ($_ =~ /^\/\//);
# Eliminate numbers and spaces
$_ =~ tr/0-9/ /;
$_ =~ s/\s//g;
$secuencia.=$_;
}
}
close (FICHA);
# Now we define an associate array with the correpondence
# of every aminoacids with their nucleotide
# correspondants (also in an own function,
# for if the same genetic code is used in other program
my(%codigo_genetico) = (
'TCA' =&gt; 'S',# Serine
'TCC' =&gt; 'S',# Serine
'TCG' =&gt; 'S',# Serine
'TCT' =&gt; 'S',# Serine
'TTC' =&gt; 'F',# Fenilalanine
'TTT' =&gt; 'F',# Fenilalanine
'TTA' =&gt; 'L',# Leucine
'TTG' =&gt; 'L',# Leucine
'TAC' =&gt; 'Y',# Tirosine
'TAT' =&gt; 'Y',# Tirosine
'TAA' =&gt; '*',# Stop
'TAG' =&gt; '*',# Stop
'TGC' =&gt; 'C',# Cysteine
'TGT' =&gt; 'C',# Cysteine
'TGA' =&gt; '*',# Stop
'TGG' =&gt; 'W',# Tryptofane
'CTA' =&gt; 'L',# Leucine
'CTC' =&gt; 'L',# Leucine
'CTG' =&gt; 'L',# Leucine
'CTT' =&gt; 'L',# Leucine
'CCA' =&gt; 'P',# Proline
'CCC' =&gt; 'P',# Proline
'CCG' =&gt; 'P',# Proline
'CCT' =&gt; 'P',# Proline
'CAC' =&gt; 'H',# Hystidine
'CAT' =&gt; 'H',# Hystidine
'CAA' =&gt; 'Q',# Glutamine
'CAG' =&gt; 'Q',# Glutamine
'CGA' =&gt; 'R',# Arginine
'CGC' =&gt; 'R',# Arginine
'CGG' =&gt; 'R',# Arginine
'CGT' =&gt; 'R',# Arginine
'ATA' =&gt; 'I',# IsoLeucine
'ATC' =&gt; 'I',# IsoLeucine
'ATT' =&gt; 'I',# IsoLeucine
'ATG' =&gt; 'M',# Methionina
'ACA' =&gt; 'T',# Treonina
'ACC' =&gt; 'T',# Treonina
'ACG' =&gt; 'T',# Treonina
'ACT' =&gt; 'T',# Treonina
'AAC' =&gt; 'N',# Asparagina
'AAT' =&gt; 'N',# Asparagina
'AAA' =&gt; 'K',# Lisina
'AAG' =&gt; 'K',# Lisina
'AGC' =&gt; 'S',# Serine
'AGT' =&gt; 'S',# Serine
'AGA' =&gt; 'R',# Arginine
'AGG' =&gt; 'R',# Arginine
'GTA' =&gt; 'V',# Valine
'GTC' =&gt; 'V',# Valine
'GTG' =&gt; 'V',# Valine
'GTT' =&gt; 'V',# Valine
'GCA' =&gt; 'A',# Alanine
'GCC' =&gt; 'A',# Alanine
'GCG' =&gt; 'A',# Alanine
'GCT' =&gt; 'A',# Alanine
'GAC' =&gt; 'D',# Aspartic Acid
'GAT' =&gt; 'D',# Aspartic Acid
'GAA' =&gt; 'E',# Glutamic Acid
'GAG' =&gt; 'E',# Glutamic Acid
'GGA' =&gt; 'G',# Glicine
'GGC' =&gt; 'G',# Glicine
'GGG' =&gt; 'G',# Glicine
'GGT' =&gt; 'G',# Glicine
);
# Translate every codon in its correspondant aminoacid
# and aggregates to the proteinic sequence
print $a3;
for($i=$a3 - 1; $i &lt; $a4 - 3 ; $i += 3) {
$codon = substr($secuencia,$i,3);
# Pass the codon from subcase (EMBL format) to uppercase
$codon =~ tr/a-z/A-Z/;
$protein.= codon2aa($codon);
}
print "This proteinic sequence of the gen:\n$secuencia\nis the following:\n$protein\n\n";
exit;
</pre>

    <A NAME="374lfindex5">&nbsp;</A>
<H2>Bibliographic References</H2>


    <ul>
      <li><a href="http://bioperl.org/">http://bioperl.org/</a><br>
      <br>
      </li>

      <li><a href=
      "http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html">
      http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html</a><br>

      <br>
      </li>

      <li>
        <p><a href=
        "http://www.unix.org.ua/orelly/perl/prog3/">http://www.unix.org.ua/orelly/perl/prog3/</a><br>

        <br>
        </p>
      </li>

      <li><strong>Example files :</strong><br>
      - <a href=
      "../../common/src2/article374/human_kinases_swissprot.txt">human_kinases_swissprot.txt</a><br>

      - <a href=
      "../../common/src2/article374/query_seq.txt">query_seq.txt</a><br>

      - <a href=
      "../../common/src2/article374/ecoli_embl.txt">ecoli_embl.txt</a><br>

      <br>
      </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=74: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Webpages maintained by the LinuxFocus Editor team</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Carlos     Andr&eacute;s P&eacute;rez</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">es --&gt; -- : Carlos Andr&eacute;s P&eacute;rez <small>&lt;caperez /at/ usc.edu.co&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Carlos Andr&eacute;s P&eacute;rez &lt;caperez /at/ usc.edu.co&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-04-12, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
