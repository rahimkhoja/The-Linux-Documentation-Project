<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf371, SoftwareDevelopment: C/C++-Programme optimieren mit dem Profiler gprof</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Arnout Engelen
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: C/C++-Programme optimieren mit dem Profiler gprof
 =LF=NUMBER: 371
 =LF=ANAME_: article371.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Plan</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Suchen</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Nachrichten</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archiv</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.shtml"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">&Uuml;ber uns</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Dieses Dokument ist verf&uuml;bar auf: <A href="../../English/March2005/article371.shtml">English</a> &nbsp;<A href="../../ChineseGB/March2005/article371.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/March2005/article371.shtml">Deutsch</a> &nbsp;<A href="../../Francais/March2005/article371.shtml">Francais</a> &nbsp;<A href="../../Russian/March2005/article371.shtml">Russian</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<IMG SRC="../../common/images2/ArnoutEngelen.png" ALT="Arnout Engelen" width="164" height="200">
<BR>von  Arnout Engelen <br> <small>&lt;arnouten(Q)bzzt.net&gt;</small>
<BR><BR>
<I>&Uuml;ber den Autor:</I><BR>
<!-- aboutauthor_start -->
<p>Arnout Engelen studiert Informatik an der Universit&auml;t von Nijmegen
(Niederlande) und ist bei TUNIX besch&auml;ftigt, einer
Internet-Sicherheitsfirma. In seiner Freizeit l&auml;uft er lange Strecken und
spielt Tenorsaxophon.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO de -->
<BR><BR><I>&Uuml;bersetzt ins Deutsche von:</I><BR>
Viktor Horvath <small>&lt;ViktorHorvath(at)gmx.net&gt;</small>
<br>
<!--
 =LF=TRANSTO=de: Viktor Horvath
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Inhalt</i>:
<UL>
  <LI><A HREF="#371lfindex0">Profiling kurz und b&uuml;ndig</A></LI>
  <LI><A HREF="#371lfindex1">Fallstudie: Pathalizer</A></LI>
  <LI><A HREF="#371lfindex2">Zeitmessung der Applikation</A></LI>
  <LI><A HREF="#371lfindex3">Das Profiling</A></LI>
  <LI><A HREF="#371lfindex4">Die Optimierung</A></LI>
  <LI><A HREF="#371lfindex5">Ergebnisse</A></LI>
  <LI><A HREF="#371lfindex6">Ein zweiter Lauf</A></LI>
  <LI><A HREF="#371lfindex7">Andere Profiler f&uuml;r C/C++</A></LI>
  <LI><A HREF="#371lfindex8">Profiling von anderen Sprachen</A></LI>
  <LI><A HREF="#371lfindex9">Fazit</A></LI>
  <LI><A HREF="#371lfindex10">Links</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">Talkback f&uuml;r diesen Artikel</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_03-0371.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>C/C++-Programme optimieren mit dem Profiler gprof</H2>
 <IMG SRC="../../common/images2/article371/profilingpicture.png" ALT="Profiling with gprof" HSPACE=10 width="400" height="63">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Zusammenfassung</i>:
<P>
<!-- articleabstract_start -->
<p>Eine der wichtigsten Sachen, die man im Kopf behalten mu&szlig;, wenn man eine
Applikation optimiert, ist: optimiere dort, wo es z&auml;hlt. Es n&uuml;tzt nichts,
stundenlang ein St&uuml;ck Code zu optimieren, das sowieso nur w&auml;hrend 0,04
Sekunden l&auml;uft.</p><p>gprof bietet einen &uuml;berraschend einfachen Weg, deine C/C++-Applikation
zu profilieren und die interessanten Stellen gleich zu finden. Eine kleine
Fallstudie zeigt, wie mittels gprof die Laufzeit einer realen Applikation
von &uuml;ber 3 Minuten auf unter 5 Sekunden reduziert wurde, indem zwei
Datenstrukturen als wichtig erkannt und optimiert wurden.</p><p>Historisch gesehen reicht das Programm bis 1982 zur&uuml;ck, als es auf dem
SIGPLAN-Symposion &uuml;ber Compilerbau vorgestellt wurde. Es ist inzwischen ein
Standardwerkzeug, das es auf praktisch allen UNIX-Arten gibt.</p>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


<A NAME="371lfindex0">&nbsp;</A>
<H2>Profiling kurz und b&uuml;ndig</H2>


<p>Das Konzept des Profiling ist sehr einfach: Indem man festh&auml;lt, zu
welchen Zeiten ein Programm Funktionen betritt und verl&auml;&szlig;t, ist es m&ouml;glich
zu berechnen, in welchen Teilen des Programms es sich die meiste Zeit
aufh&auml;lt. Die Durchf&uuml;hrung dieser Messung klingt jetzt nach etwas, das viel
M&uuml;he kostet - gl&uuml;cklicherweise ist dem nicht so! Man mu&szlig; lediglich mit
einer zus&auml;tzlichen gcc-Option kompilieren (<code>-pg</code>), das Programm
laufen lassen (um die Daten f&uuml;r das Profiling zu erzeugen) und
<code>gprof</code> mit der erzeugten Statistikdatei aufrufen, um sie in
einer komfortableren Art darzustellen.</p>

<A NAME="371lfindex1">&nbsp;</A>
<H2>Fallstudie: Pathalizer</H2>


<p>Ich benutze hier eine reale Applikation als Beispiel, einen Teil von <a
href="http://pathalizer.bzzt.net">pathalizer</a>: das Programm
<code>event2dot</code>, das eine &bdquo;events&ldquo;-Datei von Pathalizer
in eine &bdquo;dot&ldquo;-Datei von graphviz &uuml;bersetzt.</p>

<p>Kurz gesagt, liest es die Ereignisse aus einer Datei und speichert sie
als Graphen (mit den Seiten als Knoten und mit den &Uuml;berg&auml;ngen zwischen
Seiten als Kanten). Diese Graphensammlung wird dann in einen gro&szlig;en Graph
im graphviz &bdquo;dot&ldquo;-Format &bdquo;zusammengefa&szlig;t&ldquo;.</p>

<A NAME="371lfindex2">&nbsp;</A>
<H3>Zeitmessung der Applikation</H3>


<p>Zuerst starten wir das Programm, das wir optimieren wollen, ohne
Profiling und messen, wie lange es braucht. Die Programmquellen f&uuml;r das
Beispiel sind ebenso wie Beispieldaten von betr&auml;chtlicher Gr&ouml;&szlig;e
(55.000 Zeilen) verf&uuml;gbar.</p>

<p>Auf meinem Rechner dauerte ein Lauf von <code>event2dot</code> mehr als
drei Minuten auf diesen Daten:</p>

<pre class="code">
real    3m36.316s
user    0m55.590s
sys     0m1.070s
</pre>

<A NAME="371lfindex3">&nbsp;</A>
<H3>Das Profiling</H3>


<p>Profiling mit gprof wird eingeschaltet, indem man die Option
<code>-pg</code> zum Kompiliervorgang hinzuf&uuml;gt. Wir kompilieren die
Applikation also:</p>
<pre class="code">
g++ -pg dotgen.cpp readfile.cpp main.cpp graph.cpp config.cpp -o event2dot
</pre>

<p>Wir k&ouml;nnen jetzt <code>event2dot</code> abermals auf unserer Testdatei
rechnen lassen. W&auml;hrenddessen wird Profiling-Information zu
<code>event2dot</code> gesammelt und eine Datei &bdquo;gmon.out&ldquo;
generiert. Wir sehen uns das Ergebnis mittels <code>gprof event2dot |
less</code> an.</p>

<p>gprof zeigt uns jetzt die wichtigsten Funktionen:</p>

<pre class="code">
 % cumulative  self              self     total
 time seconds  seconds  calls s/call s/call name
43.32   46.03  46.03 339952989  0.00  0.00 CompareNodes(Node *,Node *)
25.06   72.66  26.63    55000   0.00  0.00 getNode(char *,NodeListNode *&amp;)
16.80   90.51  17.85 339433374  0.00  0.00 CompareEdges(Edge *,AnnotatedEdge *)
12.70  104.01  13.50    51987   0.00  0.00 addAnnotatedEdge(AnnotatedGraph *,Edge *)
 1.98  106.11   2.10    51987   0.00  0.00 addEdge(Graph *,Node *,Node *)
 0.07  106.18   0.07        1   0.07  0.07 FindTreshold(AnnotatedEdge *,int)
 0.06  106.24   0.06        1   0.06 28.79 getGraphFromFile(char *,NodeListNode *&amp;,Config *)
 0.02  106.26   0.02        1   0.02 77.40 summarize(GraphListNode *,Config *)
 0.00  106.26   0.00    55000   0.00  0.00 FixName(char *)
</pre>

<p>Die interessanteste Spalte ist die erste: Das ist der prozentuale Anteil
dieser Funktion an der gesamten Programmlaufzeit.</p>

<A NAME="371lfindex4">&nbsp;</A>
<H3>Die Optimierung</H3>


<p>Das Programm verbringt demnach fast die H&auml;lfte seiner Zeit in
<code>CompareNodes</code>. Ein schnelles <code>grep</code> zeigt, da&szlig;
<code>CompareNodes</code> nur von <code>CompareEdges</code> aufgerufen
wird, welches wiederum nur von <code>addAnnotatedEge</code> benutzt wird -
diese beiden befinden sich auch in der Liste. Das sieht nach einer
interessanten Stelle zur Optimierung aus.</p>

<p>Wir stellen fest, da&szlig; <code>addAnnotatedEdge</code> eine verlinkte Liste
durchl&auml;uft. Obwohl eine verlinkte Liste einfach zu implementieren ist, ist
sie nicht die beste aller Datenstrukturen. Wir entscheiden,
<code>g-&gt;edges</code> durch einen Bin&auml;rbaum zu ersetzen: Das sollte die
Suche in der Struktur stark beschleunigen und trotzdem einen
Durchgang erm&ouml;glichen.</p>

<A NAME="371lfindex5">&nbsp;</A>
<H3>Ergebnisse</H3>


<p>Wir sehen, da&szlig; die Ausf&uuml;hrungszeit tats&auml;chlich reduziert wird:</p>

<pre class="code">
real    2m19.314s
user    0m36.370s
sys     0m0.940s
</pre>

<A NAME="371lfindex6">&nbsp;</A>
<H3>Ein zweiter Lauf</H3>


<p>Der nochmalige Lauf von gprof offenbart:</p>

<pre class="code">
%   cumulative self           self    total
 time   seconds seconds calls  s/call  s/call name
87.01     25.25  25.25  55000    0.00    0.00 getNode(char *,NodeListNode *&amp;)
10.65     28.34   3.09  51987    0.00    0.00 addEdge(Graph *,Node *,Node *)
</pre>

<p>Eine Funktion, die bislang &uuml;ber die H&auml;lfte der Zeit verbraucht hat,
wurde bis in die Irrelevanz reduziert! Das wollen wir noch einmal versuchen:
Wir ersetzen die <code>NodeList</code> durch eine
<code>NodeHashTable</code>.</p>

<p>Auch das ist eindeutig eine gro&szlig;e Verbesserung:</p>

<pre class="code">
real    0m3.269s
user    0m0.830s
sys     0m0.090s
</pre>

<A NAME="371lfindex7">&nbsp;</A>
<H2>Andere Profiler f&uuml;r C/C++</H2>


<p><img src="../../common/images2/article371/shot.png" align="right"
width="565" height="337">
Es gibt einige Profiler, die die Daten von gprof benutzen, z.B. <a
	href="http://kprof.sf.net">KProf</a> (Screenshot) und <a
	href="http://mvertes.free.fr/">cgprof</a>. Obwohl die graphischen
      Ansichten eine nette Sache sind, finde ich pers&ouml;nlich gprof auf der
      Kommandozeile praktischer.</p>
<br clear="all">

<A NAME="371lfindex8">&nbsp;</A>
<H2>Profiling von anderen Sprachen</H2>


<p>Wir haben nun das Profiling von C/C++-Applikationen mit gprof
besprochen, aber &Auml;hnliches kann auch mit anderen Sprachen gemacht
werden. F&uuml;r Perl kannst du das Modul Devel::DProf benutzen. Starte deine
Applikation mit <code>perl -d:DProf mycode.pl</code> und sieh die
Ergebnisse mit <code>dprofpp</code> an. Wenn du deine Java-Programme mit
gcj kompilieren kannst, kannst du einfach gprof benutzen, es wird zur Zeit
jedoch nur Java-Code mit einem einzigen Thread unterst&uuml;tzt.</p>

<A NAME="371lfindex9">&nbsp;</A>
<H2>Fazit</H2>


<p>Wir haben gesehen, da&szlig; wir durch Profiling schnell die Teile einer
Applikation finden k&ouml;nnen, die von einer Optimierung profitieren
w&uuml;rden. Indem wir dort optimierten, wo es drauf ankam, haben wir die
Laufzeit des Beispielprogramms von 3:36 Minuten auf weniger als f&uuml;nf
Sekunden gesenkt.</p>

<A NAME="371lfindex10">&nbsp;</A>
<H2>Links</H2>

<ul>
<li>Pathalizer:   <a
href="http://pathalizer.sf.net">http://pathalizer.sf.net</a><br><br>
<li>KProf:        <a
href="http://kprof.sf.net">http://kprof.sf.net</a><br><br>
<li>cgprof:       <a
href="http://mvertes.free.fr">http://mvertes.free.fr</a><br><br>
<li>Devel::DProf  <a
href="http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html">http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html</a><br><br>
<li>gcj:          <a
href="http://gcc.gnu.org/java">http://gcc.gnu.org/java</a><br><br>
<li>Pathalizer-Beispieldaten:         <a href="../../common/src2/article371/index.html">Download f&uuml;r article371</a><br><br>
</ul>


<!-- vim: set sw=2 ts=2 et tw=74: -->

<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback f&uuml;r diesen Artikel</h2>
Jeder Artikel hat seine eigene Seite f&uuml;r Kommentare und R&uuml;ckmeldungen. Auf dieser Seite kann jeder eigene Kommentare abgeben und die Kommentare anderer Leser sehen:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">&nbsp;Talkback Seite&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Zum index dieser Ausgabe</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Der LinuxFocus Redaktion schreiben</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Arnout Engelen</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Autoren und &Uuml;bersetzer:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Arnout Engelen <small>&lt;arnouten(Q)bzzt.net&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; de: Viktor Horvath &lt;ViktorHorvath(at)gmx.net&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-07-29, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
