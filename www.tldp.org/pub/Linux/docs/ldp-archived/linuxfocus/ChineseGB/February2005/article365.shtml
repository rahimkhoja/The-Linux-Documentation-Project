<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=gb2312">
 <META NAME="GENERATOR" CONTENT="lfparser_2.51">
 <META NAME="LFCATEGORY" CONTENT="Hardware">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf365, Hardware: 一个数字温度计或跟你的atmel微控制器进行I2C通信</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Guido     Socher
 =LF=CAT___: Hardware
 =LF=TITLE_: 一个数字温度计或跟你的atmel微控制器进行I2C通信
 =LF=NUMBER: 365
 =LF=ANAME_: article365.shtml
 =LF=PARSER: 2.51
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">站点地图</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">索引</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.shtml"><FONT color=
                 "#DDDDDD" size="2">搜索</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">新闻</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">过往期刊</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.shtml"><FONT color=
           "#FFFFFF">链接</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">关于LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/February2005/article365.shtml">English</a> &nbsp;<A href="../../Castellano/February2005/article365.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/February2005/article365.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/February2005/article365.shtml">Deutsch</a> &nbsp;<A href="../../Francais/February2005/article365.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images/Guido-S.gif" alt=
    "[Photo of the Author]" height="164" width="173">
<BR>by  Guido Socher <a href="http://linuxfocus.org/~guido/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>关于作者:</I><BR>
<!-- aboutauthor_start -->
<p>
    Guido喜欢Linux，因为对于开发自己的硬件来说Linux确实是一个非常好的系统。
    </p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO gb -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>目录</i>:
<UL>
  <LI><A HREF="#365lfindex0">概述</A></LI>
  <LI><A HREF="#365lfindex1">I2C/TWI如何工作？</A></LI>
  <LI><A HREF="#365lfindex2">计划</A></LI>
  <LI><A HREF="#365lfindex3">The temperature sensor</A></LI>
  <LI><A HREF="#365lfindex4">电路</A></LI>
  <LI><A HREF="#365lfindex5">制作电路板</A></LI>
  <LI><A HREF="#365lfindex6">把所有器件组合在一起Putting everything together</A></LI>
  <LI><A HREF="#365lfindex7">使用I2C进行通信</A></LI>
  <LI><A HREF="#365lfindex8">温度是多少？</A></LI>
  <LI><A HREF="#365lfindex9">结论</A></LI>
  <LI><A HREF="#365lfindex10">参考资料</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=365">对这篇文章发表评论</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>一个数字温度计或跟你的atmel微控制器进行I2C通信</H2>
 <img src="../../common/images2/article365/title_365.jpg" alt=
    "[Illustration]" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>摘要</i>:
<P>
<!-- articleabstract_start -->

    Atmel的Atmega8微控制器有充足的数字和模拟输入输出线。
    对于开发任何种类的测量设备来说它确实是一个理想的器件。
    <br><br>
    在这篇文章中让我们来看一下如何不使用额外的MAX232芯片而只通过物理的RS232接口连接微控制器和Linux
    PC.

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="365lfindex0">&nbsp;</A>
<H2>概述</H2>

    看这篇文章你必须有像在<a href=
    "../November2004/article352.shtml">my "Programming the AVR
    microcontroller with GCC, libc 1.0.4" article</a>中描述的那样的GCC
    AVR编程环境。如果想避免安装的麻烦你当然可以使用the AVR programming CD
    (from <a href=
    "http://shop.tuxgraphics.org/">http://shop.tuxgraphics.org/</a>，
    <a href=
    "http://shop.tuxgraphics.org/electronic/microcontroller.html"><img
     src="../../common/images2/article365/linuxavrcd_th.jpg" align=
    "right" width="150" height="213" vspace="4" hspace="4"></a>)

    <br>
    <br>
    <br>
    当你使用这么先进的器件作为一个微控制器来测量模拟或数字信号时，
    你肯定需要一些接口来计算它产生的数据或者对它发送命令。
    以前我们在此发布的所有文章中我们总是通过微控制器中的UART来使用RS232进行通信。
    问题是那种方式需要一个额外的MAX232芯片和4个额外的电容器。
    另外，Atmel还建议：UART通信的可靠工作还需要一个外部晶振。
    不管怎样那需要好多的额外器件，我们可以想办法避免使用它们。
    <br>
    <br>
    PC和微控制器之间所传送的数据量通常很少（仅仅几个字节），
    因此速度一点都不重要。这就使得I2C总线（协议）非常适合这项工作。
    <br>
    <br>
    I2C（I<sup>2</sup>C，读作I方C，英语读作eye-square-see）是一个双线双向的通信接口。
    它是由菲利浦公司创造的，并且其名称也受到保护。
    这也是为什么其他的厂商对同一个协议使用不同的名字。
    Ateml管I2C叫TWI（Two Wire Interface，双线接口）。
    <br>
    <br>
    你们好多人可能不知道在你们的电脑中已经使用了I2C总线。
    所有流行的主板上都有一个I2C总线来读取温度、风扇转速以及可用的内存容量等等所有的硬件信息。
    不幸的是这一I2C总线不能用于PC外部（没有物理的接插件）。
    所以我们得发明一些新的方法。
    <br>
    <br>
    但首先让我们来看一下TWI（另一个名字叫I2C）是怎样工作的。

    <A NAME="365lfindex1">&nbsp;</A>
<H2>I2C/TWI如何工作？</H2>

    实际上Atmega8数据表（参见参考资料）从第160页起就有了一个非常详细的描述。
    所以在这里我只提供一个总览。看过后你就应该明白数据表中描述的项目了。
    <br>
    <br>
    在I2C总线上总会有一个主设备和一个或几个从设备。主设备初始化通信并控制时钟。
    总线的两根线分别叫SDA（数据线）和SCL（时钟线）。
    总线上的每一个设备必须有独立的电源（跟传统的RS232通信相同）。
    通常两条线都通过4.7K的上拉电阻连接到逻辑高电平上（对于5V的IC是 +5V）。
    这就给出了所有设备间的“或”连接。
    当一个设备想传送“0”时只需要将一条线接地即可，或者传送“1”时保持高电平。

    <br>
    <br>
    总线上每一个设备都有一个7位的唯一地址。
    主设备通过送出一个称做“起始状态”的模式串开始一次通信，
    然后再对其想访问的设备进行寻址。
    接着主设备送出一个比特来说明它是想读还是写数据。
    从设备回送一个应答位（ack-bit）表示它能明白主设备想干什么。
    换言之我们在总线上看到了9个比特的数据（7位地址码+一个读写位+一个应答位）。

<pre class="code">
| start | 7-bit slave adr | read_data bit | wait for ack | ... data comes here
</pre>
    然后是什么？
    <br>
    <br>
    下一步我们就可以收发数据了。传送的数据总是8比特（一个字节）的倍数并且必须收到应答位。
    换句话说总线上的数据总是按9比特的包传送的。通信结束后主设备必须送出一个“停止状态”。
    也就是说当主设备接收从设备发来的数据时它必须知道传送的数据量。
    因为你可以在用户协议中传送这一信息，所以这也不会有什么问题。
    例如我们可以使用表示字符串结束的“0”字节来表明没有数据需要传输了。

    <br>
    <br>
    当SCL为“1”时SDA线上的数据是有效的。如：
<pre class="code">
SDA H -\       /---\     /---\          /---\
    L   \-----/     \---/     \--------/     \------....

SCL H ----\     /-\       /-\     /-\    /-\    /-\
    L      \---/   \-----/   \---/   \--/   \--/   \-....


  | START |      1 |       1 |     0 |    1 |    0 |
</pre>
    使用这一协议的一个好处就是我们不需要精确的同步时钟信号。
    当时钟信号有一点抖动时协议还可以工作。

    <br>
    <br>
    严格地说，这一特性使得我们可以使用一个用户空间的程序来实现I2C协议，
    而不需要内核驱动程序或者特定的硬件（如UART）。非常酷是吧？

    <A NAME="365lfindex2">&nbsp;</A>
<H2>计划</H2>

    正如以前所述，我们不能使用PC的内部I2C总线，
    但是我们可以使用任何外部接口来收发单独的数据比特流。
    下面我们将使用我们PC上的RS232硬件接口。
    换句话说我们仍然使用跟以前的文章中相同的通信接口，
    不过我们省下了MAX232硬件和电容器等等。

    <br>
    <br>
    当然最困难的部分是从头实现I2C协议，我花了五个周的时间学习和调试。
    不过现在已经完成了，你可以直接COPY它:-)。我只希望你在使用这些代码的时候能记住它们的价值。
    <br>
    <br>
    作为一个示范程序我们将制作一个温度计。当然你也可以测量其他的东西或者你只是用来开关电灯。
    那就是你的自由了。
    <br>
    <br>
    在下一篇文章中我们将增加一个本地的液晶显示屏。
    也就是说你可以直接从液晶显示屏上读到温度而不用到你的Linux PC上去看了。
    为了不使这篇文章过长我们将在下一篇中对液晶显示屏进行说明。

    <table align="right" width="162">
      <tr>
        <td bgcolor="#C5D4F9"><img src=
        "../../common/images2/article365/ntc.jpg" alt="ntc"><br>
        NTCs 体积小、便宜并且足够准确
        </td>
      </tr>
    </table>

    <A NAME="365lfindex3">&nbsp;</A>
<H2>The temperature sensor</H2>

    你可以找到一些校准过的温度计（有一些是支持I2C协议的），
    但它们都很贵。NTCs比较便宜，也非常好，甚至不需要手工校准。
    如果你稍稍校准一下你就可以获得小数点后的精度。
    <br>
    <br>
    NTCs有一个问题就是它们是非线性的。不过这只是一个半导体物理问题，
    我们只需要找到合适的公式将非线性的曲线调整一下就行了。
    微控制器本身就是一个小型计算机，做一些数学运算肯定没有问题。
    <br clear="all">

    <center>
      <img src="../../common/images2/article365/Ntcformula.gif"
      alt="ntc formula">
    </center>
    T或Tc是我们需要得到的温度值。Rn是NTC在25'C的电阻值。你可以买
    4K、7K等等的NTCs，Rn就是这些值。
    <br>


    <A NAME="365lfindex4">&nbsp;</A>
<H2>电路</H2>


    <table align="right">
      <tr>
        <td>
          <center>
            <a href=
            "../../common/images2/article365/i2ctemp_schematic.gif">
            <img src=
            "../../common/images2/article365/i2ctemp_schematic_th.gif"
             alt="circuit diagram"></a><br>
            电路图，点击小图看大图。
          </center>
        </td>
      </tr>
    </table>
    现在我们已经备齐了制造一个数字温度计的所有器件。我们增加了两个NTC传感器。
    一个测内部温度另一个测外部温度。如果需要你可以另行增加（比方说conn3和PC2是空闲的）。
    我不希望你在下一篇文章中再做一套全新的电路，
    所以在电路图中增加了连接液晶显示屏所需要的几条线。
    <br>
    <br>
    上面还使用了一个发光二极管。它不贵而且对我们基本的调试确实很有用。
    例如，我在开发PC和微控制器间的I2C通信协议时曾用它调试I2C状态机。
    正常运行时我们可以让它闪烁，以表明温度计在工作。

    <br>
    <br>
    因此，电路非常清晰明了。微控制器中的模数转换器用来测量NTC的电压并将其转换成温度值。
    <br>
    <br>
    对于模数转换器使用何种参考电压，Atmega8有两个选项：5V（AVcc）或内部的2.56V。
    在内部，我们不需要象外部那样大的温度范围的传感器。通常来说，+10'C到+40'C就足够了。
    这样我们就可以在测量内部温度时使用2.56V参考电压。
    由于1024个可能的数值仅仅被分配到0到2.56伏的电压区间上，
    我们可以得到非常高的精度－2.5mV的分辨率（比大多数的数字伏特表都高）。

    <br>
    <br>
    RS232的CD针脚是一条输入线，它连接到I2C总线的SDA线上。我们就是用它来从微控制器上读取数据。
    DTR和RTS是输出线。当PC在SDA线上输出数据位时就控制DTR。
    I2C主设备（在这里是linux PC）控制着SCL（时钟）线。
    也就是说时钟线就是一条RS232的输出线。
    <br>
    <br>
    78L05用来提供一个稳定的电源和参考电压。你可以使用任何7.5V到12V之间的交直流电源。
    9V是一个很好的选择。
    <A NAME="365lfindex5">&nbsp;</A>
<H2>制作电路板</H2>


    <table align="right" width="202">
      <tr>
        <td bgcolor="#C5D4F9"><a href=
        "http://shop.tuxgraphics.org"><img src=
        "../../common/images2/article365/article365kit_th.jpg" alt=
        "get this kit from the tuxgraphics shop"></a><br>
        tuxgraphics.org出售所有本文中用到的元器件，并且还有一个腐蚀的很好的电路板。
        </td>
      </tr>
    </table>
    当然你也可以重新使用以前的文章中用到的原始电路板，只需重新将LED连到pin-11上并增加所有的新器件。
    <br>
    <br>
    如果你想要一个好看的电路的话你还是需要一个新的电路板。
    因为电路非常复杂，恰当的腐蚀一个印刷电路板需要费很大的精力。
    读了Iznogood在linuxfocus上关于gEDA的文章之后，我也打算使用gEDA来替代Eagle。
    gEDA的概要绘图工具gschem非常好用。它不像Eagle那样有一个很大的元件符号库，
    而我不得不为Atmega8创建这些符号。但它非常容易使用并且跟Eagle做的一样好。
    稍微有点问题的就是绘制PCB的工具pcb。
    当你刚从Eagle转过来时你首先会发现元器件可能从橡胶带上断开。
    为了确信正确的橡胶带连接到正确的针脚上你必须经常运行
    Connects-&gt;Optimize rats-nest 。你必须首先完成电路图才能制作电路板。
    在这两者间只能手工添加注解。

    <img src=
    "../../common/images2/article365/i2ctemppcb_topview_position_components.png"
     alt="top view, position of components" align="left"> <br>
    <br>
    我使用橙色图层来绘图。不知怎么搞的当打印时其他图层不能生成任何的输出。
    问题是橙色图层实际上是在板子上有元器件的那一面。
    如果你在这一层上增加文字，那么印在电路板上时你必须把它翻过来。
    所以我只用pcb做基本的布局，其他的都用Gimp来做。
    <br>
    <br>
    感谢<a href=
    "http://shop.tuxgraphics.org">shop.tuxgraphics.org</a> ，
    它们出售本文中提到的所有的器件。这样你就可以专注于其中有趣的部分并可以成功的装配电路了。

    <A NAME="365lfindex6">&nbsp;</A>
<H2>把所有器件组合在一起Putting everything together</H2>

    当你装配电路时注意元器件的极性是非常重要的：电解电容器、
    二极管、稳压二极管、78L05、LED和微控制器都是有极性的。

    <br>
    <br>
    在你将微控制器插入插座之前你应该先检验电源部分。
    如果电源工作不正常你不仅得不到正确的读数，而且有可能烧坏微控制器。
    所以先外接一个电源（例如一个9V的电池）用电压表量一下，确信你在微控制器插座的针脚上得到恰好5V的电压。
    下一步就把电路接到你Linux PC的RS232口上，
    使用各种信号组合运行i2c_rs232_pintest程序。
<pre class="code">
i2c_rs232_pintest -d 1 -c 1
i2c_rs232_pintest -d 0 -c 1
i2c_rs232_pintest -d 1 -c 0
</pre>
    该程序用来设置RS232针脚RTS（用作SCL，使用-c选项）和DTR（用作SDA，使用-d选项）的电平值。
    RS232口的电压大约为+/-10V。但在稳压二极管之后你应该只能测到-0.7伏（逻辑0）和+4-5V(逻辑1）。
    <br>
    <br>
    只有通过上述测试之后才能插入微控制器。

    <A NAME="365lfindex7">&nbsp;</A>
<H2>使用I2C进行通信</H2>

    下载（参见参考资料）linuxI2Ctemp.tar.gz文件并解压，I2C通信在下列两个文件中实现：
<pre class="code">
i2c_avr.c -- the i2c statemachine for the atmega8
i2c_m.c   -- the complete i2c protocol on the linux side
</pre>
    我给了atmega8从地址3。你可以使用下面C函数给atmega8发送字符串“hello”：
<pre class="code">
address_slave(3,0); // tell the slave that we will send something
i2c_tx_string("hello");
i2cstop(); // release the i2c bus

on the microcontroller side you would receive this "hello" string with
i2c_get_received_data(rec_buf);
</pre>
    非常简单，从微控制器读数据也与此类似。
    你可以看i2ctemp_avr_main.c中的温度读数是怎么做的。
    <A NAME="365lfindex8">&nbsp;</A>
<H2>温度是多少？</H2>

    编译并从微控制器装载代码，直接在linuxI2Ctemp软件包目录中执行下列命令：
<pre class="code">
make
make load
</pre>
    编译下面两个程序i2c_rs232_pintest和i2ctemp_linux
<pre class="code">
make i2c_rs232_pintest
make i2ctemp_linux
</pre>
    或者你可以直接使用bin子目录中已经编译好的版本。
    <br>
    <br>
    若读取温度，只需要运行：
<pre class="code">
i2ctemp_linux
</pre>
    它会打印出室内和室外的温度。因为I2C总线非常慢，
    如果你想在网站上显示数据我建议不要直接在web服务器上运行i2ctemp_linux。
    你可以在一个cron job中运行它，并将结果写到一个HTML文件中。
    在linuxI2Ctemp包中的README文件包含一个示例脚本。
    <A NAME="365lfindex9">&nbsp;</A>
<H2>结论</H2>

    I2C协议几乎不需要额外的硬件，并且已经为收发少量的数据做了优化。
    如果我们想与自己的微控制器进行通信，那正是我们需要的。真是一个非常漂亮的解决方案。
    <br>
    <br>
    在这篇文章中我主要集中在硬件部分上。如果你喜欢这篇文章我将另写一篇来介绍软件是如何工作的，
    特别是如何来做模数转换和I2C协议是如何实现的。
    下一篇文章我们也可以增加一个液晶显示屏以及华氏度和摄氏度之间的转换。
    <A NAME="365lfindex10">&nbsp;</A>
<H2>参考资料</H2>


    <ul>
      <li>本文<b>下载</b>页: <a href="../../common/src2/article365/index.html">the linuxI2Ctemp software,
      diagrams, software updates</a></li>

      <li>如何使用gcc对atmega8编程: <a href=
      "../November2004/article352.shtml">November2004 article
      352</a></li>

      <li>Datasheet for the Atmega8: go to http://www.atmel.com/
      and select products-&gt;Microcontrollers -&gt;AVR-8 bit
      RISC-&gt;Documentation-&gt;datasheets <a href=
      "../../common/src2/article365/atmega8.pdf">(local copy, pdf,
      2479982 bytes)</a></li>

      <li>The tuxgraphics shop. 一个非常好的在线商店 :-): <a
      href=
      "http://shop.tuxgraphics.org/">shop.tuxgraphics.org</a><br>
      在那里可以买到Linux AVR programming CD、本文中用到的所有元件、
      LCD显示屏和微控制器。
      </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=80: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>对这篇文章发表评论</h2>
每篇文章都有各自的反馈页面。在这个页面里，您可以提交评论，也可以查看其他读者的评论：
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=365">&nbsp;反馈页面&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF 首页</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">主页由LinuxFocus编辑组维护</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Guido     Socher</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>翻译信息:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Guido Socher (<a href="http://linuxfocus.org/~guido/"><font size="1">homepage</font></a>)</font></td></tr>
  <tr><td><font size="2">en --&gt; zh_CN: SEVEN &lt;seven1240/at/163.com&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-02-07, generated by lfparser version 2.51</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
