<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf374, SoftwareDevelopment: Linux &amp; Perl, des outils pour l'&eacute;tude et l'analyse d'informations biologiques</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Carlos Andr&eacute;s     P&eacute;rez
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Linux &amp; Perl, des outils pour l'&eacute;tude et l'analyse d'informations biologiques
 =LF=NUMBER: 374
 =LF=ANAME_: article374.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Carte</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Recherche</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Nouvelles</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Liens</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">A propos</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Ce document est disponible en: <A href="../../English/April2005/article374.shtml">English</a> &nbsp;<A href="../../Castellano/April2005/article374.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/April2005/article374.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/April2005/article374.shtml">Deutsch</a> &nbsp;<A href="../../Francais/April2005/article374.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/CarlosAndresPerez.jpg" alt="La Foto">
<BR>par  Carlos Andr&eacute;s P&eacute;rez <br> <small>&lt;caperez /at/ usc.edu.co&gt;</small>
<BR><BR>
<I>L&acute;auteur:</I><BR>
<!-- aboutauthor_start -->
<p>Carlos Andr&eacute;s P&eacute;res est sp&eacute;cialiste en Simulation
    Mol&eacute;culaire et candidat au doctorat en Biotechnologie. Conseiller
    technique du Grupo de Investigaci&oacute;n en Educaci&oacute;n Virtual
    (GIEV) - Groupe de Recherche en Apprentissage Virtuel. Adresse :
    Universidad Santiago de Cali, Calle 5&ordf; carrera 62 Campus Pampalinda,
    Cali &ndash; Colombia.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO fr -->
<BR><BR><I>Traduit en Français par:</I><BR>
Jean-EtiennePoirrier (<a href="http://www.poirrier.be"><font size="1">homepage</font></a>)
<br>
<!--
 =LF=TRANSTO=fr: Jean-EtiennePoirrier
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Sommaire</i>:
<UL>
  <LI><A HREF="#374lfindex0">Bioinformatique</A></LI>
  <LI><A HREF="#374lfindex1">Perl</A></LI>
  <LI><A HREF="#374lfindex2">La gestion de fichiers en Perl :</A></LI>
  <LI><A HREF="#374lfindex3">Recherche de motifs d'aminoacides</A></LI>
  <LI><A HREF="#374lfindex4">Calcul des fr&eacute;quences d'acides amin&eacute;s :</A></LI>
  <LI><A HREF="#374lfindex5">R&eacute;f&eacute;rences bibliographiques</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_04-0374.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>Linux &amp; Perl, des outils pour l'&eacute;tude et l'analyse d'informations biologiques</H2>
 <img src="../../common/images2/article374.jpg" alt="[Illustration]"
    hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>R&eacute;sum&eacute;</i>:
<P>
<!-- articleabstract_start -->

    Cet article veut montrer quelques uns des avantages de la programmation
    Perl sous Unix pour l'extraction d'information dans les bases de donn&eacute;es
    de s&eacute;quences d'ADN, ARN et de prot&eacute;ines. Elles peuvent &ecirc;tre utilis&eacute;es dans
    les processus comparatifs ou l'analyse. Le projet G&eacute;nome Humain et les
    techniques de clonage d'ADN ont acc&eacute;l&eacute;r&eacute; le progr&egrave;s scientifique dans ce
    domaine. Les informations g&eacute;n&eacute;r&eacute;es quotidiennement d&eacute;passent souvent la
    capacit&eacute; de traitement de cette information d'un point de vue &eacute;volutif.
    <br><br>
    La prolif&eacute;ration rapide de l'information biologique sur diff&eacute;rents
    g&eacute;nomes (l'ensemble des g&egrave;nes d'un organisme) conduit la bioinformatique
    &agrave; &ecirc;tre une discipline fondamentale pour la manipulation et l'analyse de
    ces donn&eacute;es.

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="374lfindex0">&nbsp;</A>
<H2>Bioinformatique</H2>


    <p>La bioinformatique est n&eacute;e lorsque les scientifiques ont commenc&eacute; &agrave;
    stocker les s&eacute;quences biologiques dans un format num&eacute;rique et les premiers
    programmes pour les comparer ont suivi. Pendant un bon moment, la
    bioinformatique a &eacute;t&eacute; limit&eacute;e &agrave; l'analyse de s&eacute;quences. N&eacute;anmoins,
    l'importance de l'&eacute;tablissement de la forme structurelle des mol&eacute;cules a
    transform&eacute; les ordinateurs en un outil important pour la recherche en
    biochimie th&eacute;orique. Chaque jour, il y a plus d'informations et plus de
    collections de donn&eacute;es sur la conformation tridimensionnelle des
    mol&eacute;cules. Les g&egrave;nes ont chang&eacute; : &eacute;tudi&eacute;s de mani&egrave;re individuelle au d&eacute;but,
    ils sont maintenant &eacute;tudi&eacute;s ensemble (ou une partie non n&eacute;gligeables
    d'entre eux). Il est maintenant plus facile de comprendre comment ils se
    comportent entre eux, avec les prot&eacute;ines et comment ils s'organisent dans
    les voies m&eacute;taboliques. &Agrave; chaque fois, nous devenons plus conscients de
    l'importance d'organiser les donn&eacute;es.</p>

    <p>Chacune des activit&eacute;s d&eacute;crites a au-moins deux faces pour
    lesquelles ils sont int&eacute;ressants. D'un c&ocirc;t&eacute;, l'int&eacute;r&ecirc;t biologique est
    de conna&icirc;tre les relations entre les mol&eacute;cules de la vie ; et de l'autre
    c&ocirc;t&eacute;, l'assemblage devient un probl&egrave;me de conception de logiciel
    int&eacute;ressant &agrave; r&eacute;soudre. La n&eacute;cessit&eacute; est de combiner et d'int&eacute;grer
    l'information biologique pour obtenir une vision globale et effective des
    processus biologiques sous-jacents. Nous avons &eacute;galement remarqu&eacute; la
    n&eacute;cessit&eacute; de combiner diff&eacute;rentes branches de l'informatique pour
    arriver &agrave; une solution effective. Par exemple, la gestion de bases de
    donn&eacute;es, l'int&eacute;gration des donn&eacute;es, des algorithmes efficaces, du
    mat&eacute;riel puissant - grilles, multi-processeurs, etc.</p>

    <A NAME="374lfindex1">&nbsp;</A>
<H2>Perl</H2>


    <p><strong>Larry Wall</strong> a commenc&eacute; le d&eacute;veloppement de Perl en
    1986. Perl est un langage de programmation interpr&ecirc;t&eacute;, id&eacute;al pour
    manipuler des textes, fichiers et processus. Perl permet le d&eacute;veloppement
    rapide de petits programmes. On peut dire que Perl est un m&eacute;lange
    optimis&eacute; de langage de haut niveau (par exemple, C) et de langage de
    script (par exemple, Bash).<br>
    <br>
    Les programmes Perl peuvent tourner sous diff&eacute;rents syst&egrave;mes
    d'exploitation/plates-formes. Cependant, Perl est n&eacute; et
    s'est r&eacute;pandu sur les syst&egrave;mes d'exploitation UNIX. Perl a
    compl&egrave;tement d&eacute;pass&eacute; sa port&eacute;e initiale, gr&acirc;ce &agrave; l'impulsion qu'il a
    re&ccedil;u de son utilisation imm&eacute;diate comme langage pour applications web.
    Avant que Perl ne soit utilis&eacute;, <strong>awk</strong>,
    <strong>thirst</strong> et <strong>grep</strong> &eacute;taient les outils
    d'analyse de fichier et d'extraction de l'information.</p>

    <p>Perl a r&eacute;uni les possibilit&eacute;s de ces outils UNIX dans un seul
    programme &eacute;tendant et modernisant chacun d'entre eux avec plus de
    fonctionnalit&eacute;s.</p>

    <p>Perl est un langage de programmation libre et il est peut &ecirc;tre
    ex&eacute;cut&eacute; sur tout syst&egrave;me d'exploitation qui est g&eacute;n&eacute;ralement pr&eacute;sent
    dans les laboratoires de recherche biologique. Sous UNIX et MacOSX, il
    est d&eacute;j&agrave; pr&eacute;compil&eacute;, sur d'autres syst&egrave;mes, il est n&eacute;cessaire
    d'installer Perl. Il suffit de l'obtenir du site : <a
    href="http://www.cpan.org/">http://www.cpan.org</a> pour le syst&egrave;me
    que nous utilisons.</p>

    <p>Les programmes en Perl sous Linux sont appel&eacute; par le nom du fichier
    qui contient les instructions pour l'ex&eacute;cuter. Les instructions sont
    plac&eacute;es dans un fichier et Perl est &eacute;voqu&eacute; avec le nom de ce fichier
    comme argument.</p>

    <p>Une autre m&eacute;thode fr&eacute;quente est de placer les instructions Perl
    dans un fichier mais sans invoquer Perl avec le fichier en argument.
    Pour cela, nous devons r&eacute;aliser 2 choses : (a) mettre un commentaire
    sp&eacute;cial &agrave; la premi&egrave;re ligne du programme :</p>

    <pre class="code">
    #!/usr/bin/env perl<br>
    print "Hi\n";
    </pre>

    <p>et (b) stocker le fichier et lui assigner les propri&eacute;t&eacute;s UNIX
    d'ex&eacute;cution :</p>

    <pre class="code">
    % chmod +x greetings.pl
    </pre>

    <p>Une fois cela fait, le fichier/programme peut &ecirc;tre utilis&eacute;
    simplement en l'appelant par le nom de fichier</p>

    <A NAME="374lfindex2">&nbsp;</A>
<H2>La gestion de fichiers en Perl :</H2>


    <p>Lorsque nous avons une base de donn&eacute;es de s&eacute;quences mol&eacute;culaires au
    format texte, nous pouvons faire de Perl un outil de recherche de
    s&eacute;quence. Dans cet exemple, nous voyons comment rechercher une
    s&eacute;quence prot&eacute;ique dans une base de donn&eacute;es au format SWISS-PROT
    (db_human_swissprot), en utilisant son code id.</p>

<pre class="code">
#!/usr/bin/perl
# Recherche de s&eacute;quence d'acide amin&eacute; dans une base de donn&eacute;es
# au format SWISS-PROT avec un code id donn&eacute;e
# Demander le code dans le champ ID
# et il l'assigne de l'entr&eacute;e standard (STDIN) &agrave; une variable
print "Entrez l"ID &agrave; rechercher : ";
$id_query=&lt;STDIN&gt;;
chomp $id_query;
# Nous ouvrons le fichier de base de donn&eacute;es
# mais si ce n'est pas possible, le programme se termine
open (db, "human_kinases_swissprot.txt") ||
 die "probl&egrave;me &agrave; l'ouverture du fichier human_kinases_swissprot.txt\n";
# Regarder chaque ligne dans la base de donn&eacute;es
while (&lt;db&gt;) {
chomp $_;
# V&eacute;rifier si nous sommes dans le champ ID
if ($_ =~ /^ID/) {
# Si c'est possible, nous r&eacute;coltons l'information
# en coupant la ligne aux espaces
($a1,$id_db) = split (/\s+/,$_);
# mais s'il n'y a pas de concordance d'ID, nous continuons ...
next if ($id_db ne $id_query);
# Lorsqu'ils concordent, nous pla&ccedil;ons un marqueur
$signal_good=1;
# Ensuite, nous v&eacute;rifions le champ de s&eacute;quence
# et si le marqueur est 1 (s&eacute;quence choisie),
# Si c'est positif, nous changeons le marqueur &agrave; 2, pour collecter la
# s&eacute;quence
} elsif (($_ =~ /^SQ/) &amp;&amp; ($signal_good==1)) {
$signal_good=2;
# Finalement, si le marqueur est 2, nous pr&eacute;sentons chaque ligne
# de la s&eacute;quence, jusqu'&agrave; ce que la ligne commence par //
# si c'est le cas, nous cassons le while
} elsif ($signal_good == 2) {
last if ($_ =~ /^\/\//);
print &quot;$_\n&quot;;
}
}
# Lorsque nous quittons l'instruction while, nous v&eacute;rifions le marqueur
# s'il est n&eacute;gatif, cela signifie que nous ne trouvons pas la s&eacute;quence
# choisie, ce qui nous donnera une erreur
if (!$signal_good) {
print &quot;ERROR: &quot;.&quot;Sequence not found\n&quot;;
}
# Finalement, nous fermons le fichier qui est toujours ouvert
close (db);
exit;
</pre>
    <br>

    <A NAME="374lfindex3">&nbsp;</A>
<H2>Recherche de motifs d'aminoacides</H2>

<pre class="code">
#!/usr/bin/perl
# Recherche de motifs d'aminoacides
# Demande &agrave; l'utilisateur les motifs &agrave; chercher
print "SVP introduisez le motif &agrave; chercher dans query.seq : ";
$patron = &lt;STDIN&gt;;
chomp $patron;
# Ouvre le fichier de base de donn&eacute;es
# mais s'il ne peut pas, le programme se termine
open (query, "query_seq.txt")
 || die "probl&egrave;me &agrave; l'ouverture du fichier query_seq.txt\n";
# Recherche la s&eacute;quence SWISS-PROT ligne par ligne
while (&lt;query&gt;) {
chomp $_;
# Lorsqu'arrive au champ SQ, placer le marqueur &agrave; 1
   if ($_ =~ /^SQ/) {
         $signal_seq = 1;
# Lorsqu'arrive la fin de la s&eacute;quence, laisser la courbure
# V&eacute;rifier que cette expression est plac&eacute;e avant la v&eacute;rification
# le marqueur = 1, parce que cette ligne n'appartient pas &agrave; la s&eacute;quence
# d'acides amin&eacute;s
   } elsif ($_ =~ /^\/\//) {
         last;
# V&eacute;rifie si le marqueur est &eacute;gale &agrave; 1 ; s'il est positif,
# &eacute;limine les espaces blancs dans la ligne de la s&eacute;quence
# et joint chaque ligne dans une nouvelle variable
# Pour la concat&eacute;nation, nous pouvons aussi &eacute;crire :
# $secuencia_total.=$_;
   } elsif ($signal_seq == 1) {
         $_ =~ s/ //g;
         $secuencia_total=$secuencia_total.$_;
   }
  }
# Maintenant, v&eacute;rifier la s&eacute;quence collect&eacute;e dans son enti&egrave;ret&eacute;
# pour le motif donn&eacute;
  if ($secuencia_total =~ /$patron/) {
   print &quot;La s&eacute;quence query.seq contient le motif $patron\n&quot;;
  } else {
   print &quot;La s&eacute;quence query.seq ne contient pas le motif $patron\n&quot;;
  }
# Finalement, nous fermons le fichier
# et quittons le programme
close (query);
exit;
</pre>

    <p>Si nous voulons conna&icirc;tre la position exacte o&ugrave; il a trouv&eacute; le
    motif, nous devons utiliser une variable sp&eacute;ciale `$&amp;'. Cette
    variable garde le motif trouv&eacute; apr&egrave;s avoir &eacute;valu&eacute; une expression
    r&eacute;guli&egrave;re (il faudra la mettre juste apr&egrave;s la ligne <strong>if
    ($$secuencia_total&gt;= ~/$$patron&gt;/) {</strong>`. En plus, il est
    possible de combiner les variables ` $`&nbsp;' et ` $ &acute; ' qui
    stockent tout &agrave; gauche et &agrave; droite du motif trouv&eacute;. Modifions le
    programme pr&eacute;c&eacute;dent avec ces nouvelles variables pour donner la position
    exacte du motif. Note : vous pouvez aussi trouver int&eacute;ressante la
    fonction <strong>length</strong> qui donne la longueur de la cha&icirc;ne.</p>

    <p>&nbsp;</p>
<pre class="code">
# Nous devons seulement changer le if o&ugrave; le motif a &eacute;t&eacute; trouv&eacute;
# Maintenant, v&eacute;rifier la s&eacute;quence collect&eacute;e dans son enti&egrave;ret&eacute;,
# pour le motif donn&eacute;
# et v&eacute;rifier sa position dans la s&eacute;quence
  if ($secuencia_total =~ /$patron/) {
   $posicion=length($`)+1;
   print &quot;La s&eacute;quence query_seq.txt contient le motif $patron &agrave; la position suivante $posicion\n&quot;;
  } else {
  print &quot;La s&eacute;quence query_seq.txt ne contient pas le motif $patron\n&quot;;
  }
</pre>

    <A NAME="374lfindex4">&nbsp;</A>
<H2>Calcul des fr&eacute;quences d'acides amin&eacute;s :</H2>


    <p>La fr&eacute;quence des diff&eacute;rents acides amin&eacute;s dans les prot&eacute;ines est
    variable. Cela r&eacute;sulte de ses diff&eacute;rentes fonctions ou environnements
    favoris. Donc, dans cet exemple, nous allons voir comment calculer la
    fr&eacute;quence en acides amin&eacute;s d'une s&eacute;quence donn&eacute;e d'acide amin&eacute;.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# Calcule la fr&eacute;quence d'un acide amin&eacute; dans une s&eacute;quence prot&eacute;ique
# R&eacute;cup&egrave;re le nom de fichier de la ligne de commande
# (format&eacute; selon SWISS-PROT)
# Peut aussi &ecirc;tre demand&eacute; avec print de &lt;STDIN&gt;
if (!$ARGV[0]) {print &quot;La commande devrait &ecirc;tre : program.pl fichier_swissprot\n&quot;;}
$fichero = $ARGV[0];
# Initialise la variable $errores
my $errores=0;
# Ouvre le fichier en lecture
open (FICHA, "$fichero") || die "probl&egrave;me lors de l'ouverture du fichier $fichero\n";
# D'abord, nous v&eacute;rifions la s&eacute;quence comme nous l'avons fait dans l'exemple 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
   last if ($_ =~ /^\/\//);
   $_ =~ s/\s//g;
   $secuencia.=$_;
}
}
close (FICHA);
# Maintenant, utilisons une courbure qui v&eacute;rifie chaque position de l'acide
# amin&eacute; dans la s&eacute;quence (&agrave; partir d'une fonction propre qui peut &ecirc;tre
# utilis&eacute;e par apr&egrave;s par d'autres programmes)
comprueba_aa ($secuencia);
# Affiche le r&eacute;sultat &agrave; l'&eacute;cran
# D'abord les 20 acides amin&eacute;s et ensuite les chaines avec leurs fr&eacute;quences
# Dans ce cas, 'sort' ne peut pas &ecirc;tre utilis&eacute;e dans le foreach,
# parce que la chaine contient des fr&eacute;quences (nombres)
print&quot;A\tC\tD\tE\tF\tG\tH\tI\tK\tL\tM\tN\tP\tQ\tR\tS\tT\tV\tW\tY\n&quot;;
foreach $each_aa (@aa) {
print &quot;$each_aa\t&quot;;
}
# Ensuite, on donne les erreurs possibles
# et termine le programme
print "\nerreurs = $errores\n";
exit;
# Fonctions
# Cette fonction calcule la fr&eacute;quence de chaque acide amin&eacute;
# d'une s&eacute;quence prot&eacute;ique
sub comprueba_aa {
# Acqu&eacute;rir la s&eacute;quence
my ($secuencia)=@_;
# et tourner, acide amin&eacute; par acide amin&eacute;, en utilisant un for allant
# de 0 jusqu'&agrave; la longueur de la s&eacute;quence
for ($posicion=0 ; $posicion&lt;length $secuencia ; $posicion++ ) {
# Acqu&eacute;rir les acides amin&eacute;s
$aa = substr($secuencia, $posicion, 1);
# et v&eacute;rifier lequel utilise if
# and checks which one is using if
# lorsqu'il est coch&eacute;, il ajoute 1 &agrave; la fr&eacute;quence correspondante
# dans une cha&icirc;ne utilisant un pointeur pour chacun d'eux
# class&eacute;s par ordre alphab&eacute;tique
if ( $aa eq 'A' ) {
$aa[0]++;
} elsif ( $aa eq 'C' ) {
$aa[1]++;
} elsif ( $aa eq 'D' ) {
$aa[2]++;
} elsif ( $aa eq 'E' ) {
$aa[3]++;
} elsif ( $aa eq 'F' ) {
$aa[4]++;
} elsif ( $aa eq 'G' ) {
$aa[5]++;
} elsif ( $aa eq 'H' ) {
$aa[6]++;
} elsif ( $aa eq 'I' ) {
$aa[7]++;
} elsif ( $aa eq 'K' ) {
$aa[8]++;
} elsif ( $aa eq 'L' ) {
$aa[9]++;
} elsif ( $aa eq 'M' ) {
$aa[10]++;
} elsif ( $aa eq 'N' ) {
$aa[11]++;
} elsif ( $aa eq 'P' ) {
$aa[12]++;
} elsif ( $aa eq 'Q' ) {
$aa[13]++;
} elsif ( $aa eq 'R' ) {
$aa[14]++;
} elsif ( $aa eq 'S' ) {
$aa[15]++;
} elsif ( $aa eq 'T' ) {
$aa[16]++;
} elsif ( $aa eq 'V' ) {
$aa[17]++;
} elsif ( $aa eq 'W' ) {
$aa[18]++;
} elsif ( $aa eq 'Y' ) {
$aa[19]++;
# Si l'acide amin&eacute; n'est pas trouv&eacute;,
# il ajoute 1 aux erreurs
} else {
print "ERREUR: Acide amin&eacute; non trouv&eacute; : $aa\n";
$errores++;
}
}
# Finalement, retourne la cha&icirc;ne de fr&eacute;quences
return @aa;
}
</pre>

    <p>Maintenant, nous allons effectuer les &eacute;tapes suivantes qui suivent
    le flux d'information dans une cellule apr&egrave;s la transcription. Une de
    ces &eacute;tapes est la traduction, par laquelle une s&eacute;quence d'ARN
    provenant du g&egrave;ne (qui y &eacute;tait sous forme d'ADN) se transforme en
    prot&eacute;ines ou s&eacute;quences d'acides amin&eacute;s. Pour cela, nous devons
    utiliser le code g&eacute;n&eacute;tique qui est bas&eacute; sur des triplets d'ARN/ADN
    correspondants &agrave; un acide amin&eacute;. La s&eacute;quence que nous allons extraire
    est une portion d'un g&egrave;ne d'<em>Escherichia coli</em> au format EMBL
    et nous allons bient&ocirc;t v&eacute;rifier la traduction avec l'acide amin&eacute; r&eacute;el.
    Pour cet exemple, il sera n&eacute;cessaire d'introduire les variables
    associatives de cha&icirc;nes ou tables de hachage (<em>tables hash</em>).
    Dans le programme, nous devrions consid&eacute;rer que seule la r&eacute;gion
    codificarte est n&eacute;cessaire, r&eacute;gion incluse dans le champ 'FT CDS
    field.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# Traduit une s&eacute;quence d'ADN &agrave; partir d'une fiche EMBL
# vers l'acide amin&eacute; correspondant
# Il prend le nom du fichier dans la ligne de commande
# (fichier au format SWISS-PROT)
# Il peut &eacute;galement &ecirc;tre demand&eacute; avec print &agrave; partir de &lt;STDIN&gt;
if (!$ARGV[0])
   {print "La ligne de commande devrait &ecirc;tre : program.pl fiche_embl\n";}
$fichero = $ARGV[0];
# Ouvre le fichier en lecture
open (FICHA, "$fichero") ||
   die "probl&egrave;me &agrave; l'ouverture du fichier $fichero\n";
# D'abord, nous v&eacute;rifions la s&eacute;quence comme nous l'avons fait dans
# l'exemple 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^FT CDS/) {
$_ =~ tr/../ /;
($a1,$a2,$a3,$a4) = split (" ",$_);
}
elsif ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
last if ($_ =~ /^\/\//);
# Elimine les nombres et espaces
$_ =~ tr/0-9/ /;
$_ =~ s/\s//g;
$secuencia.=$_;
}
}
close (FICHA);
# Maintenant, nous d&eacute;finissons un tableau associatif avec la
# correspondance entre chaque acide amin&eacute; et leurs nucl&eacute;otides
# correspondant (c'est aussi dans une fonction propre, au cas o&ugrave; le m&ecirc;me
# code g&eacute;n&eacute;tique serait utilis&eacute; dans d'autres programmes
my(%codigo_genetico) = (
'TCA' =&gt; 'S',# S&eacute;rine
'TCC' =&gt; 'S',# S&eacute;rine
'TCG' =&gt; 'S',# S&eacute;rine
'TCT' =&gt; 'S',# S&eacute;rine
'TTC' =&gt; 'F',# Ph&eacute;nilalanine
'TTT' =&gt; 'F',# Ph&eacute;nilalanine
'TTA' =&gt; 'L',# Leucine
'TTG' =&gt; 'L',# Leucine
'TAC' =&gt; 'Y',# Tirosine
'TAT' =&gt; 'Y',# Tirosine
'TAA' =&gt; '*',# Stop
'TAG' =&gt; '*',# Stop
'TGC' =&gt; 'C',# Cyst&eacute;ine
'TGT' =&gt; 'C',# Cyst&eacute;ine
'TGA' =&gt; '*',# Stop
'TGG' =&gt; 'W',# Tryptophane
'CTA' =&gt; 'L',# Leucine
'CTC' =&gt; 'L',# Leucine
'CTG' =&gt; 'L',# Leucine
'CTT' =&gt; 'L',# Leucine
'CCA' =&gt; 'P',# Proline
'CCC' =&gt; 'P',# Proline
'CCG' =&gt; 'P',# Proline
'CCT' =&gt; 'P',# Proline
'CAC' =&gt; 'H',# Hystidine
'CAT' =&gt; 'H',# Hystidine
'CAA' =&gt; 'Q',# Glutamine
'CAG' =&gt; 'Q',# Glutamine
'CGA' =&gt; 'R',# Arginine
'CGC' =&gt; 'R',# Arginine
'CGG' =&gt; 'R',# Arginine
'CGT' =&gt; 'R',# Arginine
'ATA' =&gt; 'I',# IsoLeucine
'ATC' =&gt; 'I',# IsoLeucine
'ATT' =&gt; 'I',# IsoLeucine
'ATG' =&gt; 'M',# Methionine
'ACA' =&gt; 'T',# Tr&eacute;onine
'ACC' =&gt; 'T',# Tr&eacute;onine
'ACG' =&gt; 'T',# Tr&eacute;onine
'ACT' =&gt; 'T',# Tr&eacute;onine
'AAC' =&gt; 'N',# Asparagine
'AAT' =&gt; 'N',# Asparagine
'AAA' =&gt; 'K',# Lisine
'AAG' =&gt; 'K',# Lisine
'AGC' =&gt; 'S',# S&eacute;rine
'AGT' =&gt; 'S',# S&eacute;rine
'AGA' =&gt; 'R',# Arginine
'AGG' =&gt; 'R',# Arginine
'GTA' =&gt; 'V',# Valine
'GTC' =&gt; 'V',# Valine
'GTG' =&gt; 'V',# Valine
'GTT' =&gt; 'V',# Valine
'GCA' =&gt; 'A',# Alanine
'GCC' =&gt; 'A',# Alanine
'GCG' =&gt; 'A',# Alanine
'GCT' =&gt; 'A',# Alanine
'GAC' =&gt; 'D',# Acide Aspartique
'GAT' =&gt; 'D',# Acide Aspartique
'GAA' =&gt; 'E',# Acide Glutamique
'GAG' =&gt; 'E',# Acide Glutamique
'GGA' =&gt; 'G',# Glycine
'GGC' =&gt; 'G',# Glycine
'GGG' =&gt; 'G',# Glycine
'GGT' =&gt; 'G',# Glycine
);
# Traduire chaque codon en son acide amin&eacute; correspondant
# et l'aggr&egrave;ge dans la s&eacute;quence prot&eacute;ique
print $a3;
for($i=$a3 - 1; $i &lt; $a4 - 3 ; $i += 3) {
$codon = substr($secuencia,$i,3);
# Transforme le codon de minuscule (format EMBL) en majuscule
$codon =~ tr/a-z/A-Z/;
$protein.= codon2aa($codon);
}
print "Cette s&eacute;quence prot&eacute;ique du g&egrave;ne : \n$secuencia\n est la suivante :\n$protein\n\n";
exit;
</pre>

    <A NAME="374lfindex5">&nbsp;</A>
<H2>R&eacute;f&eacute;rences bibliographiques</H2>


    <ul>
      <li><a href="http://bioperl.org/">http://bioperl.org/</a></li>
      <li><a href=
      "http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html">
      http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html</a></li>
      <li>
        <a href=
        "http://www.unix.org.ua/orelly/perl/prog3/">http://www.unix.org.ua/orelly/perl/prog3/</a></li>
      <li><strong>Fichiers d'exemples :</strong><br>
      - <a href=
      "../../common/src2/article374/human_kinases_swissprot.txt">human_kinases_swissprot.txt</a><br>
      - <a href=
      "../../common/src2/article374/query_seq.txt">query_seq.txt</a><br>
      - <a href=
      "../../common/src2/article374/ecoli_embl.txt">ecoli_embl.txt</a></li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=74: -->
  


<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Sommaire</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Sommaire de ce num&eacute;ro</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Site Web maintenu par l&acute;&eacute;quipe d&acute;&eacute;dition LinuxFocus</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Carlos Andr&eacute;s     P&eacute;rez</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">es --&gt; -- : Carlos Andr&eacute;s P&eacute;rez <small>&lt;caperez /at/ usc.edu.co&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Carlos Andr&eacute;s P&eacute;rez &lt;caperez /at/ usc.edu.co&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; fr: Jean-EtiennePoirrier (<a href="http://www.poirrier.be"><font size="1">homepage</font></a>)</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-05-02, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
