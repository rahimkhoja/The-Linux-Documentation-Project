LDP DocBook Committee 						-*- outline -*-
Kendall G. Clark, kclark@ntlug.org				
1999-12-4
$Id: $

(Emacsen will display this document in outline mode. Say c-h m for
instructions on how to move through it by sections (e.g., c-c c-n, c-c
c-p).)

* Agenda for DocBook Committee
  ----------------------------

Following the SGML separation of content from presentation, this
committee should focus on content issues that LDP author's face when
they want to create new content. This involves what they can expect
with regard to processing their document into presentation formats, but
we would be wise to avoid discussing presentation issues here.

The first, primary deliverable of this committee should be the
creation of a comprehensive LDP Author's Guide, a document composed in
DocBook that covers all the issues related to LDP author's creating
new content. I propose we call this document the "Linux Documentation
Project Author's Guide."

I want to propose the following as the start of our work here: a working
outline for the Author's Guide. In putting this outline together, I've had
to presuppose some answers to substantive questions necessarily; this
doesn't mean that I think these issues should be decided unilaterally. In
other words, everything here is negotiable, and needs to be a matter of
consensus (or indifference!) of this committee.

Since many of these areas of discussion lead into issues that are not
really of interest to most LDP authors, each section will likely have
links to other places where more in-depth discussion is available.

* Working Outline for LDP Author's Guide
  --------------------------------------

* Author's Introduction to the LDP

* Short Introduction to SGML

** Terminology

** Why is the LDP using SGML?

*** structured data can be programatically-driven
*** information interchange
*** long-term storage
*** content and presentation consistency
*** non-proprietary technology

** Why DocBook?

* LDP Style Guide

** Official Reference Works
** Standard Usage
** Other sources

* SGML Software

* Document Engineering

** DocBook -- An Overview

*** Versions

*** Future Issues

**** LDP extensions

** I18n issues

(Note: I think we can look at ad(o|a)pting FreeBSD's work here. It
seems sound and is tested.)

** How to start using DocBook

*** Prolog
*** Public Identifiers
*** System Identifiers
*** Catalogs

** Mapping DocBook types to LDP genres

** Document Reuse

*** Using Hub Files

** Naming Conventions

*** file
*** titles
*** entities
*** ID attributes
*** graphics

** The LDP DocBook Subset

*** by convention

*** not by customizing the DTD

** Using Entities

*** Why use entities?

**** consistency, consistency, consistency!
**** making global changes locally
**** "data encapsulation"

*** Entity Namespaces:

**** per author
**** per document
**** LDP-wide

** Using marked sections:

*** INCLUDE
*** IGNORE
*** CDATA

** Common and Role Attribute Usage

** Some Common Elements

*** Bold, italics, etc.
*** Tables
*** Lists
*** Links
*** Cross References
*** Indexing
*** Literal Layout
*** Address
*** Examples
*** File, path, and directory names

** Metadata

*** What's important
*** Supporting LDP Core Metadata 
*** Auto-extraction

** Normalization

* Using Graphics

** For WWW

** For Print

* The Importance of Being Valid

** What are the benefits of validation?

** How do I do it?

*** Troubleshooting
*** nsgmls error codes
*** pernicious mixed content

** Is it required?

* Rendering Expectations

** WWW

** Print

** DSSSL Customization Drivers

* Submitting LDP Content

** CVS
** Email

* Maintaining your LDP content

** A makefile for managing LDP content
** ...
