<!-- Linux Kernel HOWTO, sources SGML                  -- >
<!-- Traduction : Eric DUMAS (dumas@freenix.fr) jusqu'à la version 0.80
                  Christophe DELEUZE (christophe.deleuze@lip6.fr) à partir
		  de la version 1.0 -- >

<!doctype linuxdoc system>

<article>

<title>Le HOWTO du noyau Linux (Kernel HOWTO)
<author>par Brian Ward, <tt>ward@blah.tu-graz.ac.at</tt> 

<date>Version 1.0, 5 juin 1999

<abstract>
(5 juillet 1999. Adaptation française par Eric Dumas
<tt>dumas@freenix.fr</tt> jusqu'à la version 0.80, Christophe Deleuze
<tt>christophe.deleuze@lip6.fr</tt> à partir de la version 1.0).

Il s'agit d'un guide détaillé sur la configuration du noyau, sa compilation
et ses mises à jour pour les plates-formes x86.
</abstract>

<toc>


<sect>Introduction<p>

 Faut-il que vous lisiez ce document ? Oui, si vous avez les 
symptômes suivants :

<itemize>
<item> <sq>Arg ! Cette archive TrucBidule-46.5.6 nécessite la version du
noyau 2.8.193 et je n'ai que la version 1.0.9 ! </sq>
<item> Il y a un pilote de périphérique dont vous avez besoin 
dans l'un des nouveaux noyaux.
<item> Vous n'avez aucune idée de la manière dont il faut s'y prendre 
pour recompiler le noyau.
<item> <sq>Est-ce que ce truc dans le fichier <it>README</it> décrit toute 
la marche à suivre ?</sq>
<item> Vous avez essayé, ça ne marche pas !
<item> Vous devez donner un conseil à une personne qui a certains
problèmes.
</itemize>

<sect1> Lisez ceci en premier (enfin bon, c'est un conseil) !<p>

Certains exemples présentés dans ce document présupposent que vous possédez
les programmes GNU <tt>tar</tt>, <tt>find</tt> et <tt>xargs</tt>.  Ils sont
assez standards, et ne devraient pas vous poser trop de problèmes.  On
suppose également que vous connaissez la structure de votre disque
(partitions). Si vous ne le savez pas, il est impératif que vous gardiez une
copie sur papier du résultat de l'exécution de la commande <tt>mount</tt>
(ou bien une copie du fichier <tt>/etc/fstab</tt>, si vous savez le lire).
Cette information est importante, et ne change pas à moins que vous ne
repartitionniez votre disque, en ajoutiez un nouveau, réinstalliez votre
système, ou quelque chose de similaire.

La dernière version stable du noyau au moment où j'écris ces mots est la
2.2.9, ce qui signifie que les références et les exemples donnés
correspondent à cette version. Même si j'ai essayé de faire en sorte que ce
document soit aussi indépendant que possible des versions, le noyau est en
perpétuel développement, donc si vous récupérez une nouvelle version, il
risque d'y avoir quelques différences. Cela ne devrait pas poser trop de
problèmes mais risque de semer un peu la confusion.

Il existe deux versions des sources du noyau : une version dite
<sq>stable</sq> et une version de développement. Les version stables ont des
numéros de version pairs : 1.2.x, 2.0.x sont des versions stables... tout
comme la 2.2.x. Ces noyaux sont considérés comme étant les plus stables et
sans erreurs. Les noyaux de développement (1.3.x, 2.1.x, etc) sont des
noyaux de test, pour les développeurs, les testeurs... mais ces noyaux
peuvent être très bogués. Vous êtes prévenus.

<sect1>Un mot sur le style<p>

<tt>Un texte qui ressemble à celui-ci</tt> est soit un message qui apparaît
sur votre écran, soit un fichier, soit quelque chose qui peut être
directement saisi, comme une commande ou des options pour une commande (si
vous possédez une version texte de ce document, il n'y a pas de différence).


<sect>Quelques questions... avec leurs réponses<p>

<sect1>Mais quel est le rôle du noyau ?<p>

Le noyau Unix joue le rôle d'intermédiaire entre vos programmes et
votre matériel.  Premièrement, il gère la mémoire pour tous les programmes
en cours d'exécution (processus), et s'assure qu'ils occupent tous une part
équitable (ou non) du temps processeur.  En plus, il fournit une interface
(simple à utiliser) aux programmes pour communiquer avec votre matériel
(appels système).

Bien sûr c'est un petit peu plus compliqué que ça, mais ces fonctions de
bases sont les plus importantes à connaître.

<sect1>Pourquoi voudrais-je mettre à jour mon noyau ?<p>

Les nouveaux noyaux offrent plus de facilité pour communiquer avec plus de
matériels (c'est-à-dire qu'ils gèrent plus de périphériques...), ils peuvent
avoir une meilleure gestion des processus, tourner plus rapidement que les
anciennes versions, être plus stables et ils corrigent les erreurs stupides
des versions précédentes.  Beaucoup de gens mettent à jour leurs noyaux car
ils veulent avoir les nouveaux pilotes de périphériques et les corrections
d'erreurs.

<sect1>Quel genre de matériel supportent les nouveaux noyaux ? <p>

Jetez un coup d'oeil sur le Hardware-HOWTO. Vous pouvez aussi regarder le
fichier <sq><tt>config.in</tt></sq> dans les sources de <bf>Linux</bf>, ou
juste essayer <sq><tt>make config</tt></sq>, ce qui vous permet de voir tous
les matériels supportés par le noyau standard, mais pas tout ce que
<bf>Linux</bf> supporte. En effet, beaucoup de périphériques assez utiles
(tels les périphériques PCMCIA, et quelques lecteurs de cartouches) sont des
modules chargeables maintenus et distribués séparément.

<sect1>Quelle version de gcc ou de libc utiliser ? <p>

Linus recommande une version de gcc dans le fichier <tt>README</tt> fourni
avec le code source.  Si vous ne possédez pas cette version, la
documentation dans la version recommandée de gcc devrait vous indiquer si
vous avez besoin de mettre à jour votre libc.  Ce n'est pas une opération
compliquée, mais il est important de suivre les instructions.

<sect1>Que sont les modules chargeables (loadable modules) ?<p>

Ce sont des parties du noyau (pilotes de périphériques généralement) qui ne
sont pas compilées dans celui-ci. On peut les compiler séparément, les
insérer et les retirer du noyau à n'importe quel moment. En raison de cette
souplesse, c'est devenu la méthode préférée pour coder certaines
fonctionnalités du noyau.  Bon nombre de pilotes de périphériques tels que
PCMCIA et les gestionnaires de cartouches QIC-80/40 sont des modules
chargeables.

<sect1>De combien d'espace disque ai-je besoin ? <p>

Cela dépend de la configuration de votre système. Tout d'abord, le code
source compressé de <bf>Linux</bf> fait presque 16 Mo pour la version 2.2.9.
Vous voulez généralement le garder dans un coin après l'avoir
décompressé. Décompressé et compilé avec une configuration moyenne, il
occupe 67 Mo de plus.

<sect1>Combien de temps ça prend ? <p>

Sur les machines récentes la compilation demande beaucoup beaucoup moins de
temps que sur les anciennes. Un AMD K6-2/300 avec un disque rapide peut
compiler un noyau 2.2.x en à peu près quatre minutes. Avec de vieux Pentium,
486 ou 386 soyez prêts à patienter, éventuellement des heures, jours...

Si cela vous pose problème et que vous avez accès à une machine rapide, vous
pouvez compiler sur celle-ci (fournissez les bons paramètres, assurez-vous
que vos utilitaires sont à jour, etc.) et transférer l'image du noyau sur la
machine lente.


<sect>Comment configurer le noyau ?<p>

<sect1>Récupérer les sources <p>

Vous pouvez récupérer les sources via ftp depuis <tt>ftp.kernel.org</tt>
dans le répertoire <tt>/pub/linux/kernel/vx.y</tt>, où <tt>x.y</tt> est la
version (par ex. 2.2). Comme expliqué plus haut les versions se terminant par
un chiffre impair sont les versions de développement et peuvent être
instables. Le fichier est typiquement <tt>linux-x.y.z.tar.gz</tt>, où
<tt>x.y.z</tt> est le numéro de version. Une version avec suffixe en
<tt>.bz2</tt> (compressé avec bzip2) est aussi généralement disponible (la
compression bzip2 est plus performante donc le transfert sera plus rapide).

Il vaut mieux utiliser <tt>ftp.xx.kernel.org</tt> où <tt>xx</tt> est votre
code de pays, par exemple <tt>ftp.fr.kernel.org</tt> pour la France,
<tt>ftp.be.kernel.org</tt> pour la Belgique.

<sect1>Installer les sources<p>

Faites un <tt>su</tt> (super utilisateur) ou bien loggez-vous en tant que
<sq><tt>root</tt></sq>, et allez dans le répertoire <tt>/usr/src</tt>.  Si
vous avez déjà installé les sources du noyau, il y aura déjà un répertoire
appelé <sq><tt>linux</tt></sq>, contenant l'ensemble des sources du noyau.
Si vous avez de la place disque et que vous voulez jouer la carte sécurité,
il est préférable de conserver ce répertoire intact.  Un système assez
pratique consiste à renommer votre répertoire en fonction du numéro de la
version. La commande <sq><tt>uname -r</tt></sq> vous indiquera le numéro de
la version du noyau actuellement en fonction.

Par exemple, si <sq><tt>uname -r</tt></sq> donne <sq><tt>1.0.9</tt>,</sq>
vous pourrez déplacer votre répertoire (avec <tt>mv</tt>)
<sq><tt>linux</tt></sq> en <sq><tt>linux-1.0.9</tt></sq>.  Si vous êtes du
genre téméraire, détruisez le répertoire. Dans tous les cas, soyez sûr qu'il
n'y ait aucun répertoire <sq><tt>linux</tt></sq> dans <tt>/usr/src</tt>
avant de décompresser et d'installer les sources.

Dans <tt>/usr/src</tt>, installez les sources en faisant <sq><tt>tar zxpvf
linux-x.y.z.tar.gz</tt></sq> (si vous avez uniquement un fichier
<tt>.tar</tt>, sans de <tt>.gz</tt> à la fin,<sq><tt>tar xpvf
linux.x.y.z.tar</tt></sq> marchera sans problème).  Vous verrez la liste
des fichiers se dérouler sous vos yeux.  Lorsque c'est terminé, il y aura un
nouveau répertoire <sq><tt>linux</tt></sq>.  Allez dans <bf>linux</bf> et
jetez un coup d'oeil au fichier <tt>README</tt>.  Il y a une section
<sq><tt>INSTALLING the kernel</tt></sq>.  Suivez les instructions lorsque
nécessaire - prenez garde à ce que les liens soient en place et que les
fichiers <tt>.o</tt> soient détruits, etc.

Si votre fichier est en <tt>.bz2</tt>, il vous faudra utiliser le programme
bzip2 (voir <url url="http://www.muraroa.demon.co.uk/">). Faites:

<verb>
     bz2cat linux-x.y.z.tar.bz2 | tar xvf -
</verb>

<sect1>Configurer le noyau<p>

    Note : il s'agit d'une répétition, clarification de la section
    correspondante dans le fichier <tt>README</tt> de Linus.

La commande <sq><tt>make config</tt></sq> lance un script qui va vous 
poser un certain nombre de questions. Il a besoin de bash, donc 
vérifiez que vous possédez bien <tt>/bin/bash</tt>, <tt>/bin/sh</tt>, 
ou <tt>&dollar;BASH</tt>.

Il existe un certain nombre de possibilités autres que <tt>make config</tt>
et il est possible que vous les trouviez plus simples à utiliser. Pour ceux
qui utilisent X, vous pouvez essayer <tt>make xconfig</tt> si vous avez au
préalable installé Tk (<em>click-o-rama</em> - Nat).  <tt>make
menuconfig</tt> est destiné à ceux qui ont installé (n)curses et qui
préfèrent utiliser un menu en mode texte.  Ces interfaces ont un avantage :
si vous vous trompez lors de la configuration, vous pouvez facilement
corriger l'erreur sans devoir tout relancer.

Avec <tt>make menuconfig</tt> et <tt>make xconfig</tt> les options de
configuration apparaîtront hiérarchisées.

Vous êtes alors prêt à répondre aux questions, la plupart du temps par
<sq><tt>y</tt></sq> ou par <sq><tt>n</tt></sq>. Les pilotes de périphériques
acceptent aussi généralement <sq><tt>m</tt></sq>, pour <sq>module</sq>. Le
pilote sera compilé non pas directement dans le noyau mais en tant que
module chargeable. Une interprétation plus amusante est que le
<sq><tt>m</tt></sq> est pour <sq>maybe</sq> (peut-être). Certaines options
non critiques ou évidentes ne seront pas décrites ici. Consultez le
paragraphe <sq>Autres options de configuration</sq> pour une courte
descriptions de quelques options non détaillées ici. Avec <tt>make
menuconfig</tt> vous pouvez utiliser la barre d'espace.

À partir des versions 2.0.x, une option <sq>?</sq> est présente : elle
permet d'obtenir une aide pour l'option désirée qui correspond sûrement aux
informations les plus à jour. Voici une liste décrivant brièvement les
options les plus importantes avec leur place dans la hiérarchie (NdT : et la
traduction de l'intitulé).

<sect2>Kernel math emulation (Precessor type and features)<p>

<it>(Émulation du coprocesseur Arithmétique)</it> Si vous ne possédez pas de
coprocesseur arithmétique (autrement dit, vous ne disposez que d'un 386 ou
d'un 486SX), répondez <sq><tt>y</tt></sq>.  Si vous en avez un et que vous
répondez <sq><tt>y</tt></sq>, ce n'est pas grave : le coprocesseur sera
utilisé et l'émulation ignorée. Pour toute machine pas trop vieille, la
réponse sera non.

<sect2>Enhanced (MFM/RLL) disk and IDE disk/cdrom support (Block Devices)<p>

<it>(Gestion améliorée des disques durs)</it>
Vous devez à peu près toujours répondre oui à cette question. Cela signifie 
que le  noyau pourra gérer les disques standards des PC comme IDE, que 
bon nombre de gens possèdent. Ceci n'inclut pas les disques SCSI : ils 
sont sélectionnables plus tard dans la configuration.

   Une question porte sur les gestionnaires de périphériques <sq>old
disk-only</sq> et <sq>new IDE</sq>. Vous devez choisir l'un des deux.  La
principale différence est que le vieux gestionnaire de périphérique ne
supporte qu'au plus deux disques sur une seule interface. Le nouveau
gestionnaire gère une deuxième interface IDE et les disques CD-ROM IDE/ATAPI
, et il est plus gros de 4 ko que l'ancien. Il est supposé <sq>amélioré</sq>
ce qui signifie qu'à part avoir un nombre différent de bogues il peut
améliorer les performances de votre disque, notamment si vous possédez du
matériel récent (comme de l'EIDE).

<sect2>Networking support (General Setup)<p>

<it>(Gestion du Réseau)</it> En principe, vous ne devriez répondre
<sq><tt>y</tt></sq> que si votre machine se trouve sur un réseau tel
qu'Internet ou si vous voulez utiliser SLIP, PPP, term, etc. pour
communiquer avec un accès Internet externe.  Toutefois, bon nombre de
paquetages (tels que le système X Window) ont besoin de ce support réseau
même si votre machine n'y est pas reliée ; dans ce cas, répondez
<sq><tt>y</tt></sq>.  Plus tard, on vous demandera si vous voulez avoir le
support TCP/IP. De même, répondez <sq><tt>y</tt></sq>, à moins que vous ne
soyez sûr de ce que vous faites.

<sect2>System V IPC (General Setup)<p> 

  L'une des meilleures définition des IPC (communication inter-processus) se
trouve dans le glossaire du livre de Perl. Ces mécanismes sont utilisés par
certains développeurs Perl et quelques autres paquetages (comme par exemple
DOOM), donc ce n'est pas vraiment une bonne idée de répondre
<sq><tt>n</tt></sq> à cette question à moins que vous ne sachiez exactement
ce que vous faites.

<sect2>Processor family (Processor type and features)<p>

<it>(Famille de processeur)</it> Dans les anciens noyaux, il s'agissait de
l'option Use -m486 flag for 486-specific optimizations.

Cette option sélectionnait certaines optimisations pour un type de processeur, le
noyau fonctionnant normalement avec les autres processeurs. Le noyau généré
avait toutefois une taille légèrement supérieure. Dans les nouveaux noyaux,
cette différence de taille n'est plus d'actualité donc vous pouvez indiquer
le processeur que vous allez utiliser avec le nouveau noyau. Un noyau
<sq>386</sq> fonctionnera avec toutes les machines.

<sect2>SCSI support<p>

<it> (Gestion SCSI)</it> Si vous avez au moins un périphérique SCSI,
répondez <sq><tt>y</tt></sq>.  On vous demandera alors de plus amples
renseignements sur la gestion des CD-ROM, des disques, et quel type de
contrôleur SCSI vous possédez. Consultez le SCSI-HOWTO pour plus de détails.

<sect2>Network device support<p>

<it>(Gestion de périphériques réseau)</it> Si vous avez une carte réseau, ou
si vous voulez utiliser SLIP, PPP, ou un adaptateur sur port parallèle, répondez
<sq><tt>y</tt></sq>.  Le script de configuration vous demandera alors quel
type de carte vous possédez et quels protocoles vous voulez inclure.

<sect2>Filesystems<p>

<it>(Systèmes de fichiers)</it> On vous demandera quels types de systèmes de
fichiers vous souhaitez gérer :

Standard (minix) - Les distributions récentes ne créent pas de systèmes de
fichiers de type minix, et bon nombre de personnes ne s'en servent pas, mais
cela peut être malgré tout une bonne idée de le configurer. Quelques
programmes de <sq>sauvetage de disques</sq> l'utilisent, et encore
aujourd'hui, un bon nombre de disquettes risquent d'avoir ce système de
fichiers, car il est assez pratique pour les disquettes.

Second extended - C'est le système de fichiers standard de Linux. Vous en
aurez très certainement besoin, donc <sq><tt>y</tt></sq>.
(NdT : et puis c'est un Français qui l'a fait alors... !)

msdos - Si vous voulez utiliser les partitions de votre disque MS-DOS,
 ou monter des disquettes au format MS-DOS, répondez <sq><tt>y</tt></sq>.

Des systèmes de fichiers originaires d'autres systèmes d'exploitation sont
également disponibles.

/proc - Un des systèmes de fichiers les plus puissants (idée effrontément
chipée aux Laboratoires Bell, je pense). Ça n'a rien à voir avec vos
partitions disques, mais c'est une interface sous forme de système de fichiers
avec le noyau et les processus. Un grand nombre d'outils de visualisation de
processus (comme <sq><tt>ps</tt></sq>) l'utilisent. Si vous l'avez installé,
essayez <sq><tt>cat /proc/meminfo</tt></sq> ou <sq><tt>cat
/proc/devices</tt></sq>.  Quelques shells (comme rc) utilisent
<tt>/proc/self/fd</tt> (connu comme <tt>/dev/fd</tt> sur d'autres systèmes)
pour les entrées/sorties.  Vous devriez répondre <sq><tt>y</tt></sq> à ceci
: de nombreux programmes Linux standards en ont besoin.

NFS - Si vous êtes en réseau et que vous voulez utiliser des volumes
présents sur d'autres machines, répondez <sq><tt>y</tt></sq>.

ISO9660 - Format rencontré sur la plupart des CD-ROM. Si vous possédez un
CD-ROM et que vous comptez vous en servir sous Linux, répondez
<sq><tt>y</tt></sq>.

<sect3>Mais je ne sais pas de quels systèmes de fichiers j'ai besoin !<p>

Bon, tapez <sq><tt>mount</tt></sq>, cela va vous afficher un truc comme ça :

<tscreen><verb>
	blah# mount
	/dev/hda1 on / type ext2 (defaults)
	/dev/hda3 on /usr type ext2 (defaults)
	none on /proc type proc (defaults)
	/dev/fd0 on /mnt type msdos (defaults)
</verb></tscreen>

Observez chacune des lignes. Le mot à côté de <sq><tt>type</tt></sq> est le
type du système de fichiers. Dans cet exemple, mes partitions <tt>/</tt> et
<tt>/usr</tt> sont du type ext2fs, j'utilise <tt>/proc</tt>, et il y a une
disquette montée avec le système de fichiers MS-DOS (beuurrrk !).

Essayez <sq><tt>cat /proc/filesystems</tt></sq> si vous avez
<tt>/proc</tt>. Cela vous donnera la liste des systèmes de fichiers que
votre noyau gère.

Le support de systèmes de fichiers rarement utilisés et qui ne sont pas
absolument nécessaires peut augmenter la taille du noyau. Voir la section
sur les modules chargeables pour résoudre ce problème, ainsi que la section
sur les pièges.

<sect2>Character devices<p>

<it>(Périphériques caractère)</it> Vous trouverez ici les pilotes pour gérer
votre imprimante parallèle, souris bus, souris PS/2 (beaucoup de portables
utilisent une souris constructeur de type PS/2), quelques lecteurs de bande
et d'autres périphériques de type <sq>caractère</sq>. Répondez en
conséquence.

Note : <sq>gpm</sq> est un programme qui vous permet d'utiliser la souris à
l'extérieur de X Window pour effectuer des opérations de copier-coller entre
les consoles virtuelles. C'est assez utile si vous avez une souris série,
car cela coexiste bien avec X Window, mais vous devrez faire quelques trucs
pour que cela fonctionne avec les autres.

<sect2>Sound<p>

<it>(Son)</it> Si vous tenez à entendre <tt>biff</tt> aboyer, répondez
<sq><tt>y</tt></sq>, puis donnez au programme de configuration tout ce qu'il
veut savoir sur votre carte son. À propos : lorsqu'il vous demande si vous
voulez installer la version entière du pilote, vous pouvez répondre
`<tt>n</tt>' et donc économiser de la mémoire en insérant uniquement les
caractéristiques dont vous avez besoin.

Si vous vous intéressez de près au support des cartes son, jetez un oeil sur
les pilotes libres à <url url="http://www.linux.org.uk/OSS/"> et au Open
Sound System (commercial) à <url url="http://www.opensound.com/">.

<sect2>Autres options de configuration<p>

  Toutes les options de configuration ne sont pas détaillées dans ce
document car elles changent trop souvent ou bien sont vraiment évidentes
(par exemple, le support de la carte 3Com 3C509 permet la compilation du
 pilote de cette carte). L'aide en ligne fournit une liste assez complète de
ces options (plus une manière de les insérer dans le script
<tt>Configure</tt>) mise à jour par Axel Boldt
(<tt>boldt@math.ucsb.edu</tt>). La liste est dans le fichier
<tt>Documentation/Configure.help</tt> des sources du noyau depuis la version
2.0.

<sect2>Kernel hacking <p>

Extrait du README de Linus :

    La configuration <sq>kernel hacking</sq> provoque généralement un noyau
    plus gros ou plus lent (ou les deux), et peut même rendre le noyau 
    moins stable en configurant quelques routines pour essayer de 
    chercher les défauts du code, pour trouver les problèmes du noyau
    (kmalloc()). Donc, vous devrez répondre <sq>n</sq> à cette question si
    vous créez un noyau pour un système sûr.

<sect1>Garçon, la suite ! (Le Makefile) <p>

Quand la configuration est terminée, un message vous indique que le noyau
est configuré, et qu'il faut <sq>regarder le Makefile général pour des
configurations supplémentaires</sq>, etc.

Donc, jetez un coup d'oeil au Makefile. Vous ne changerez probablement rien,
mais ça ne peut pas vous faire de mal ! Vous pourrez également changer les
options avec la commande <sq><tt>rdev</tt></sq> quand le noyau sera prêt. Si
vous ne comprenez rien à ce fichier, passez à la suite.


<sect>Compiler le noyau <p>

<sect1>Nettoyer et chercher les dépendances<p>

Lorsque le script de configuration va se terminer, il vous demandera de
faire un <sq><tt>make dep</tt></sq> et (peut-être) <sq><tt>make
clean</tt></sq>. <sq><tt>make dep</tt></sq> assure que toutes les
dépendances, comme les fichiers d'en-têtes (include) sont en place, et ne prend pas trop
de temps à moins que vous n'ayez une machine très lente. Pour les anciennes
versions, lorsque c'est terminé faites un <sq><tt>make clean</tt></sq>.
Cela détruit tous les fichiers objets et d'autres fichiers que les anciennes
versions laissent trainer. <it>N'oubliez pas</it> cette étape avant de
recompiler un noyau.

<sect1>La compilation <p>

Après avoir cherché les dépendances et nettoyé l'arborescence, vous pouvez
lancer la compilation par <sq><tt>make bzImage</tt></sq> ou <sq><tt>make
bzdisk</tt></sq> (c'est cette partie qui prend du temps).  <sq><tt>make
bzImage</tt></sq> va compiler le noyau, et créer le fichier
<sq><tt>bzImage</tt></sq> dans le répertoire <tt>arch/i386/boot</tt> qui
correspond au nouveau noyau compressé.  <sq><tt>make bzdisk</tt></sq> fait
la même chose, mais copie le noyau sur une disquette que vous aurez insérée
dans le lecteur <sq>A:</sq>.

<sq><tt>bzdisk</tt></sq> est assez commode pour tester de nouveaux noyaux ;
s'il ne fonctionne pas, enlevez juste la disquette et relancez la machine
avec votre ancien noyau. C'est également une méthode pratique si vous avez
détruit accidentellement votre noyau (ou quelque chose de ce genre). Vous
pouvez également vous en servir pour installer de nouveaux systèmes, en
copiant directement le contenu d'un disque sur un autre (<sq>tout ça ? ouah
!</sq>).

Tous les noyaux assez récents sont compressés, comme l'indique le
<sq><tt>bz</tt></sq> au début des noms. Un noyau compressé est
automatiquement décompacté lors de l'exécution.

Pour les noyaux plus anciens, <tt>bzImage</tt> n'existait pas et on
utilisait <tt>zImage</tt>. Cette possibilité est toujours disponible mais
vue la taille des noyaux récents il est à peu près obligatoire d'utiliser
<tt>bzImage</tt> car l'ancienne méthode ne peut gérer que des noyaux de
taille limitée.

<sect1>Les autres options du <sq>make</sq><p>

<sq><tt>make mrproper</tt></sq> est un <sq><tt>make clean</tt></sq> plus
puissant. Cela est parfois nécessaire, vous devriez le faire à chaque
patch. Il efface également votre fichier de configuration donc il faudra
éventuellement en faire une copie avant (<tt>.config</tt>).

<sq><tt>make oldconfig</tt></sq> essaiera de configurer le noyau à partir
d'un vieux fichier de configation, il choisira toutes les options de
<sq><tt>make config</tt></sq> pour vous. Si c'est la première fois que vous
compilez un noyau ou si vous n'avez pas un ancien fichier de configuration
n'utilisez pas ceci, vous devrez sans doute changer la configuration par
défaut.

Regardez la section sur les modules à propos du <sq><tt>make
modules</tt></sq>.

<sect1>Installer le noyau <p>

Une fois que vous avez un nouveau noyau qui semble fonctionner comme vous le
voulez, il est grand temps de l'installer. La plupart des gens utilisent
LILO (LInux LOader).  <sq><tt>make zlilo</tt></sq> installera votre noyau,
lancera LILO, et laissera votre machine prête à rebooter, mais SEULEMENT si
lilo est configuré de la manière suivante : le noyau s'appelle
<tt>/vmlinuz</tt>, lilo se trouve dans <tt>/sbin</tt>, et votre fichier de
configuration pour LILO (<tt>/etc/lilo.conf</tt>) correspond à ces données.

Sinon, vous devrez utiliser LILO directement.  C'est un produit assez facile
à installer, mais dont le fichier de configuration peut être
déroutant. Regardez le fichier de configuration (<tt>/etc/lilo/config</tt>
pour les versions les plus anciennes, <tt>/etc/lilo.conf</tt> pour les
récentes), et regardez son contenu.  Le fichier de configuration doit
ressembler à ceci :

<verb>
    image = /vmlinux
	label = Linux
	root = /dev/hda1
	...
</verb>

La ligne <sq><tt>image =</tt></sq> sert à indiquer le nom du noyau utilisé.
Beaucoup de gens utilisent <tt>/vmlinuz</tt>.  <sq><tt>label</tt></sq>
servira à indiquer à LILO sur quel noyau ou sur quel système d'exploitation
vous allez booter (nom logique), et <sq><tt>root</tt></sq> est la partition
racine de ce système d'expoitation.  Faites une sauvegarde de votre vieux
noyau (quel que soit son nom), et copiez le nouveau noyau (bzImage) à sa
place : <sq><tt>cp bzImage /vmlinuz</tt></sq> si vous utilisez
<sq><tt>/vmlinuz</tt></sq>, puis relancez lilo. Sur les systèmes récents,
vous pouvez simplement lancer <sq><tt>lilo</tt></sq>, mais sur de plus
anciens, vous devez faire un <tt>/etc/lilo/install</tt> ou
<tt>/etc/lilo/lilo -C /etc/lilo/config</tt>.

Si vous désirez en savoir plus sur la configuration de LILO, ou si vous voulez
avoir LILO, récupérez la dernière version sur votre site FTP favori et 
suivez les instructions.

Pour booter sur l'un de vos anciens noyaux situés sur votre disque dur (une
autre méthode de secours quand le noyau plante), copiez les lignes suivantes
<sq><tt>image = xxx</tt></sq> à la fin du fichier de configuration LILO, et
changez <sq><tt>image = xxx</tt></sq> par <sq><tt>image = yyy</tt></sq>, où
<sq><tt>yyy</tt></sq> est le chemin complet du noyau de secours. Puis
changez <sq><tt>label = zzz</tt></sq> en <sq><tt>label =
linux-sauvegarde</tt></sq> et relancez <tt>lilo</tt>.  Si elle n'y est pas,
vous devrez rajouter une ligne dans le fichier de configuration indiquant
<sq><tt>delay=x</tt></sq>, où x est le temps en dixième de secondes qui
indique à LILO le temps qu'il doit attendre avant d'amorcer la machine.
Vous pouvez l'interrompre (avec la touche shift par exemple), et taper le
label de l'image du noyau de sauvegarde (au cas où un problème se produit).


<sect>Mettre à jour le noyau <p>

<sect1>Appliquer un patch <p>

Les nouvelles versions du noyau sont distribuées sous la forme de patches.
Par exemple, si vous possédez la version 1.1.45, et que vous remarquez qu'il
existe un <sq><tt>patch46.gz</tt></sq>, cela signifie que vous pouvez passer
à la version 1.1.46 en appliquant ce patch. Vous devriez faire avant une
sauvegarde de votre arborescence des sources du noyau (<sq><tt>make
clean</tt></sq> puis <sq><tt>cd /usr/src; tar zcf old-tree.tar.gz
linux</tt></sq> va produire une archive compressée).

Poursuivons avec cet exemple et supposons que vous ayez mis le fichier
<sq><tt>patch46.gz</tt></sq> dans <tt>/usr/src</tt>. Allez dans
<tt>/usr/src</tt> et faites un <sq><tt>zcat patch46.gz | patch -p0</tt></sq>
(ou <sq><tt>patch -p0 &lt; patch46</tt></sq> si le patch n'est pas
compressé).  Vous verrez alors une liste de messages vous indiquant les
essais de modifications. Cela marche ou pas (en principe oui !).
Généralement, cela va trop vite pour lire, et on ne sait pas trop si ça a
marché. Vous pouvez utiliser l'option <tt>-s</tt> de <tt>patch</tt> qui lui
indique qu'il ne doit afficher que les erreurs (vous n'avez pas grand chose
à faire des <sq>héhé, mon ordinateur est en train de faire quelque
chose...!</sq>).  Pour vérifier que tout s'est passé sans encombre, allez
dans <tt>/usr/src/linux</tt> et cherchez les fichiers ayant pour extension
<tt>.rej</tt>. Quelques versions de patch (vieilles versions) utilisent
<tt>&num;</tt> pour les fichiers rejetés. Vous pouvez utiliser
<sq><tt>find</tt></sq> pour les trouver :
<verb>
        find .  -name '*.rej' -print
</verb>
vous en donnera la liste avec le chemin pour y accéder.

Si tout a marché, faites un <sq><tt>make clean</tt></sq>,
<sq><tt>config</tt>,</sq> et <sq><tt>dep</tt></sq> comme décrit dans les
sections 3 et 4.

La commande <tt>patch</tt> possède quelques options.  Comme indiqué
ci-dessus, <tt>patch -s</tt> supprime tous les messages sauf les erreurs. Si
vous stockez les sources de votre noyau dans un autre répertoire que
<tt>/usr/src/linux</tt>, un <tt>patch -p1</tt> dans ce répertoire fera les
choses proprement. Les autres options sont bien documentées dans les pages
de manuel.

<sect1>Si quelque chose ne fonctionne pas<p>

(Note : cette section traite plutôt des noyaux assez anciens)

Le problème le plus fréquent qui se présentait était lorsqu'un patch
modifiait le fichier <sq><tt>config.in</tt></sq> et que vous aviez changé
les options pour mieux coller à votre machine.  En principe, ça ne devrait
plus trop se produire, mais avec les anciennes versions... Pour résoudre ce
problème, jetez un coup d'oeil au fichier <tt>config.in.rej</tt> et regardez
son contenu.  Le changement sera indiqué par <sq><tt>+</tt></sq> et
<sq><tt>-</tt></sq> au début d'une ligne. Regardez ces lignes et retenez si
elles sont marquées <sq><tt>y</tt></sq> ou <sq><tt>n</tt></sq>. Maintenant,
éditez <tt>config.in</tt>, et changez les <sq><tt>y</tt></sq> en
<sq><tt>n</tt></sq> et les <sq><tt>n</tt></sq> en <sq><tt>y</tt></sq>
lorsque cela est nécessaire. Faites un
<verb>
        patch -p0 < config.in.rej
</verb>
et si cela fonctionne (<sq><tt>no fails</tt></sq>), alors vous pouvez
continuer avec la configuration et la compilation. Le fichier
<tt>config.in.rej</tt> restera, mais vous pouvez le détruire.

Si vous avez d'autres problèmes, vous avez peut-être installé un patch
défectueux.  Si la commande patch indique <sq><tt>previously applied patch
detected: Assume -R?</tt></sq>, vous êtes probablement en train d'appliquer
un patch déjà appliqué.  Si vous répondez <sq><tt>y</tt></sq>, cela risque
de détruire votre source et il vous faudra récupérer un source complet (vous
auriez peut-être dû commencer par là).

Pour revenir en arrière (dépatcher), faites un <sq><tt>patch -R</tt></sq>
sur le patch original.

La meilleure chose à faire lorsqu'un patch détruit tout est de repartir d'un
noyau initial tout neuf ! (par exemple, à partir du fichier
<tt>linux-x.y.z.tar.gz</tt>).

<sect1>Comment se débarasser des fichiers .orig ?<p> 

Après avoir appliqué quelques patches, les fichiers <tt>.orig</tt>  
vont commencer à s'empiler. Par exemple, j'en étais à la version
1.1.51 et la dernière fois que j'avais fait le ménage, c'était avec la version
1.1.48 (je crois...). Détruire les fichiers .orig a permis de récupérer
 plus d'un demi Méga octets. 
<verb>
        find .  -name '*.orig' -exec rm -f {} ';'
</verb>
fera cela pour vous. Quelques versions de <tt>patch</tt> qui utilisent 
<tt>&num;</tt> pour les rejets utilisent un tilde à la place 
de <tt>.orig</tt>.

Il y a d'autres manières (meilleures ?) pour se débarrasser des fichiers
.orig en utilisant le programme GNU <tt>xargs</tt> :
<verb>
        find .  -name '*.orig' | xargs rm
</verb>
ou la méthode sûre mais un peu plus verbeuse :
<verb>
        find . -name '*.orig' -print0 | xargs --null rm --
</verb>

<sect1>Autres patches<p>

Il y a d'autres patches (je les appellerai <sq>non-standards</sq>) que
ceux distribués par Linus. Si vous les appliquez, les patches Linus risquent de
ne plus marcher correctement et vous serez obligé soit de les enlever, soit
d'adapter les patches. C'est généralement un travail assez pénible pour les
novices, aussi revenir aux anciennes sources avant d'appliquer les patches de
<bf>Linux</bf> semble être une bonne solution. Après, vous pouvez regarder
si les patches non standards fonctionnent. S'ils ne fonctionnent pas, vous
pouvez revenir à l'ancienne version, ou essayer de modifier le patch pour le
faire fonctionner, ou encore attendre qu'un nouveau patch arrive.

Vous entendrez probablement parler de ces patches non standards. J'utilisais
le patch <sq>noblink</sq> car j'ai horreur des curseurs qui clignotent (ce
patch est (ou bien était) mis à jour fréquemment pour les nouveaux
noyaux). Les pilotes de périphériques étant de plus développés sous la forme
de modules chargeables, le nombre de patches <sq>non standards</sq> décroît.


<sect>Paquetages supplémentaires<p>

Votre noyau Linux a bon nombre de caractéristiques qui ne sont pas
expliquées dans le noyau lui-même ; elles sont typiquement utilisées par des
paquetages externes.  Une liste des plus utiles est donnée ici.

<sect1>kbd<p>

La console de Linux possède de nombreuses caractéristiques. Elle peut
changer les polices de caractères, remapper le clavier, permuter les modes
vidéos (dans les noyaux les plus récents), etc. Le package kbd possède des
programmes qui permettent à l'utilisateur de faire tout cela, plus une tonne
de fontes et de types de claviers. (NdT : fr.map pour le clavier
français). Il est disponible sur les mêmes sites qui proposent les sources
du noyau.

<sect1>util-linux<p>

Rik Faith (<tt>faith@cs.unc.edu</tt>) a rassemblé une grande quantité
d'outils Linux dans le paquetage util-linux. Ils est désormais maintenu par
Andries Brouwer (<tt>util-linux@math.uio.no</tt>). Disponible via ftp
anonyme sur sunsite.unc.edu dans <tt>/pub/Linux/system/misc</tt>, il
contient des programmes tels que <tt>setterm</tt>, <tt>rdev</tt>, et
<tt>ctrlaltdel</tt>, qui concernent le noyau. Comme le dit Rik,
<it>n'installez pas sans réfléchir</it>, vous n'avez pas besoin de tout
installer dans la distribution, et cela pourrait vous causer de graves
ennuis.

<sect1>hdparm<p>

Comme beaucoup de paquetages, c'était au départ un patch pour le noyau et un
ensemble de programmes. Le patch a été intégré dans le noyau standard et les
programmes pour optimiser et jouer avec vos disques sont distribués
séparément.

<sect1>gpm<p> 

gpm est un gestionnaire de souris. Ce programme vous permet
d'effectuer du couper-coller en mode texte entre les consoles virtuelles
ainsi que d'autres opérations avec un grand nombre de types de souris.


<sect>Quelques pièges<p>

<sect1>make clean <p>

Si votre noyau a un comportement surnaturel (ça m'est arrivé !), il y a des
chances pour que vous ayez oublié de faire un <sq>make clean</sq>.  Les
symptômes peuvent être un plantage de votre système, des problèmes
d'entrées-sorties étranges, une chute des performances, des reboot
aléatoires... Vérifiez que vous avez également fait un <tt>make dep</tt>.

<sect1>Noyaux énormes ou lents<p>

Si votre noyau consomme beaucoup de mémoire, ou s'il est réellement gros, ou
bien s'il faut une éternité pour le compiler même lorsque vous utilisez
votre nouveau 986DX6/440, c'est que vous avez configuré un tas de choses
(pilotes de périphériques, systèmes de fichiers) dont vous n'avez pas
besoin.  Si vous ne les utilisez pas, ne les configurez pas car cela prend
beaucoup de place en mémoire.  Le symptôme le plus visible est
l'augmentation sensible du fonctionnement du swap. Si votre disque fait
beaucoup de bruit, et qu'il ne s'agit pas d'un de ces vieux disques Fujitsu
Eagles qui font le bruit d'un avion lors de son atterrissage lorsque vous
l'éteignez, jetez un coup d'oeil à votre configuration.

Vous pouvez calculer la taille mémoire que le noyau utilise en prenant
la mémoire totale de votre machine et en soustrayant la valeur
de la mémoire totale (<sq>total mem</sq>) dans  <tt>/proc/meminfo</tt>  
ou bien avec la commande <sq><tt>free</tt></sq>.
 
<sect1>Le port parallèle ne fonctionne pas/mon imprimante ne fonctionne
pas<p>

Les options de configuration pour les PC sont : premièrement, dans la
catégorie <sq>General Setup</sq> sélectionnez <sq>Parallel port support</sq>
et <sq>PC-style hardware</sq>. Puis dans <sq>Character devices</sq>,
sélectionnez <sq>Parallel printer support</sq>.

Il y a ensuite le problème des noms de périphérique des imprimantes qui ont
changé dans Linux 2.2. Si vous aviez une imprimante <tt>lp1</tt> avec votre
noyau précédent, elle s'appelle probablement <tt>lp0</tt>
maintenant. Utilisez <sq><tt>dmesg</tt></sq> ou cherchez dans les logs dans
<tt>/var/log</tt> pour le vérifier.

<sect1>Le noyau ne compile pas<p>

Si cela ne compile pas, alors un patch a probablement échoué, ou bien vous
possédez des sources corrompus. Votre version de gcc peut également ne pas
être correcte, ou bien endommagée (par exemple les fichiers d'include
peuvent être faux). Soyez sûr que les liens que Linus décrit dans le fichier
README sont corrects. En général, si un noyau standard ne compile pas, c'est
qu'un truc ne tourne pas rond dans le système, et il est plus que probable
que certains outils doivent être reinstallés.

Dans des cas relativement rares, gcc peut échouer en raison de problèmes de
matériel. Le message d'erreur ressemble à un truc assez mystérieux <sq>xxx
exited with signal 15</sq>.  Je n'en n'aurais probablement pas parlé si cela
ne m'était arrivé une fois.  J'avais un cache mémoire défectueux et le
compilateur fonctionnait de manière plutôt aléatoire. Essayez dans un
premier temps de reinstaller gcc si vous avez des problèmes. Si votre noyau
compile très bien avec les caches externes vidés ou une mémoire réduite,
alors vous pourrez commencer à soupçonner votre matériel.

Certaines personnes ont tendance à ne pas aimer que je mette en doute leur
matériel. Je n'invente rien. Il existe une FAQ dédiée à ce sujet : <url
url="http://www.bitwizard.nl/sig11/"> (NdT : traduite en français à <url
url="http://www.linux-france.org/article/sig11-fr/sig11-fr.html">).

<sect1>La nouvelle version du noyau ne boote plus !<p>

Soit LILO ne fonctionne pas, soit il n'est pas configuré correctement.  Une
fois, un problème dans le fichier de configuration m'a posé pas mal de soucis :
j'avais mis <sq><tt>boot = /dev/hda1</tt></sq> à la place de <sq><tt>boot =
/dev/hda</tt></sq> (ce genre d'erreurs n'est pas facile à trouver, mais une
fois que vous avez un fichier de configuration qui fonctionne, il n'y a pas
de raison d'y toucher).

<sect1> Vous avez oublié de lancer LILO, ou le système ne boote plus du
tout<p>

Argh ! La meilleure chose à faire est de booter à partir d'une disquette et
de préparer une nouvelle disquette de boot (<sq><tt>make zdisk</tt></sq>
fait cela très bien).  Vous avez besoin de savoir o&ugrave; votre partition
racine (<tt>/</tt>) se trouve et quel est son type (ext2fs, minix,
etc). Dans l'exemple ci-dessous, vous aurez également besoin de connaître la
partition des sources du noyau (<tt>/usr/src/linux</tt>), et o&ugrave; elle
est montée.

Dans cet exemple,la racine <tt>/</tt> est <tt>/dev/hda1</tt>, la partition
qui supporte <tt>/usr/src/linux</tt> est <tt>/dev/hda3</tt>, normalement
montée sur <tt>/usr</tt>. Toutes les deux ont un système de fichiers de type
ext2fs. L'image du noyau se trouve dans
<tt>/usr/src/linux/arch/i386/boot/</tt> et elle s'appelle <tt>bzImage</tt>.

L'idée est que s'il existe un noyau <tt>bzImage</tt> qui fonctionne il est
possible de l'utiliser pour la nouvelle disquette.  Une autre possibilité
qui peut être meilleure ou pas est présentée après cet exemple (cela dépend
de la façon dont vous avez planté votre système).

Commencez par booter à partir d'une disquette d'installation (boot/root) ou
d'une disquette de secours et montez la partition o&ugrave; se trouve le
noyau en état de marche :

<verb>
        mkdir /mnt
        mount -t ext2 /dev/hda3 /mnt
</verb>

Si <tt>mkdir</tt> vous annonce que le répertoire existe, ignorez le message.
Maintenant, allez dans le répertoire où se trouve le noyau en état de marche.
Notez que  
<verb>
/mnt + /usr/src/linux/arch/i386/boot - /usr = /mnt/src/linux/arch/i386/boot
</verb>
Insérez une disquette formatée dans le lecteur <sq>A:</sq> (vérifiez qu'il
ne s'agit pas de la disquette boot ou root !), faites une copie de l'image
sur le disque et configurez votre partition racine : 

<verb>
cd /mnt/src/linux/arch/i386/boot
dd if=bzImage of=/dev/fd0
rdev /dev/fd0 /dev/hda1
</verb>

Allez à la racine <tt>/</tt>, et démontez la partition <tt>/usr</tt> :
<verb>
cd /
umount /mnt
</verb>

Maintenant, vous devriez être capable de rebooter votre système normalement
à partir de cette disquette. N'oubliez pas de lancer lilo (ou ce que vous
aviez oublié) avant de rebooter !

Comme mentionné ci-dessus, il y a une autre manière très pratique. S'il se
trouve que vous avez un noyau opérationnel dans <tt>/</tt>
(<tt>/vmlinuz</tt> par exemple), on peut s'en servir. Supposons que vous
remplissiez les conditions ci-dessus, et que votre noyau s'appelle
<tt>/vmlinuz</tt>, faites comme ci-dessus en changeant <tt>/dev/hda3</tt> en
<tt>/dev/hda1</tt> (la partition <tt>/</tt>), <tt>/mnt/src/linux</tt> en
<tt>/mnt</tt>, et <tt>if=bzImage</tt> en <tt>if=vmlinuz</tt>.  La petite
note expliquant comment aller dans <tt>/mnt/src/linux</tt> peut être
oubliée.

Utiliser LILO avec de gros disques (avec un nombre de cyclindres supérieur à
1024) peut poser des problèmes. Consultez le mini-Howto LILO ou la
documentation.

<sect1>Il me dit <sq>warning: bdflush not running</sq> <p>

Cela peut être un problème assez grave. Avec les noyaux ayant une version
supérieure à 1.0 (aux alentours du 20 avril 1994), le programme
<sq><tt>update</tt></sq> qui vide périodiquement les tampons disque a été
remplacé par <sq><tt>bdflush</tt></sq>. Récupérez les sources de
<sq><tt>bdflush</tt></sq> (vous pouvez les récupérer là o&ugrave; vous avez
trouvé votre noyau), et compilez-le (il vaut mieux fonctionner avec un
ancien noyau pendant la compilation et pendant l'installation). Il
s'installera tout seul comme <sq><tt>update</tt></sq> et le nouveau noyau
devrait ensuite fonctionner correctement.

<sect1>Je n'arrive pas à faire marcher mon CD-ROM IDE/ATAPI<p>

Aussi étrange que cela puisse paraître, beaucoup de gens n'arrivent pas
à faire fonctionner leurs disques ATAPI, tout simplement 
parce qu'il y a un bon nombre de problèmes potentiels.

Si votre CD-ROM est le seul disque d'une interface IDE particulière il doit
être configuré en <sq>maître (master)</sq> ou <sq>seul (single)</sq>. C'est
l'erreur la plus fréquemment rencontrée.

Creative Labs (par exemple) a mis des interfaces IDE sur ses cartes sons.
Toutefois, cela pose un problème pour les gens qui ont déjà deux interfaces
IDE sur leur carte mère (IRQ15 généralement). Une pratique commune est de
faire de l'interface soundblaster un troisième port IDE (IRQ11 je pense).

Cela pose un problème avec Linux car les versions 1.2.x ne supportent
pas une troisième interface IDE (cela est géré avec les versions 1.3.x mais 
ce sont des versions de développement, et la troisième interface n'est 
pas détectée automatiquement). Pour résoudre ce problème, vous avez
plusieurs possibilités.

Si avez déjà un deuxième port IDE, il y a des chances pour que vous ne
l'utilisiez pas ou qu'il n'ait pas deux périphériques connectés.  Désactivez
l'interface ATAPI de la carte son (vous économisez un IRQ) et connectez le
disque sur votre seconde interface.

Si vous n'avez pas une seconde interface, mettez interface IDE (pas la
partie son) de la carte son sur l'IRQ 15. Cela devrait fonctionner.

<sect1>Le noyau me dit des insanités à propos de requêtes obsolètes !<p>

Récupérez des versions récentes du progamme <tt>route</tt> et de tous les
autres programmes manipulant les routes :
<tt>/usr/include/linux/route.h</tt> (qui est en fait un fichier dans
<tt>/usr/src/linux</tt>) a changé.

<sect1>Le Firewall ne fonctionne pas dans la version 1.2.0<p>

Passez à la version 1.2.1.

<sect1>Ce n'est pas une image noyau compressée !<p>

N'utilisez pas le fichier <tt>vmlinux</tt> créé dans <tt>/usr/src/linux</tt>
comme image de boot mais <tt>[..]/arch/i386/boot/bzImage</tt>.

<sect1>Problèmes avec la console après mise à jour à la version 1.3.x<p>

Changez le mot <tt>dumb</tt> en <tt>linux</tt> dans l'entrée console du
fichier <tt>/etc/termcap</tt>. Il faudra peut-être aussi ajouter une entrée
<tt>terminfo</tt>.

<sect1>Le noyau ne semble pas pouvoir compiler après une mise à jour<p>

Le source du noyau contient un certain nombre de fichiers d'en-têtes (les
fichiers se terminant par <tt>.h</tt>) qui se trouvent dans le répertoire
<tt>/usr/include</tt>.  Ils sont référencés ainsi (où <tt>xyzzy.h</tt> doit
être dans <tt>/usr/include/linux</tt>) :
<verb>
    #include <linux/xyzzy.h>
</verb>
Normalement, il y a un lien appelé <tt>linux</tt> dans <tt>/usr/include</tt>
sur le répertoire <tt>include/linux</tt> de la racine des sources du noyau
(<tt>/usr/src/linux/include/linux</tt> dans un système standard).  Si ce
lien n'existe pas, ou bien pointe au mauvais endroit, bon nombre de
programmes ne compileront pas. Si vous décidez que les sources du noyau
prennent trop de place sur votre disque et que vous les détruisez, cela sera
un problème. Un autre problème qui peut arriver, c'est avec les permissions
d'accès aux fichiers. Si votre <tt>root</tt> a un umask qui n'autorise pas
les autres utilisateurs à voir ses fichiers par défaut, et que vous
désarchiviez les sources du noyau sans l'option <tt>p</tt> (conserve le
mode), les utilisateurs ne pourront pas utiliser le compilateur C. Vous
pouvez alors utiliser la commande <tt>chmod</tt> pour résoudre le problème
mais il est probablement plus facile de réinstaller les fichiers include.
Vous pouvez procéder de la même manière que lors de l'installation des
sources au début, en ajoutant un argument pour n'extraire que les includes :
<verb>
    blah# tar zxvpf linux.x.y.z.tar.gz linux/include
</verb>
Notez que <sq><tt>make config</tt></sq> va recréer le lien
<tt>/usr/src/linux</tt> s'il n'existe pas.

<sect1>Augmenter les limites<p>

Ces quelques <it/exemples/ de commandes peuvent être assez utiles à ceux qui
se demandent comment augmenter certaines limites logicielles imposées par le
noyau :
 <verb>
 echo 4096 > /proc/sys/kernel/file-max
 echo 12288 > /proc/sys/kernel/inode-max
 echo 300 400 500 > /proc/sys/vm/freepages
</verb>


<sect>Note concernant la mise à jour pour les noyaux 2.0.x, 2.2.x<p>

Les noyaux 2.0.x et 2.2.x ont introduit pas mal de modifications dans
l'installation du noyau. Le fichier <tt>Documentation/Changes</tt> situé
dans l'arborescence des sources 2.0.x contient des informations que vous
devez connaître lorsque vous effectuez la mise à jour de votre système. Il
est fort probable que vous deviez mettre à jour plusieurs paquetages tels
que gcc, libc et SysVInit ainsi que quelques fichiers systèmes. Mais ne
paniquez pas !


<sect>Modules <p>

Les modules chargeables du noyau peuvent faire économiser de la mémoire et
faciliter la configuration. L'utilisation des modules s'est accrue jusqu'à
inclure les systèmes de fichiers, les pilotes de cartes ethernet, de
lecteurs de cartouches, d'imprimantes, etc.

<sect1>Installer les utilitaires pour gérer les modules<p>

Ces utilitaires sont disponibles sur n'importe quel site o&ugrave; vous
avez récupéré les sources du noyau : <tt>modutils-x.y.z.tar.gz</tt>;
choisissez la dernière version <tt>x.y.z</tt> qui est égale ou inférieure à
votre version du noyau.  Installez-le avec `<tt>tar zxvf
modutils-x.y.z.tar.gz</tt>', <tt>cd</tt> dans le répertoire créé
(<tt>modutils-x.y.z</tt>), regardez le fichier <tt>README</tt>, et suivez
les instructions d'installation (qui sont en général très simples, du genre,
faites <tt>make install</tt>).  Vous devriez avoir maintenant les programmes
<tt>insmod</tt>, <tt>rmmod</tt>, <tt>ksyms</tt>, <tt>lsmod</tt>,
<tt>genksyms</tt>, <tt>modprobe</tt>, et <tt>depmod</tt> dans
<tt>/sbin</tt>. Vous pouvez les tester avec le pilote exemple <sq>hw</sq>
dans <tt>insmod</tt> ; regardez le fichier <tt>INSTALL</tt> dans ce
sous-répertoire pour les détails.

<tt>insmod</tt> insère un module dans le noyau en cours d'exécution.  Les
modules ont généralement une extension <tt>.o</tt>.  Le pilote exemple est
appelé <tt>drv_hello.o</tt>, donc, pour l'insérer, <tt>insmod
drv_hello.o</tt>'. Pour voir les modules que le noyau utilise actuellement,
lancer <tt>lsmod</tt>.  Il devrait alors afficher :
<verb>
blah# lsmod
Module:        #pages:  Used by:
drv_hello          1
</verb>
`<tt>drv_hello</tt>' est le nom du module, il utilise une page mémoire (4ko),
 et aucun autre module du noyau ne dépend actuellement de lui. Pour le
retirer, lancez `<tt>rmmod drv_hello</tt>'. Notez que <tt>rmmod</tt> prend
comme argument <it>le nom du module,</it> (celui donné par <tt>lsmod</tt>)
pas un nom de fichier. Les autres programmes de gestion des modules sont
documentés (pages de manuel).

<sect1>Modules distribués avec le noyau<p>

Avec la version 2.0.30, presque tout est disponible sous forme de modules
chargeables. Pour les utiliser, soyez sûr que vous ne les insérez pas dans
la configuration du noyau. Pour cela, ne répondez pas <tt>y</tt> pendant le
`<tt>make config</tt>'.

Compilez un nouveau noyau et bootez avec. Puis, <tt>cd</tt> dans
<tt>/usr/src/linux</tt> à nouveau, et faites un `<tt>make modules</tt>'.
Cela va compiler tous les modules que vous n'avez pas spécifiés dans le
noyau et installer les liens dans <tt>/usr/src/linux/modules</tt>.  Vous
pouvez alors les utiliser depuis ce répertoire ou faire `<tt>make
modules_install</tt>' qui les installera dans <tt>/lib/modules/x.y.z</tt>,
ou <tt>x.y.z</tt> est le numéro de version du noyau.

Cela peut être particulièrement utile pour les systèmes de fichiers. Vous
n'utilisez peut-être pas fréquemment les systèmes de fichiers minix ou
msdos. Par exemple, si je rencontre une disquette msdos (beuh), je devrai
faire un <tt>insmod /usr/src/linux/modules/msdos.o</tt>, puis <tt>rmmod
msdos</tt> lorsque j'aurai terminé, Cette façon de procéder économise près
de 50 ko de RAM dans l'utilisation du noyau.  Remarque sur le système de
fichiers minix : il est très fortement conseillé de <it>toujours</it> le
configurer directement dans le noyau pour l'utilisation en disques de
secours.


<sect>Trucs et astuces <p>

<sect1>Rediriger la sortie standard des commandes make ou patch<p>

Si vous voulez voir ce que font les commandes <sq><tt>make</tt></sq> ou
<sq><tt>patch</tt></sq>, vous pouvez rediriger les messages. Regardez
d'abord quel shell vous utilisez.  <sq><tt>grep root /etc/passwd</tt></sq>
et cherchez quelque chose comme <sq><tt>/bin/csh</tt></sq>.

Si vous utilisez sh ou bash, 
<verb>
        (commande) 2>&1 | tee  (Fichier de sortie)
</verb>
placera une copie de la sortie dans le fichier <tt/(Fichier de sortie)/.

Pour csh ou tcsh, la syntaxe est :
<verb>
(commande) |& tee (Fichier de sortie).
</verb>

Pour rc (note : vous n'utilisez probablement pas rc) c'est :
<verb>
        (commande) > [2=1]| tee (Fichier de sortie).
</verb>

<sect1>Installations diverses du noyau <p>

En plus des disquettes, d'autres méthodes existent pour tester un nouveau
noyau sans détruire les précédents. À la différence d'autres systèmes Unix,
LILO est capable de booter sur un noyau situé n'importe o&ugrave; sur le
disque (si vous avez un gros disque (500 Mo ou plus) lisez la
documentation de LILO car cela risque de poser quelques problèmes). Donc,
ajoutez cela :
<verb>
    image = /usr/src/linux/arch/i386/boot/bzImage
    label = nouveau_noyau
</verb> 

à la fin de votre fichier de configuration LILO, vous pouvez alors choisir
de booter sur le nouveau noyau sans avoir à détruire l'ancien
<tt>/vmlinuz</tt> (après avoir lancé <tt>lilo</tt>, bien sûr).  La manière
la plus simple d'indiquer à LILO qu'il doit booter sur un nouveau noyau est
de presser la touche shift au boot (lorsqu'il vous indique <tt>LILO</tt>) ce
qui vous donne un prompt.  À ce moment, tapez `<tt>nouveau_noyau</tt>' pour
qu'il boote sur le nouveau noyau.

Si vous désirez conserver plusieurs sources du noyau (cela peut prendre
<it>beaucoup</it> de place ; faites attention), la manière la plus simple
est de le nommer : <tt>/usr/src/linux-x.y.z</tt>, ou <tt>x.y.z</tt> est la
version du noyau.  Vous pouvez alors choisir le source à utiliser en faisant
un lien symbolique ; par exemple, `<tt>ln -sf linux-1.2.2
/usr/src/linux</tt>' indiquera la version 1.2.2 comme version
courante. Avant de créer ce type de lien symbolique, soyez certain que le
dernier argument de <tt>ln</tt> n'est pas un répertoire existant.  Le
résultat ne serait pas celui que vous espériez.

<sect1>Mises à jour des noyaux<p>

Russell Nelson (<tt>nelson@crynwr.com</tt>) fait des résumés des changements
dans les nouvelles versions du noyau. Ils sont courts et vous devriez les
regarder avant de réaliser la mise à jour. Ils sont disponibles par ftp
anonyme à <tt>ftp.emlist.com</tt> dans <tt>pub/kchanges</tt> ou via WEB <url
url="http://www.crynwr.com/kchanges">.


<sect>D'autres HOWTO qui peuvent être utiles<p>

<itemize>
<item> Sound-HOWTO : cartes sons et utilitaires
<item> SCSI-HOWTO : tout sur les contrôleurs et périphériques SCSI
<item> NET-2-HOWTO : réseaux
<item> PPP-HOWTO : réseau avec PPP
<item> PCMCIA-HOWTO : à propos des pilotes pour votre portable
<item> ELF-HOWTO : ELF : qu'est-ce que c'est, installation, etc
<item> Hardware-HOWTO : survol du matériel supporté
<item> Module mini-HOWTO : plus de détails sur les modules du noyau
<item> Kerneld mini-HOWTO : dédié à kerneld
<item> BogoMips mini-HOWTO : pour information

</itemize>


<sect>Divers <p>

<sect1>Auteur <p>

L'auteur du Kernel-HOWTO Linux est Brian Ward
(<tt>bri@cs.uchicago.edu</tt>). S'il vous plaît, envoyez-moi des
commentaires, corrections, rajouts. Les corrections sont en particulier très
importantes.

Vous pouvez jeter un coup d'oeil à ma page web <url name="ici"
url="http://www.math.psu.edu/bri/"> ou <url name="là"
url="http://blah.math.tu-graz.ac.at/~bri/">.

Bien que j'essaye d'être attentif à mon courrier, rappelez-vous que j'en ai
<it>beaucoup</it> tous les jours, donc ça peut prendre un petit peu de temps
pour vous répondre. Si le mail est une question, essayez d'être le plus
clair et détaillé possible. Si vous m'écrivez à propos de matériel qui ne
fonctionne pas (ou quelques chose du genre), j'ai besoin de savoir quelle
est votre configuration matérielle. Si vous reportez une erreur, ne vous
limitez pas à <sq>J'ai essayé ceci et ça n'a pas marché</sq>, j'ai besoin de
savoir quelle était l'erreur, et quelles versions du noyau, de gcc et de la
libc vous utilisez. Me donner le nom de la distribution n'est pas
suffisant. Ne craignez pas de poser des questions simples, si vous ne
demandez pas vous n'aurez pas de réponse ! Merci à tous ceux qui m'ont
envoyé des commentaires.

Si votre question ne concerne pas le noyau ou est écrite dans un langage que
je ne comprends pas, il se peut que je ne réponde pas.

Si vous m'écrivez et que vous n'obtenez aucune réponse dans un temps
raisonable (trois semaines ou plus), il y a des chances que j'ai
accidentellement détruit votre message (désolé). Rééssayez.

J'ai beaucoup de mail sur des problèmes et questions de matériel. Ce n'est
pas un problème mais merci de noter que que je ne suis pas familier avec
tout le matériel du monde. J'utilise des processeurs AMD, des controlleurs
SCSI Adaptec et Symbios et des disques SCSI IBM.

La version 0.1 de ce document a été écrite le 3 octobre 1994. Il est
disponible aux formats SGML, PostScript, TeX, roff et texte.

<sect1>Reste à faire<p>

Le paragraphe <sq>Trucs et astuces</sq> est un peu court. J'espère l'étoffer
avec les suggestions venant d'autres personnes.  De même pour <sq>Autres
paquetages</sq>. Des informations supplémentaires pour le
débogage/sauvetage lors de crash seraient les bienvenues.

<sect1>Contributions <p>

Une petite partie du README de Linus (cf. option kernel hacking ) est incluse.
(Merci, Linus !)
<itemize>
<item><tt>uc@brian.lunetix.de</tt> (Ulrich Callmeier) : patch -s et xargs.

<item><tt>quinlan@yggdrasil.com</tt> (Daniel Quinlan) : corrections et
compléments dans un bon nombre de paragraphes.

<item><tt>nat@nataa.frmug.eu.org</tt> (Nat Makarévitch) : mrproper, tar -p,
et plein d'autres choses

<item><tt>boldt@math.ucsb.edu</tt> (Axel Boldt) : a rassemblé les descriptions
des options de configuration du noyau et m'a fourni la liste

<item><tt>lembark@wrkhors.psyber.com</tt> (Steve Lembark) : suggestion pour le 
boot multiple.

<item><tt>kbriggs@earwax.pd.uwa.edu.au</tt> (Keith Briggs) : quelques
corrections et suggestions

<item><tt>rmcguire@freenet.columbus.oh.us </tt>(Ryan McGuire): ajouts au
niveau des options de compilation

<item><tt>Eric.Dumas@freenix.fr</tt> (Eric Dumas) : traduction française

<item><tt>simazaki@ab11.yamanashi.ac.jp</tt> (Yasutada Shimazaki): traduction 
japonaise

<item><tt>jjamor@lml.ls.fi.upm.es</tt> (Juan Jose Amor Iglesias): traduction
espagnole

<item><tt>mva@sbbs.se</tt> (Martin Wahlen) : traduction suédoise

<item><tt>jzp1218@stud.u-szeged.hu</tt> (Zoltan Vamosi) : traduction hongroise

<item><tt>bart@mat.uni.torun.pl</tt> (Bartosz Maruszewski) : traduction
polonaise

<item><tt>donahue@tiber.nist.gov</tt> (Michael J Donahue) : typos, gagnant
de la <sq>compétition du pain en tranches</sq>

<item><tt>rms@gnu.ai.mit.edu</tt> (Richard Stallman) : notice de
distribution/concept de documentation libre

<item><tt>dak@Pool.Informatik.RWTH-Aachen.DE</tt> (David Kastrup) : NFS

<item><tt>esr@snark.thyrsus.com</tt> (Eric Raymond) : quelques trucs et
astuces

</itemize>

Tous ceux qui m'ont envoyé des mails avec des questions et des problèmes ont
également été d'une aide précieuse.

<sect1>Copyright, traduction, licence et autres<p>

Copyright &copy Brian Ward, 1994-1999.<p>
Version française Copyright &copy Eric Dumas, 1995-1997
dumas@freenix.fr<newline>
&copy Christophe Deleuze, 1999

Permission is granted to make and distribute copies of this manual provided
the copyright notice and this permission notice are preserved on all
copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the derived
work is distributed under the terms of a permission notice identical to
this one. Translations fall under the category of ``modified versions.''

<it>(Vous avez le droit de faire et de distribuer des copies de ce document
à condition que l'avis de copyright et cet avis de permission soient
préservés sur toutes les copies. Vous pouvez copier et distribuer des
versions modifiées sous les mêmes conditions pourvu que le travail dérivé
soit distribué sous un avis de permission identique à celui-ci. Les
traductions sont des <sq>versions modifiées</sq>).</it>

Garantie : aucune.

Cette version française peut être trouvée sur ftp.lip6.fr  dans le répertoire
/pub/linux/french/HOWTO.

La distribution commerciale est autorisée et encouragée ; toutefois il est
fortement recommandé de contacter l'auteur avant la redistribution, dans
l'intérêt de la mise à jour des données (vous pourriez aussi m'envoyer un
exemplaire de ce que vous faites). Idem pour les versions traduites,
contactez le traducteur. Il est conseillé aux traducteurs de contacter
l'auteur avant de commencer la traduction. La version imprimée est bien plus
belle. Recyclez.
</article>
