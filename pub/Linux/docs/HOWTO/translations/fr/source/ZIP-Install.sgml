<!doctype linuxdoc system>

<article>

<title>Mini-HOWTO : installation de Linux sur un lecteur ZIP sur port parall&egrave;le.
<author>John Higgins,
<tt><htmlurl url="mailto:jwiggins@comp.uark.edu"
name="jwiggins@comp.uark.edu" </tt><newline>
Traduit par Fran&ccedil;ois Jeanmougin
<tt><htmlurl url="mailto:pingouin@crystal.u-strasbg.fr"
name="pingouin@crystal.u-strasbg.fr"</tt><newline> 
La section consacrée à la debian à été traduite par cristofe le
13,4 floréal 2456.
<newline>

<date>v0.7, 26 Janvier 1998 (version Fran&ccedil;aise&nbsp;: 01 Février 1998)

<abstract>
Ce document n'est destin&eacute; qu'&agrave; ceux qui disposent
d'un lecteur ZIP sur port parall&egrave;le et qui veulent avoir un système
Linux portable ou de sauvegarde.
</abstract>

<toc>


<sect> Mise en garde
<p>
NOTE&nbsp;: Je n'ai aucune idée si le lecteur IDE fonctionne de la même 
manière que la version sur port parallèle, puisque je n'en ai pas, donc
merci de ne pas me le demander.

<p>
La partie consacrée à la Debian a juste été recopiée avec pas ou peu de
modification par l'auteur. En conséquence, il peut y avoir des redondaces
dans les instructions.

Pr&eacute;-requis :
<itemize>
<item> Vous avez un lecteur ZIP pour port parallèle (comme le ZIP Plus a
les deux, je pense qu'il va fonctionner aussi bien).
<item> Vous avez d&eacute;j&agrave; Linux install&eacute et qui marche&nbsp;;
  nous n'allons pas parler d'une premi&egrave;re installation
  de Linux.
<item> Le pilote ppa du port parall&egrave;le est pr&eacute;sent dans
le noyau ou le module correspondant a &eacute;t&eacute; charg&eacute;.
<item>Le disque ZIP est mont&eacute; sur le répertoire /iomega.
</itemize>
	
<sect> Introduction

<p>
Ce document est d&eacute;coup&eacute; en quatres parties qui d&eacute;crivent 
chacune
l'installation d'un syst&egrave;me Linux minimal sur un disque ZIP de 100Mo utilisant
le lecteur ZIP sur port parall&egrave;le. La premi&egrave;re partie 
décrit comment préparer le disque ZIP, elle
est commune aux distributions Slackware et Red Hat.
Les deuxi&egrave;me, troisi&egrave;me et quatrièmes parties
d&eacute;crivent respectivement l'installation des distributions RedHat 4.2, 
Slackware 2.2 et Debian 1.2 sur le disque ZIP.
<p>
NOTE&nbsp;: J'ai bien vu que la Red Hat 5.0 était enfin sortie, mais entre
les cours et le travail, bref, disons que je ne pourrai pas travailler
dessus avant la fin mai. J'espère pouvoir aussi tester les autres 
distributions.

<sect1> Nouveautés
<p>
J'ai finalement trouvé assez de temps (il faut dire que je préparais un concours
de sociologie...) pour mettre à jour ce document. Merci à tous ceux qui m'ont
envoyé des commentaires.<newline>

Nouveautés pour ce document&nbsp;
<itemize>
<item> La distribution Debian
<item> Lilo sur disquette
<item> Red Hat nouvelle version (4.2 Biltmore)
<item> Configuration réseau (non-testé pour la Red Hat)
</itemize>

<sect1> Conventions
<p>
      Le sigle <bf>==></bf> indique que le texte qui suit est une commande.
<newline>
	Ceci indique une remarque importante&nbsp;:
<tscreen><code>
  NOTE:
</code></tscreen>
Ceci indique une "capture d'écran"
<tscreen><code>
  Texte visible à l'écran
</code></tscreen>

<sect1>Mises &agrave; jour 
<p>
       Pour les mises &agrave; jour, aussi rares qu'elles puissent être, consulter l'URL
<tt><htmlurl url="http://comp.uark.edu/~jwiggins/linuxZIP/"
name="http://comp.uark.edu/~jwiggins/linuxZIP/"></tt>


<sect1> Autres lectures utiles
<p>
<itemize>
         <item> Installation-HOWTO
         <item> SCSI-HOWTO
	 <item> NET-3-HOWTO (pour sa section 4.3.3)
         <item> ZIP-Drive (mini-HOWTO)
	 <item> la patch noyau ParPort (permet d'accéder au port imprimante)
	<tt><htmlurl url="http://www.cyberelk.demon.co.uk/parport/"
	name="http://www.cyberelk.demon.co.uk/parport/"></tt>
</itemize>
<sect2> Remerciements, contributeurs

<p>
La section Slackware 2.2 m'a été confiée par Michael Littlejohn
<tt><htmlurl url="mike@mesa7.mesa.colorado.edu"
name="mike@mesa7.mesa.colorado.edu"></tt>

<p>
La section Debian 1.2 m'a été confiée par John D. Blair
<tt><htmlurl url="jdblair@uad.edu"
name="jdblair@uad.edu"></tt>

<p>
Les informations concernant LILO et beaucoup d'autres informations précises
m'ont été confiées par Barcy Boese
<tt><htmlurl url="possum@niagara.com"
name="possum@niagara.com"></tt> et Javier Rodriguez
<tt><htmlurl url="jrodrigu@nextgeninter.net.mx"
name="jrodriguez@nextgeninter.net.mx"></tt>

<sect> Pr&eacute;paration du disque ZIP (commune aux distributions Slackware et Red Hat)
<p>
Avant de démarrer, assurez-vous d'avoir accès au lecteur ZIP; soit en ayant le pilote ppa
du port parallèle dans le noyau ou en faisant charger le module correspondant. Un moyen facile
de le vérifier est d'interroger dmesg&nbsp;:
<p>
	<bf>==> dmesg</bf>
<p>
	On peut rediriger la sortie vers less vu que dmesg a tendance à être un peu long.
Voici un extrait du mien&nbsp;:
<tscreen><code>
  scsi0 : PPA driver version 0.26 using 4-bit mode on port 0x3bc.
  scsi : 1 host.
    Vendor: IOMEGA    Model: ZIP 100           Rev: D.08
    Type:   Direct-Access                      ANSI SCSI revision: 02
  Detected scsi removable disk sda at scsi0, channel 0, id 6, lun 0
  SCSI device sda: hdwr sector= 512 bytes. Sectors= 196608 [96 MB] [0.1 GB]
   sda: Write Protect is off
   sda: sda1 sda2
</code></tscreen>
Si vous voyez seulement quelque-chose du genre&nbsp;:
<tscreen><code>
          scsi : 0 hosts.
          scsi : detected total.
</code></tscreen>
Alors vous avez le support SCSI mais le lecteur ZIP n'a pas été détecté.

<sect1> Partitionnement du disque ZIP
<p>
Pour partitionner le disque ZIP, lancer fdisk
<p>
<bf>==> fdisk /dev/sda</bf>
<p>
Voici un aperçu de la table de partition que j'ai faite&nbsp;:
<tscreen><code>
        Disk /dev/sda: 64 heads, 32 sectors, 96 cylinders
        Units = cylinders of 2048 * 512 bytes

           Device Boot   Begin    Start      End   Blocks   Id  System
        /dev/sda1            1        1       81    82928   83  Linux native
        /dev/sda2           82       82       96    15360   82  Linux swap
</code></tscreen>
	J'ai d&eacute;cid&eacute; d'utiliser une partition de swap afin de
pouvoir l'utiliser sur n'importe quelle machine (syst&egrave;me portable).

<sect1> Formater et monter le disque ZIP
<p>
       Apr&eacute;s avoir utilis&eacute; fdisk, formater la nouvelle partition&nbsp;:
<p>
<bf>==> mke2fs -c /dev/sda1</bf>
<p>
Ensuite, cr&eacute;er la partition de swap&nbsp; (15360 blocs comme le montre fdisk)
<p>
<bf>==> mkswap -c 15360 /dev/sda2</bf>
<p>
Finalement, monter le disque ZIP
<p>
<bf>==> mount /dev/sda1 /iomega -t ext2</bf>
<p>

<sect1> Cr&eacute;er une disquette de d&eacute;marrage (boot)
<p>
	&Eacute;tant donn&eacute; que le lecteur ZIP sur port parall&egrave;le
n'est pas un vrai p&eacute;riph&eacute;rique SCSI, ce n'est pas un 
p&eacute;riph&eacute;rique bootable, et donc, il n&eacute;cessite une 
disquette de d&eacute;marrage qui possède le pilote ppa dans le noyau et
non sous forme de module.

<sect2> Configurer et compiler le noyau
<p>
	D'abord, il faut configurer et compiler un noyau qui a le
pilote ppa du port parall&egrave;le actif et pas comme un module chargeable.
Afin d'obtenir l'option port parall&egrave;le, s&eacute;lectionner le support
des périphériques SCSI&nbsp;:
<p>
<it> SCSI support (CONFIG_SCSI) [Y/m/n/?] </it>
<p>
Puis, le support des disques SCSI:
<p>
<it> SCSI disk support (CONFIG_BLK_DEV_SD) [Y/m/n/?]</it>
<p>
Et finalement, sous la rubrique des pilotes SCSI de bas niveau (SCSI low-level 
drivers), on trouve le pilote ppa pour port parall&egrave;le.
<p>
<it> IOMEGA Parallel Port ZIP drive SCSI support (CONFIG_SCSI_PPA) [Y/m/n/?]</it>
<p>
Encore une fois, il ne faut pas utiliser le pilote pour port parall&egrave;le
en module, mais bien inclus dans le noyau. Jusqu'ici, sans le patch noyau 
PortPar (voir 1.4), le pilote du port parallèle ne permettra pas d'utiliser 
le port passif du lecteur ZIP pour une imprimante, donc il est alors 
préférable de d&eacute;sactiver le support pour imprimante sur port 
parall&egrave;le&nbsp;:
<p>
<it>Parallel printer support (CONFIG_PRINTER) [N/y/m/?]</it>
<p>
<tscreen><code>
  NOTE/&nbsp;: Pour plus d'informations sur le pilote du port parall&egrave;le,
               pri&egrave;re de se reporter au ZIP-Drive mini-HOWTO.<newline>
</code></tscreen>

Une fois le noyau configur&eacute, le compiler ainsi&nbsp;:
<p>
<bf>==> make dep; make clean; make zImage</bf>
<p>
Le nouveau noyau devrait se trouver dans arch/i386/boot/zImage.

<sect2> Installer le noyau sur une disquette
<p>
	Après avoir du me coltiner 4 disquetes différentes, en raison de
différents noyaux nécessitant différents paramètres, (ainsi qu'après avoir lu
le magnifique e-mail m'expliquant comment le faire), j'ai inclus une
section sur LILO comme étant un des moyens de créer un disque de 
démarrage.
<sect3> Installation via LILO
<p>
Pour ceux qui ont besoin, ou pour ceux que ça intéresserait, d'avoir
plusieurs noyaux sur une disquette (ces derniers temps, les miens sont
trop gros) ou qui veulent juste pouvoir passer des arguments (comme le
mode utilisateur unique (single)), j'ai reçu un email détaillant 
comment installer LILO sur une disquette.

<sect4> Créer un système de fichier ext2

<p>
Pour créer un système de fichier ext2 sur une disquette, utiliser juste la même
commande que pour e disque ZIP
<p>
<bf>==> mke2fs -t /dev/fd0 </bf>

<sect4> Copier les fichiers essentiels

<p>
D'abord, s'assurer qu'il y ait un dossier cible pour le montage,
et monter la disquette (j'utilise /dev/floppy)&nbsp:
<p>
<bf>==> mount /dev/fd0 /mnt/floppy -t ext2 </bf>
<p>
Pour démarrer correctement, vous avez besoin des mêmes fichiers
que ceux que LILO utilise sur votre installation de Linux actuelle.
<tscreen><code>
NOTE&nbsp;: Les chemins de fichiers donnés ici sont ceux 
            de ma machine et peuvent ne pas être les mêmes pour tout 
            le monde
</code></tscreen>
<p>
<bf>==> cp /boot/boot.b /mnt/floppy</bf>
<p>
<bf>==> cp /boot/map /mnt/floppy</bf>
<p>
<bf>==> cp /usr/src/linux/arch/i386/boot/zImage /dev/fd0 /mnt/floppy/vmlinuzDESK</bf>
<p>

Maintenant, pour créer le fichier de configuration pour LILO, à ce point,
j'ignore le programme liloconfig... (merci à Javier Rodriguez pour cette
information). Premièrement, créer le fichier de configuration de LILO,
/mnt/floppy/lilo.conf, pour le(s) noyau(x) pour le lecteur ZIP. Voici ce que
j'ai utilisé et qui m'a permis d'avoir plusieurs noyaux à tester&nbsp:
<tscreen><code>
boot=/dev/fd0
map=/mnt/floppy/map
install=/mnt/floppy/boot.b
prompt
compact
timeout=50
image=/mnt/floppy/vmlinuzLAP
   label=Laptop
   root=/dev/sda1
   read-only
image=/mnt/floppy/vmlinuzDESK
   label=Desktop
   root=/dev/sda1
   read-only
image=/mnt/floppy/vmlinuzDESK
   label=rescue
   root=/dev/hdc1
   read-only
</code></tscreen>
J'ai ainsi deux noyaux. Un pour mon portable 486 qui a besoin de l'émulation
du co-processeur mathématique dans le noyau, et l'autre pour mon ordinateur de bureau. Le "rescue" 
me permet de faire un démarrage dde secours sur le disque dur.

Enfin et surtout, lancer LILO pour
l'installer sur la disquette grace à la commande&nbsp;:
<p>
<bf>==> lilo -C /mnt/floppy/lilo.conf</bf>
<p>
Une fois LILO installé sur la disquette, sauter les deux étapes suivantes,
sauf si vous avez envie de tout recommencer :).

<sect3> Installation du noyau seulement
<p>
<p>
<tscreen><code>
NOTE : Ceci n'a rien à voir avec l'installation
       via LILO.
</code></tscreen>
<p>

Copier le nouveau noyau sur une disquette&nbsp;:
<p>
<bf>==> cp arch/i386/boot/zImage /dev/fd0</bf>
<p>
ou
<p>
<bf>==> cat arch/i386/boot/zImage > /dev/fd0</bf>
<p>

Bien sur, il existe pl&eacute;thore de mani&egrave;res de copier un noyau
sur une disquette, mais la derni&egrave;re, ma favorite, est un peu plus
cryptique. Essayez de ne pas oublier le > sauf si vous adorez voir des 
fichiers binaires.

<sect4> Localiser la racine et le swap sur la disquette
<p>
<tscreen><code>
NOTE : Ceci n'a rien à voir avec l'installation
       via LILO.
</code></tscreen>
<p>
Une fois que le noyau est sur la disquette, il faut d&eacute;finir le 
répertoire racine comme &eacute;tant sur le disque ZIP&nbsp;:
<p>
<bf>==> rdev /dev/fd0 /dev/sda1</bf>
<p>
Je ne suis pas sur que l'option suivante soit n&eacute;cessaire, 
quoiqu'il en soit, je le fais. Pour d&eacute;finir le swap&nbsp;:
<p>
<bf>==> rdev -s /dev/fd0 /dev/sda2</bf>

<sect> Installation de la RedHat 4.2

Dans l'univers de l'informatique, tout ce qui a plus de 3 mois est
considéré comme obsolète et nécessite une mise à jour. Comme je n'aurai 
pas le temps de retoucher ce document à chaque mise à jour, je ferai
de mon mieux pour le faire à chaque nouvelle version majeure. Comme
pour les autres distributions, à moins que les auteurs désirent envoyer
des corrections, celà restera en l'état.

<sect1> Ma configuration
<p>
Pour mon installation, j'ai utilis&eacute;&nbsp;:
<itemize>
<item> noyau 2.0.30
<item> Lecteur ZIP Iomega sur port parall&egrave;le
<item> RedHat 4.2
</itemize>

<sect1> Installation des paquetages

<p>
La première fois que j'ai tenté d'installer la Red Hat sur un
disque ZIP, j'ai pensé qu'il aurait été plus simple de juste utiliser
un disque de démarrage (boot disk) de la Red Hat. Je me suis alors
réveillé. Je suis presque arrivé à créer un disque de démarrage, mais
même avec l'aide par e-mail de plusieurs personnes de chez Red Hat,
j'ai commencé à renoncer à tout ce projet lorsque j'ai découvert
l'option --root du rpm.

<sect2> Quels paquetages installer?
<p>
J'ai trouv&eacute; quels &eacute;taient les paquetages n&eacute;cessaires en 
compulsant un fichier que j'ai trouv&eacute; sur un miroir RedHat. Ce fichier
peut &ecirc;tre trouv&eacute; sur n'importe quel miroir RedHat dans&nbsp;:
<tscreen><verb>
redhat/redhat4.2/i386/RedHat/base/comps
</verb></tscreen>

Pour cette installation, j'ai voulut inclure le support du réseau, mais,
à cause de la La configuration du réseau sous X de la RedHat, j'ai du configurer
à la main, ou plutot, tenter de configurer, les scripts qui se trouvent dans le
/etc/sysconfig (cf section 4.3.3.).
	J'ai décidé de ne pas installer  de paquetage de développement, car le lecteur
ZIP, en tout cas avec un noyau non patché, est plutot lent pour compiler quoi que
ce soit. J'ai aussi choisit de ne pas installer X, surtout pour des raisons d'espace
disque disponible. Plus tard, j'essaierai de monter mon disque dur et de créer un
lien symbolique avec /usr pour voir si j'arrive à faire fonctionner X.

	Voici une liste des paquetages que j'ai installés, dans l'ordre de leur
installation. Ceux marqués d'une * ont été mis à jour suit à des errata de RedHat.
Entre parenthèse, j'ai indiqué le numéro du paquet de mise à jour.
<tscreen><verb>
Par exemple NetKit-B-0.09-6 a été mis à jour par NetKit-B-0.99-8, et
            apparait donc comme: *91) NetKit-B-0.99-6 (-8)
</verb></tscreen>
<tscreen><code>
	(Liste créée par la commande rpm --root /iomega -qa)

         1) setup-1.7-2                   2) pamconfig-0.51-2
         3) filesystem-1.3-1              4) MAKEDEV-2.2-9
         5) adduser-1.7-1                 6) libc-5.3.12-18
         7) SysVinit-2.64-8               8) ash-0.2-8
         9) at-2.9b-2                    10) libtermcap-2.0.8-4
        11) bash-1.14.7-1                12) bc-1.03-6
        13) bdflush-1.5-5                14) cpio-2.4.2-4
        15) cracklib-dicts-2.5-1         16) tmpwatch-1.2-1
        17) crontabs-1.5-1              *18) db-1.85-10 (-11)
        19) dev-2.5.1-1                  20) diffutils-2.7-5
        21) etcskel-1.3-1                22) file-3.22-5
        23) fileutils-3.16-1             24) findutils-4.1-11
        25) grep-2.0-5                   26) groff-1.10-8
       *27) ld.so-1.7.14-4 (-5)          28) getty_ps-2.0.7h-4
        29) gzip-1.2.4-7                 30) mingetty-0.9.4-3
       *31) initscripts-2.92-1 (93-1)    32) ed-0.2-5
        33) info-3.9-1                   34) ncurses-1.9.9e-4
        35) libg++-2.7.1.4-5            *36) pwdb-0.54-3 (-4)
        37) rootfiles-1.5-1             *38) pam-0.57-2 (-4)
        39) redhat-release-4.2-1         40) less-321-3
        41) mount-2.5l-2                 42) zlib-1.0.4-1
        43) rpm-2.3.11-1                 44) e2fsprogs-1.10-0
        45) sysklogd-1.3-15              46) tar-1.11.8-11
        47) passwd-0.50-7                48) gawk-3.0.2-1
        49) gdbm-1.7.3-8                 50) gpm-1.10-8
        51) hdparm-3.1-2                 52) kbd-0.91-9
        53) slang-0.99.37-2              54) newt-0.8-1
        55) kbdconfig-1.4-1              56) ncompress-4.2.4-7
       *57) sh-utils-1.16-4 (-5)         58) procinfo-0.9-1
       *59) logrotate-2.3-3 (4-1)        60) lilo-0.19-1
        61) losetup-2.5l-2               62) linuxthreads-0.5-1
       *63) mkinitrd-1.6-1 (7-1)         64) mailcap-1.0-3
       *65) man-1.4h-5 (j-1)             66) mt-st-0.4-2
        67) modules-2.0.0-5              68) mailx-5.5.kw-6
        69) net-tools-1.32.alpha-2       70) procmail-3.10-10
        71) procps-1.01-11               72) psmisc-11-4
        73) quota-1.55-4                 74) readline-2.0-10
        75) sed-2.05-6                   76) setconsole-1.0-1
        77) sendmail-8.8.5-4             78) shadow-utils-960530-6
        79) stat-1.5-5                   80) tcsh-6.06-10
        81) termcap-9.12.6-5             82) textutils-1.22-1
        83) time-1.7-1                   84) timeconfig-1.8-1
        85) util-linux-2.5-38            86) vim-4.5-2
        87) vixie-cron-3.0.1-14          88) which-1.0-5
        89) zoneinfo-96i-4               90) tcp_wrappers-7.5-1
       *91) NetKit-B-0.09-6 (-8)        *92) lpr-0.18-1 (19-1)
       *93) bind-4.9.5p1-2 (9.6-1)      *94) bind-utils-4.9.5p1-2 (9.6-1)
       *95) wu-ftpd-2.4.2b12-6 (b15-1)   96) anonftp-2.3-3
        97) zip-2.1-1                    98) unzip-5.12-5
        99) statserial-1.1-7            100) minicom-1.75-2
       101) lrzsz-0.12.14-1             102) dip-3.3.7o-9
       103) ppp-2.2.0f-3                104) portmap-4.0-3
       105) perl-5.003-8               *106) traceroute-1.0.4.4bsd-2 (1.4a5-1)
      *107) elm-2.4.25-7 (-8)           108) lynx-2.6-2
       109) ncftp-2.3.0-5               110) pine-3.95-2
       111) rdate-0.960923-1            112) apache-1.1.3-3
      *113) nfs-server-2.2beta16-7     *114) nfs-server-clients-2.2beta16-7
            (2.2beta16-8)                    (2.2beta16-8)
</code></tscreen>
Et avec tout ça, j'ai encore 32Mo de libre!

<sect3> Mises à jour; errata
<p>
Comme beaucoup d'utilisateurs de la RedHat (j'espère) le savent, certains
paquetages peuvent présenter des trous de sécurité ou quelque chose d'autre 
qui pose problème. Pour cette raison, RedHat diffuse des mises à jour pour certains
paquetages. J'ai installé ceux que j'ai signalé comme mis à jour ci-dessus.
Veuillez vous référer à la page web RedHat qui concerne les mises à jour sur:
<htmlurl url="http://www.redhat.com/support/docs/rhl/rh42-errata-general.html"
name="http://www.redhat.com/support/docs/rhl/rh42-errata-general.html">
<p>
<tscreen><code>
   NOTE: avant les mises à jour de paquetages, il faut
         lancer ldconfig comme décrit à la section 3.3.1.1.
</code></tscreen>



<sect2> Comment installer les paquetages en utilisant rpm; sans glint

<p>
Avec rpm, utiliser l'option --root pour spécifier le dossier monté comme la racine pour
l'installation. J'ai d&eacute;couvert que plusieurs paquetages ne pouvaient pas
&ecirc;tre install&eacute;s, en raison de scripts de pr&eacute;installation et/ou 
postinstallation qui ne s'ex&eacute;cutaient pas correctement &agrave; cause du
r&eacute;pertoire racine diff&eacute;rent. En cons&eacute;quence, utiliser 
l'option --noscript&nbsp;:
<p>
<bf>==> rpm --root /iomega -i --noscripts PAQUETAGE.i386.rpm</bf>
<p>
Comme, j'en suis sur, beaucoup vont le voir, vous devriez avoir une
erreur du style&nbsp;:
<tscreen><code>
  failed to open /iomega/var/lib/rpm/packages.rpm

  error: cannot open /iomega/var/lib/rpm/packages.rpm
</code></tscreen>
Bon, ben, il suffit de créer le répertoire /var/lib/rpm
<p>
<bf> ==> mkdir /iomega/var; mkdir /iomega/var/lib; mkdir /iomega/var/lib/rpm</bf>

<sect2> Lequel est arrivé en premier, pamconfig ou pam?

<p>
Si quelqu'un a déjà essayé d'installer pamconfig, celui-ci se plaint de
dépendre de pam; alors, si l'on essaie d'installer pam, celui-ci se plaint
d'avoir besoin de pamconfig! Ceci étant une nouvelle version de l'histoire
de la poule et de l'oeuf, m'a laissé perplexe quelques temps, mais 
grâce à l'option --nodeps, on peut  forcer l'installation de pamconfig;
en outre, pam a plus de dépendances en échec que pamconfig.
<p>
<bf> ==> rpm --root /iomega -i --nodeps --noscripts pamconfig-0.51-2</bf>

<sect1> Problèmes après l'installation des paquetages
<p>
Une fois que le dernier paquetage a été parfaitement installé, malheureusement,
le disque n'est pas entièrement fonctionnel, pour ainsi dire. Ce que je veux dire,
c'est que, si vous essayez de démarrer maintenant avec la disquette, vous n'irez
pas très loin. Dès qu'init essaie de démarrer, vous aurez deux adorables
petites erreurs; chacune se plaignant de quelques fichiers qui auraient été là
si les scripts avaient été lancés.

<sect2>L'absence de ld.so.cache et libc.so.5

<p>
Si vous essayez de démarrer, vous avez donc deux messages d'erreurs. Le premier
concerne l'absence du fichier /etc/ld/so.cache. Le second râle à propos de
libc.so.5.

<sect3> /etc/ld.so.cache
<p>
Comme me l'ont signalé pas mal de lecteurs, mes précédentes  instructions ne
fonctionnaient pas comme prévu. Pour créer ce fichier, il faut lancer
ldconfig lorsque le ZIP est encore monté.
<p>
<bf> ==> chroot /iomega /sbin/ldconfig</bf>

Merci à Javier Rodriguez pour cette solution.

<sect3>libc.so.5

<p>
Pour résoudre le cas de l'absence de cette librairie, il faut créer un
lien symbolique qui aurait du être créé par les scripts d'installation.
<p>
<bf> ==> cd /iomega/lib; ln -s libc.so.5.3.12 libc.so.5</bf>

Merci à Darcy Boese pour cette solution.

<sect2>Configurer le mot de passe de root

<p>
De même qu'il a fallut lancer ldconfig en 4.3.1.1, il faudrait changer, créer
le mot de passe de root pour ce nouveau système&nbsp;:
<p>
<bf> ==> chroot /iomega passwd root</bf>

<sect2>Ce que le programme d'installation a créé

<p>
<tscreen<code>
       NOTE: Ceci est just une configuration rapide, que je n'ai pas 
       été capable de tester pour voir si elle marche. En théorie, elle
       devrait, mais ne venez pas pleurer si
       elle ne fonctionne pas.
</code></tscreen>

En parcourant mon CD Red Hat 4.2, je suis tombé sur quelque-chose de plutôt intéressant;
le code source du programme d'installation. Je l'ai trouvé dans /misc/src/install et
une chose que j'ai trouvé utile a été le fichier net.c. Là-dedans, j'ai trouvé
quels autres fichiers devaient être créés au lancement du programme d'installation.
La plupart participent au support du réseau (d'où le nom net.c) mais, même si
vous n'avez pas de carte réseau, vous pouvez avoir à utiliser le localhost en
réseau (en plus, apache va râler s'il ne peut pas déterminer de hostname). 
Ces fichiers comprennent&nbsp;:
<tscreen><verb>
      /etc/hosts
      /etc/HOSTNAME
      /etc/resolv.conf
      /etc/sysconfig/network
      /etc/sysconfig/network-scripts/ifcfg-eth0
      (ou tout autre périphérique réseau que vous auriez.)
</verb></tscreen>
<sect2>Configuration du réseau

<p>
Pour rédiger ce document, il m'a fallut le support réseau pour ma carte 
fast-ethernet 3Com 3c595 (qui avait été utilisée ces derniers mois sur
une autre machine).

D'abord, il me fallait un nom, et comme j'entretiens mon propre serveur de noms
(ce qui est une autre et longue histoire), j'ai moi-même donné le nom&nbsp;:
<it>dash-dot.wig.org</it> (J'aime bien comme ça sonne).
Avoir un nom sans adresse IP est un peu vain, donc j'ai utilisé un
numéro réseau réservé hors internet 192.168.10.0, que mon serveur de
nom utilise aussi. Même si le nom de machine est logiquement indiqué
dans /etc/HOSTNAME, Red Hat cherche ce nom dans /etc/sysconfig/network;
alors allons-y&nbsp;:
Extrait de mon /etc/sysconfig/network &nbsp;:
<tscreen><code>
  NETWORKING=yes
  HOSTNAME=dash-dot
  DOMAINNAME=wig.org
  GATEWAY=
  GATEWAYDEV=eth0
  NS1=192.168.10.7
</code></tscreen>
Ensuite, simplement, il faut recopier la même information, ici dans /etc/HOSTNAME,
/etc/resolv.conf, et /etc/hosts:
<p>
<bf>/etc/HOSTNAME:</bf>
<p>
<tscreen><code>
dash-dot.wig.org
</code></tscreen>

<p>
<bf>/etc/resolv.conf:</bf>
<p>
<tscreen><code>
search wig.org
nameserver ns.wig.org
</code></tscreen>

<p>
<bf>/etc/hosts:</bf>
<p>
<tscreen><code>
127.0.0.1 localhost
192.168.10.99 dash-dot.wig.org dash-dot
192.168.10.7  ns.wig.org ns
</code></tscreen>
Red Hat configure tous les periphériques réseau à partir des scripts trouvés dans
/etc/sysconfig/network-scripts. La configuration de chaque périphérique est habituellement
créée une première fois par le programme d'installation, j'ai donc du créer ces fichiers
de config à la main. Ils commencent tous par ifcfg-XXX où XXX est l'interface réseau
qu'ifconfig va activer; par exemple ppp0, eth0, etc. Dans cet exemple, j'ai du
créer un fichier ifcfg-eth0 qui contient ceci&nbsp:;
<tscreen><code>
  DEVICE=eth0
  ONBOOT=yes
  BOOTPROTO=none
  BROADCAST=192.168.10.255
  NETWORK=192.168.10.0
  NETMASK=255.255.255.0
  IPADDR=192.168.10.99
</code></tscreen>
Et pour finir, afin que tout aille bien après ça, tant que l'on est dans
/etc/sysconfig/network-scripts, lancer juste&nbsp;:
<p>
<bf> ==> ./ifup ifcfg-eth0 boot</bf>
<p>
Ceci va lancer le script qui configure l'interface réseau, si cette interface est
configurée pour être lancée au démarrage.

Pour plus d'informations, prière de se reporter au NET-3-HOWTO.


<sect> Installation pour la Slackware 2.2 

<p>
<tscreen><code>
    NOTE : Cette partie n'a pas été mise à jour.
</code></tscreen>
<sect1> &Eacute;quipement n&eacute;cessaire
<p>
<itemize>
        <item> Disque et lecteur ZIP (&eacute;videment)
        <item> Noyau avec support ZIP
        <item> ZIP HowTo (recommand&eacute;)
        <item> Une disquette formatt&eacute;e HD
        <item> 1 &agrave 2 heures de votre temps
</itemize>
<sect1> Installation
<p>
Bon, d'abord, le plus jouissif&nbsp;: d&eacute;terminer quels sont les
fichiers qui sont n&eacute;cessaires pour le disque syst&egrave;me,
et quels sont les paquetages que l'on veut (et que l'on peut)
faire rentrer sur le disque ZIP.

J'ai pens&eacute; que le moyen le plus facile pour d&eacute;marrer
&eacute;tait d'installer directement la Slackware sur le lecteur ZIP.
J'ai pens&eacute; &agrave cette approche surtout parce que la Slackware
est une distribution plus petite que la RedHat, et qu'il
serait plus facile de supprimer ce que je ne voulais pas. Cela, et
le fait que j'utilise de toute fa&ccedil;on la distribution Slackware
ont rendu ce choix logique.

Installer la Slackware sur un disque ZIP est facile, en tant que root,
lancer le programme setup, et choisir /iomega comme partition d'installation.
Configurer l'installation depuis la partition o&ugrave; se 
trouvent les sources de la Slackware (cdrom, disque dur, etc),
s&eacute;lectionner 'install' et suivre les instructions.

<sect1> Qu'y mettre ?
<p>

La plus grosse difficult&eacute; est de d&eacute;cider ce que
l'on doit ajouter et ce dont on peut se passer. Bien &eacute;videmment,
on a besoin de la s&eacute;rie 'A' (qui fait a peu pr&eacute;s 8 Mo),
le reste d&eacute;pend de chacun.

J'ai essay&eacute; de ramener la Slackware &agrave; une taille
raisonnable de 70 Mo, et cela inclut gcc/g++, perl, X11R6
(MAIS PAS TOUT!), sendmail, de la doc (moins les pages
de man des outils de d&eacute;veloppement, mais avec tous les
howto), et un assortiment d'autres bonnes choses, ce qui 
laisse environ 10 Mo de libre pour les fichiers
utilisateurs. YMMV (note du traducteur&nbsp;: hein???).
C'est selon votre choix.

<sect> Créer le fichier /etc/fstab (commun aux deux distributions.)
<p>
La derni&egrave;re chose que l'on doit faire avant de
red&eacute;marrer est de créer le fichier fstab sur la partition
qui va bientôt devenir root. &Eacute;diter le fichier /iomega/etc/fstab qui devra
au minimum ressembler &agrave; &ccedil;a:<tscreen><verb>

       /dev/sda1      /         ext2        defaults   1   1
       /dev/sda2      none      swap        sw
       none           /proc     proc        defaults   1   1
</verb></tscreen>
Sauver le fichier, et red&eacute;marrer &agrave; partir de
la disquette fra&icirc;chement pr&eacute;par&eacute;e, et amusez-vous bien!

(Un grand merci &agrave; Mike pour m'avoir rappel&eacute;
ce point tr&egrave;s important et m&ecirc;me crucial. - John)

<sect>Installation avec Debian 1.2

<p>
<tscreen><code>
NOTE : l'auteur de cette section me l'a envoyée le 11 juin 1997
</code></tscreen>


<sect1>Conditions requises

<p>

<itemize>
<item>disque et lecteur ZIP pour port parallèle.
<item>2 disquettes 1,44 M vierges
<item>un jeu complet de disquettes d'installation Debian (voir la doc
	      d'installation Debian si vous ne savez pas comment les faire)
<item>2 ou 3 heures de libres
</itemize>

<sect1>Vue d'ensemble

<p>
Après avoir passé quelques heures à me débattre avec <tt/dpkg/, j'ai décidé
qu'il serait plus simple de modifier le disque de secours (<em/rescue disk/)
Debian pour qu'il reconnaisse le lecteur ZIP ppa. Cela s'est avéré être très
facile. Vous pouvez utiliser ce disque modifié pour effectuer l'installation
de base normale du système Debian. Une fois que vous avez installé le
système de base vous pouvez utiliser une disquette de démarrage pour
démarrer le nouveau système de base et compléter l'installation avec
<tt/dselect/. Pour utiliser cette technique, il faut construire deux noyaux
- un avec le support ppa et disque mémoire initial, et un autre sans le
support du disque mémoire.

<p>
Si vous voulez, vous pouvez sauter toutes les étapes de la section 2 
et laisser la procédure d'installation de Debian formatter le disque 
ZIP pour vous.

<sect1>Création du disque de secours modifié

<p>
Le disque de secours Debian est un disque de démarrage de type SYSLINUX, qui
utilise un formattage DOS et un lanceur (<it/boot loader/) spécial pour
empêcher le chargement de MS-DOS. Ce type de disque est très facile à
modifier pour fabriquer vos propres disques de démarrage personnalisés. Le
paquetage Debian ``boot-floppies'' contient un ensemble de scripts pour
automatiser la création de disques de démarrage. Mais c'est tellement simple
que j'ai préféré le faire à la main. C'est s'écarter un peu de la
philosophie Debian, mais je suis au dessus de ça :). De brèves instructions
se trouvent dans le fichier '<tt>readme.txt</tt>' de la disquette de
secours.

<sect2>Utiliser <tt/dd/ (ou <tt/RAWRITE/ sous DOS) pour créer la nouvelle
disquette de secours

<p>
Consultez les docs d'installation de Debian si vous ne vous rappelez pas
comment faire.

<sect2>Construction d'un noyau avec le support ZIP ppa<label
id="sec:noyau_zip">

<p>
Construisez un nouveau noyau avec le support ZIP ppa (comme à l'étape
3.3.1), mais sélectionnez également les supports
``RAM disk'' et ``initial RAM disk''. Vous devez aussi sélectionner le
support pour les systèmes de fichiers msdos, fat, minix, ext2fs et procfs.

<p>
Configurez également les modules que vous voulez avoir dans votre
installation finale sur le disque ZIP.

<p>
Une fois la configuration du noyau effectuée, compilez le avec :

<p>
<bf> ==> make dep; make clean</bf>
<p>
<it><bf> ==> make bzImage</bf></it>
<p>

Compilez les modules avec :
<p>
<bf> ==> make modules</bf>
<p>
Vous les installerez plus tard.

<tscreen><code>
NOTE : soyez bien sur d'utiliser 'make bzImage' et pas 'make zImage'.
</code></tscreen>

<sect2>Monter le disque de secours

<p>
<bf> ==> fdmount fd0</bf>
<p>
ou
<p>
<bf> ==> mount /dev/fd0 /mnt</bf>
<p>
ou
<p>
<bf> ==> que sais-je :)</bf>

<sect2>Copier l'image du noyau

<p>
Copiez l'image du noyau (sur les plateformes i386 c'est le fichier
<tt>arch/i386/boot/bzImage</tt>) dans le fichier '<tt/linux/' de la
disquette.

<sect2>Éditer le script <tt/`rdev.sh'/

<p>
Ouvrez le script <tt/`rdev.sh'/ du disque de secours avec votre éditeur
favori. Remplacez la dernière ligne :

<tscreen><verb>
rdev /mnt/linux /dev/ram0
</verb></tscreen>

par

<tscreen><verb>
rdev /mnt/linux /dev/sda1
</verb></tscreen>

Il faudra aussi remplacer toutes les occurrences de <tt>/mnt/linux</tt> par
le chemin approprié. Comme je monte mes disquettes sous <tt>/fd0</tt>, j'ai
dû changer <tt>/mnt/linux</tt> en <tt>/fd0/linux</tt>.

<sect2>Lancer le script <tt/`rdev.sh'/ modifié

<p>
<bf> ==> ./rdev.sh</bf>

<sect1>Installer le système de base sur le disque ZIP

<p>
Démarrez à partir du disque de secours. Si tout se passe bien vous retrouverez
le processus d'installation à base de menu de la Debian, sauf qu'il sait
maintenant que votre disque ZIP ppa existe. Effectuez l'installation
normalement, comme s'il s'agissait d'un disque dur, mais montez
<tt>/dev/sda1</tt> comme racine et choisissez <tt>/dev/sda2</tt> comme swap.

<p>
Il y a une différence par rapport au processus d'installation standard --
n'installez pas et ne configurez pas de modules chargeables. Vous installerez les
modules que vous avez compilés à l'étape 7.3.2 plus tard.


<sect1>Création de la disquette de démarrage

<p>
Vous pouvez créer la disquette de démarrage comme décrit aux étapes 3.3.1 
à 3.3.2,
ou, si vous préférez, utiliser simplement l'option ``Create Boot Disk''
pendant l'installation Debian. J'aime bien la seconde possibilité car elle
me permet d'avoir une autre disquette de démarrage SYSLINUX dans laquelle je
peux modifier le message de bienvenue pour décrire la nature de ce disque de
démarrage personnalisé et ajouter des paramètres noyau. Vous pouvez même
inclure des fichiers d'aide accessibles depuis les touches de
fonctions. Vous pouvez également recompiler le noyau et modifier à la main
la disquette pour enlever le support RAM disk. À vous de voir.

<sect1>Redémarrer le système

<p>
Insérez votre disquette de démarrage et choisissez l'option ``Reboot'' du
menu d'installation.

<sect1>Configuration du système de base et poursuite de l'installation

<p>
Quand le système redémarre vous avez une installation de base Debian tout à
fait utilisable (mais lente) depuis votre disque ZIP ppa. Continuez
l'installation normalement. j'ai installé tous les utilitaires UNIX
classiques, avec les documentations, make, gcc, les bibliothèques
(<it/libraries/), et divers utilitaires de manipulation de fichiers. Le
résultat est un système de démarrage de secours très puissant que je peux
utiliser pour ``secourir'' :-) n'importe lequel des systèmes de mon
département qui aurait un gros problème.

<tscreen><code>
NOTE : vous devrez au moins installer ``make'' pour réaliser l'étape suivante.
</code></tscreen>

<sect1>Installation des modules que vous avez construits en <ref
id="sec:noyau_zip" name="Construction d'un noyau avec le support ZIP ppa">

<p>
Si vous avez installé <tt/make/ à l'étape précédente, vous devriez pouvoir
monter la partition du disque dur qui contient votre noyau, aller dans le
répertoire approprié et lancer <tt/make modules_install/. Par exemple :
<p>
<bf> ==> mount /dev/hda2 /mnt </bf>
<p>
<bf> ==> cd /mnt/usr/src/linux </bf>
<p>
<bf> ==> make modules_install </bf>

<tscreen><code>
NOTE : vous n'aurez pas à modifier le fichier /etc/fstab, comme expliqué à
l'étape 5. Le processus d'installation Debian s'en est déjà occupé.
</code></tscreen>
<sect>Épilogue

<p>
Yahou, et snif. Après avoir entassé 31 disques ZIP et un pack de batteries
pour ZIP autonome, mon aventure suivante est de faire fonctionner le pcmcia
sur mon transportable (NdT&nbsp;: Il faut bien que je m'amuse aussi).

</article>













