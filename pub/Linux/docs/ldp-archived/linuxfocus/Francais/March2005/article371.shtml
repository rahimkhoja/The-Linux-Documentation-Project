<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf371, SoftwareDevelopment: Optimiser les programmes C/C+ + en utilisant GProf profiler</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Arnout Engelen
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Optimiser les programmes C/C+ + en utilisant GProf profiler
 =LF=NUMBER: 371
 =LF=ANAME_: article371.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Carte</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Recherche</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Nouvelles</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Liens</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">A propos</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Ce document est disponible en: <A href="../../English/March2005/article371.shtml">English</a> &nbsp;<A href="../../ChineseGB/March2005/article371.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/March2005/article371.shtml">Deutsch</a> &nbsp;<A href="../../Francais/March2005/article371.shtml">Francais</a> &nbsp;<A href="../../Russian/March2005/article371.shtml">Russian</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<IMG SRC="../../common/images2/ArnoutEngelen.png" ALT="Arnout Engelen" width="164" height="200">
<BR>par  Arnout Engelen <br> <small>&lt;arnouten(Q)bzzt.net&gt;</small>
<BR><BR>
<I>L&acute;auteur:</I><BR>
<!-- aboutauthor_start -->
<P>
Arnout Engelen est &eacute;tudiant en informatique &agrave; l'universit&eacute; de Nijmegen,
Pays-Bas et est employ&eacute; chez TUNIX, une entreprise sp&eacute;cialis&eacute;e dans la
s&eacute;curit&eacute; Internet. Durant son temps libre, il aime courir et jouer du
saxophone.
</P>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO fr -->
<BR><BR><I>Traduit en Français par:</I><BR>
Florent Morel <small>&lt;fleuh-(at)-free.fr&gt;</small>
<br>
<!--
 =LF=TRANSTO=fr: Florent Morel
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Sommaire</i>:
<UL>
  <LI><A HREF="#371lfindex0">Le Profiling en quelques mots</A></LI>
  <LI><A HREF="#371lfindex1">Etude de cas : Pathalizer</A></LI>
  <LI><A HREF="#371lfindex2">Mesurer le temps d'ex&eacute;cution de l'application</A></LI>
  <LI><A HREF="#371lfindex3">Le profiling</A></LI>
  <LI><A HREF="#371lfindex4">L'optimisation</A></LI>
  <LI><A HREF="#371lfindex5">R&eacute;sultats</A></LI>
  <LI><A HREF="#371lfindex6">Second passage</A></LI>
  <LI><A HREF="#371lfindex7">Autres profilers C/C++</A></LI>
  <LI><A HREF="#371lfindex8">Profiling avec d'autres langages</A></LI>
  <LI><A HREF="#371lfindex9">Conclusion</A></LI>
  <LI><A HREF="#371lfindex10">R&eacute;f&eacute;rences</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_03-0371.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>Optimiser les programmes C/C+ + en utilisant GProf profiler</H2>
 <IMG SRC="../../common/images2/article371/profilingpicture.png" ALT="Profiling with GProf" HSPACE=10 width="400" height="63">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>R&eacute;sum&eacute;</i>:
<P>
<!-- articleabstract_start -->

Une des choses les plus importantes qu'il est bon de garder en t&ecirc;te lorsque
l'on souhaite optimiser une application est : optimiser l&agrave; o&ugrave; c'est utile.
Cela ne sert &agrave; rien de passer des heures &agrave; optimiser un morceau de code qui
met 0.04 secondes &agrave; s'ex&eacute;cuter.
<p>
GProf fournit une fa&ccedil;on &eacute;tonnament simple de profiler (&eacute;tudier le temps
d'ex&eacute;cution) vos applications C/C++ et met en lumi&egrave;re les parties
int&eacute;ressantes tr&egrave;s rapidement. Une courte &eacute;tude de cas montre comment GProf
fut utilis&eacute; pour r&eacute;duire la dur&eacute;e d'ex&eacute;cution d'une application. En
identifiant 2 structures de donn&eacute;es importantes et en les optimisant, nous
sommes pass&eacute;s de 3 minutes &agrave; moins de 5 secondes.
<p>
Historiquement, le programme remonte &agrave; 1982, quand il fut introduit dans le
Symposium SIGPLAN sur la construction de compilateurs. C'est maintenant un
outil standard disponible sur pratiquement toutes les formes d'UNIX.

<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


<A NAME="371lfindex0">&nbsp;</A>
<H2>Le Profiling en quelques mots</H2>


Le concept du profiling est vraiment tr&egrave;s simple : en enregistrant l'heure
d'entr&eacute;e et de sortie de chaque fonction, il est possible de calculer quelles
sont les parties du code qui prennent le plus de temps. Effectuer ces mesures
semble &ecirc;tre une t&acirc;che n&eacute;cessitant beaucoup d'efforts - heureusement, ce n'est
pas le cas. C'est si simple qu'il suffit de compiler en rajoutant une option
gcc ('-pg'), lancer le programme (pour collecter les informations de
profiling) et de lancer 'gprof' sur le fichier contenant les statistiques
d'ex&eacute;cution afin de les pr&eacute;senter d'une mani&egrave;re plus agr&eacute;able.

<A NAME="371lfindex1">&nbsp;</A>
<H2>Etude de cas : Pathalizer</H2>


<p>
Je vais prendre le cas d'une r&eacute;elle application, qui fait partie de
<a href="http://pathalizer.bzzt.net">pathalizer</a> : l'ex&eacute;cutable
<code>event2dot</code> qui traduit un fichier '&eacute;v&egrave;nements' de pathalizer en un
fichier contenant un graphique sous forme de points (format graphviz).
<p>
Pour r&eacute;sumer, il lit les &eacute;v&egrave;nements depuis un fichier, les stocke sous forme
de graphes (les pages sont transpos&eacute;es en noeuds et les transitions entre
pages en bords). Cette collection de graphes est ensuite 'condens&eacute;e' en un
gros graphe qui est imprim&eacute; sous forme de points au format graphviz.

<A NAME="371lfindex2">&nbsp;</A>
<H3>Mesurer le temps d'ex&eacute;cution de l'application</H3>

En premier lieu, nous lan&ccedil;ons le programme que nous voulons optimiser sans
profiling et mesurons le temps d'ex&eacute;cution. Les sources utilis&eacute;es sont
fournies ainsi qu'un fichier exemple d'entr&eacute;e d'une taille consid&eacute;rable
(55 000 lignes).
<p>
Sur ma machine, l'ex&eacute;cution de <code>event2dot</code> met plus de 3 minutes
avec ce fichier :
<pre class="code">
real    3m36.316s
user    0m55.590s
sys     0m1.070s
</pre>

<A NAME="371lfindex3">&nbsp;</A>
<H3>Le profiling</H3>

Pour permettre le profiling, il suffit d'ajouter l'option '-pg' lors de la
compilation. Recompilons donc l'application avec cette option :
<pre class="code">
g++ -pg dotgen.cpp readfile.cpp main.cpp graph.cpp config.cpp -o event2dot
</pre>
<p>
Nous pouvons maintenant lancer <code>event2dot</code> &agrave; nouveau sur notre
fichier « test-events ». Durant cette ex&eacute;cution, les informations de profiling
concernant <code>event2dot</code> vont &ecirc;tre r&eacute;cup&eacute;r&eacute;es et un fichier
'gmon.out' sera g&eacute;n&eacute;r&eacute;. Visualisons les r&eacute;sultats en lan&ccedil;ant
'gprof <code>event2dot</code> | less'.
<p>
gprof montre que les fonctions suivantes sont importantes :
<pre class="code">
 % cumulative  self              self     total
 time seconds  seconds  calls s/call s/call name
43.32   46.03  46.03 339952989  0.00  0.00 CompareNodes(Node *,Node *)
25.06   72.66  26.63    55000   0.00  0.00 getNode(char *,NodeListNode *&amp;)
16.80   90.51  17.85 339433374  0.00  0.00 CompareEdges(Edge *,AnnotatedEdge *)
12.70  104.01  13.50    51987   0.00  0.00 addAnnotatedEdge(AnnotatedGraph *,Edge *)
 1.98  106.11   2.10    51987   0.00  0.00 addEdge(Graph *,Node *,Node *)
 0.07  106.18   0.07        1   0.07  0.07 FindTreshold(AnnotatedEdge *,int)
 0.06  106.24   0.06        1   0.06 28.79 getGraphFromFile(char *,NodeListNode *&amp;,Config *)
 0.02  106.26   0.02        1   0.02 77.40 summarize(GraphListNode *,Config *)
 0.00  106.26   0.00    55000   0.00  0.00 FixName(char *)
</pre>

La colonne la plus int&eacute;ressante est la premi&egrave;re : il s'agit du pourcentage
de temps d'ex&eacute;cution du programme pris par cette fonction.

<A NAME="371lfindex4">&nbsp;</A>
<H3>L'optimisation</H3>


Cela montre que le programme passe presque la moiti&eacute; du temps dans la
fonction <code>CompareNodes</code>. Un rapide grep montre que CompareNodes
n'est appel&eacute;e que par <code>CompareEdges</code>, qui elle-m&ecirc;me n'est appel&eacute;e
que par <code>addAnnotatedEdge</code> - ces deux fonctions &eacute;tant aussi dans
la liste. Cela semble donc &ecirc;tre un bon point de d&eacute;part pour r&eacute;aliser
l'optimisation.

<p>
Nous avons remarqu&eacute; que <code>addAnnotatedEdge</code> traverse une liste
cha&icirc;n&eacute;e. Bien que facile &agrave; impl&eacute;menter, une liste cha&icirc;n&eacute;e n'est pas le
meilleur type de donn&eacute;es. Nous d&eacute;cidons de remplacer g-&gt;edges par un arbre
binaire : cela devait permettre d'acc&eacute;l&eacute;rer sensiblement les recherches, en
laissant la possibilit&eacute; de le parcourir.

<A NAME="371lfindex5">&nbsp;</A>
<H3>R&eacute;sultats</H3>

Nous pouvons remarquer la r&eacute;duction du temps d'ex&eacute;cution :
<pre class="code">
real    2m19.314s
user    0m36.370s
sys     0m0.940s
</pre>
<A NAME="371lfindex6">&nbsp;</A>
<H3>Second passage</H3>

Lancer gprof &agrave; nouveau r&eacute;v&egrave;le :
<pre class="code">
%   cumulative self           self    total
 time   seconds seconds calls  s/call  s/call name
87.01     25.25  25.25  55000    0.00    0.00 getNode(char *,NodeListNode *&amp;)
10.65     28.34   3.09  51987    0.00    0.00 addEdge(Graph *,Node *,Node *)
</pre>
Il semble que les fonctions qui prenaient plus de la moiti&eacute; du temps ont
maintenant &eacute;t&eacute; r&eacute;duites &agrave; une dur&eacute;e n&eacute;gligeable ! Essayons &agrave; nouveau :
rempla&ccedil;ons NodeList par une NodeHashTable.
<p>
C'est aussi une r&eacute;elle am&eacute;lioration :
<pre class="code">
real    0m3.269s
user    0m0.830s
sys     0m0.090s
</pre>

<A NAME="371lfindex7">&nbsp;</A>
<H2>Autres profilers C/C++</H2>


<img src="../../common/images2/article371/shot.png" align="right" width="565" height="337">
Plusieurs profilers disponibles utilisent les donn&eacute;es de gprof, c'est le cas
de <a href="http://kprof.sf.net">KProf</a> (capture d'&eacute;cran) et de
<a href="http://mvertes.free.fr/">cgprof</a>. Bien que l'interface graphique
soit agr&eacute;able, je pense que la ligne de commande de gprof est plus efficace.
<br clear="all">

<A NAME="371lfindex8">&nbsp;</A>
<H2>Profiling avec d'autres langages</H2>


Ce tutoriel pr&eacute;sente le profiling d'applications C/C++ avec gprof, mais il
est possible de le faire pour d'autres langages : pour Perl, utilisez le
module Devel::DProf. Lancez l'application avec
<code>perl -d:DProf mycode.pl</code> et visualsez les r&eacute;sultats avec
<code>dprofpp</code>. Si vous pouvez compiler vos programmes Java avec gcj,
vous pouvez utiliser gprof, bien que l'utilisation soit limit&eacute;e &agrave; une seule
thread.

<A NAME="371lfindex9">&nbsp;</A>
<H2>Conclusion</H2>


Nous avons vu que, en utilisant le profiling, il est possible de trouver des
portions d'une application pouvant b&eacute;n&eacute;ficier d'une optimisation. En
optimisant l&agrave; o&ugrave; c'est utile, nous avons r&eacute;duit le temps d'ex&eacute;cution de
l'application test&eacute;e de 3min36s &agrave; moins de 5 secondes.

<A NAME="371lfindex10">&nbsp;</A>
<H2>R&eacute;f&eacute;rences</H2>

<ul>
<li>Pathalizer:   <a
href="http://pathalizer.sf.net">http://pathalizer.sf.net</a><br><br>
<li>KProf:        <a
href="http://kprof.sf.net">http://kprof.sf.net</a><br><br>
<li>cgprof:       <a
href="http://mvertes.free.fr">http://mvertes.free.fr</a><br><br>
<li>Devel::DProf  <a
href="http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html">http://www.perldoc.com/perl5.8.0/lib/Devel/DProf.html</a><br><br>
<li>gcj:          <a
href="http://gcc.gnu.org/java">http://gcc.gnu.org/java</a><br><br>
<li>Fichiers d'exemples de pathalizer :         <a href="../../common/src2/article371/index.html">download for article371</a><br><br>
</ul>


<!-- vim: set sw=2 ts=2 et tw=74: -->

<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=371">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Sommaire</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Sommaire de ce num&eacute;ro</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Site Web maintenu par l&acute;&eacute;quipe d&acute;&eacute;dition LinuxFocus</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Arnout Engelen</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Arnout Engelen <small>&lt;arnouten(Q)bzzt.net&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; fr: Florent Morel &lt;fleuh-(at)-free.fr&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-04-14, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
