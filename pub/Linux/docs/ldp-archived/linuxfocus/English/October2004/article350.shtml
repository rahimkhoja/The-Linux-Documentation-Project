<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.50">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf350, SoftwareDevelopment: Platform Independent Software Develoment</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Michael     Tschater
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: Platform Independent Software Develoment
 =LF=NUMBER: 350
 =LF=ANAME_: article350.shtml
 =LF=PARSER: 2.50
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Map</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Search</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.html"><FONT color=
           "#FFFFFF">News</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">About LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/October2004/article350.shtml">English</a> &nbsp;<A href="../../ChineseGB/October2004/article350.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/October2004/article350.shtml">Deutsch</a> &nbsp;<A href="../../Francais/October2004/article350.shtml">Francais</a> &nbsp;<A href="../../Italiano/October2004/article350.shtml">Italiano</a> &nbsp;<A href="../../Russian/October2004/article350.shtml">Russian</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/MichaelTschater.jpg" alt="[Photo of the Author]" width="182" height="186">
<BR>by  Michael Tschater <br> <small>&lt;tschater/at/web.de&gt;</small>
<BR><BR>
<I>About the author:</I><BR>
<!-- aboutauthor_start -->
<p>Michael is primarily busy with hardware related software
    development (firmware). For his current project an additional
    decision on the strategy of the development environment - to be
    utilized for the programming of the front-end of his firmware -
    has to be made.<br></p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO en -->
<BR><BR><I>Translated to English by:</I><BR>
J&uuml;rgen Pohl <small>&lt;sept.sapins/at/verizon.net&gt;</small>
<br>
<!--
 =LF=TRANSTO=en: J&uuml;rgen Pohl
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Content</i>:
<UL>
  <LI><A HREF="#350lfindex0">Programming Languages</A></LI>
  <LI><A HREF="#350lfindex1">A Sample Application</A></LI>
  <LI><A HREF="#350lfindex2">C/C++ Libraries</A></LI>
  <LI><A HREF="#350lfindex3">Trolltech Qt</A></LI>
  <LI><A HREF="#350lfindex4">Qt Overview</A></LI>
  <LI><A HREF="#350lfindex5">wxWidgets</A></LI>
  <LI><A HREF="#350lfindex6">Overview of wxWidgets</A></LI>
  <LI><A HREF="#350lfindex7">GTK+ (with gtkmm)</A></LI>
  <LI><A HREF="#350lfindex8">GTK+ Overview</A></LI>
  <LI><A HREF="#350lfindex9">FLTK</A></LI>
  <LI><A HREF="#350lfindex10">FLTK Overview</A></LI>
  <LI><A HREF="#350lfindex11">FOX Toolkit</A></LI>
  <LI><A HREF="#350lfindex12">FOX overview</A></LI>
  <LI><A HREF="#350lfindex13">Other possibilities</A></LI>
  <LI><A HREF="#350lfindex14">JAVA</A></LI>
  <LI><A HREF="#350lfindex15">Platform-independent</A></LI>
  <LI><A HREF="#350lfindex16">Object Orientation</A></LI>
  <LI><A HREF="#350lfindex17">Language Syntax</A></LI>
  <LI><A HREF="#350lfindex18">Class Library</A></LI>
  <LI><A HREF="#350lfindex19">Security</A></LI>
  <LI><A HREF="#350lfindex20">Suitability for Projects
    </A></LI>
  <LI><A HREF="#350lfindex21">Java Development Kit (JDK)</A></LI>
  <LI><A HREF="#350lfindex22">JHelloWorld</A></LI>
  <LI><A HREF="#350lfindex23">JavaScript and Java</A></LI>
  <LI><A HREF="#350lfindex24">Attempts to Standardization</A></LI>
  <LI><A HREF="#350lfindex25">Dekompilierung</A></LI>
  <LI><A HREF="#350lfindex26">Miracle Language Or Short-lived Hype</A></LI>
  <LI><A HREF="#350lfindex27">GUIs with Java</A></LI>
  <LI><A HREF="#350lfindex28">SWT and Eclipse
    </A></LI>
  <LI><A HREF="#350lfindex29">Abbreviations used in context with JAVA</A></LI>
  <LI><A HREF="#350lfindex30">Java Overview</A></LI>
  <LI><A HREF="#350lfindex31">Kylix</A></LI>
  <LI><A HREF="#350lfindex32">Kylix Overview</A></LI>
  <LI><A HREF="#350lfindex33">Smalltalk</A></LI>
  <LI><A HREF="#350lfindex34">Overview of Smalltalk</A></LI>
  <LI><A HREF="#350lfindex35">Mozilla</A></LI>
  <LI><A HREF="#350lfindex36">Overview Of Mozilla
    </A></LI>
  <LI><A HREF="#350lfindex37">Microsoft's Answer</A></LI>
  <LI><A HREF="#350lfindex38">What is .NET ?</A></LI>
  <LI><A HREF="#350lfindex39">What Is Visual Studio .NET ?</A></LI>
  <LI><A HREF="#350lfindex40">Differences Between Visual Basic (VB) And VB .NET</A></LI>
  <LI><A HREF="#350lfindex41">Which Programming Language Is The Best Suitable?</A></LI>
  <LI><A HREF="#350lfindex42">.NET And Linux</A></LI>
  <LI><A HREF="#350lfindex43">Overview Of .NET</A></LI>
  <LI><A HREF="#350lfindex44"> Summary</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=350">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Platform Independent Software Develoment</H2>
 <img hspace="10" alt="[Illustration]" src="../../common/images2/article350/osindep.gif" width="269" height="240">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Abstract</i>:
<P>
<!-- articleabstract_start -->

    Almost all equipment used in industry may be controlled over a
    network. The user interface runs on off-the-shelf hardware and
    works as a simple client, receiving and sending data, not time
    critcal (e.g. initializing parameters and measurement results).
    In the following diagram this is shown in green: <br><img alt="[gui frontend]" src="../../common/images2/article350/frontend_en.png" width="560" height="220"><br>
     Software projects often require an answer to the question
    which operating systems shall be supported. While the readers
    of this magazine tend to lean toward Linux, also other
    operating systems (mostly Windows) are requested. In principle,
    the operating system to be used does not present a dominating
    issue for the application; the user has to be able arrive at
    the results intuitively. <br>
    The following article shall demonstrate that a decision on a
    specific platform is not required since it is feasable to write
    software which can be compiled for various operating systems.
    This article shall be limited to PCs with Linux and Windows. It
    should be possible to use the applications also on Mac and
    MacOSX but this could not be demostrated due to missing
    hardware. <br>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->

    With platform-independent libraries we differentiate between
    two approaches to produce controls in dialogs: <br>


    <ol>
      <li>Native libraries: For the display of elements the
      corresponding routines of the operating system are utilized.
      This assures that all controls appear like the standard
      application of the operating system. A native library
      presents controls differently under Linux than under Windows
      2000 or XP.<br>
      </li>

      <li>The second possibility is to program an appropriate look
      &amp; feel, meaning all controls are to be displayed by the
      library and appear identical in all operating systems.<br>
      </li>
    </ol>
    Besides the technical quaracteristics of the libraries
    additional operational factors play a role which shall be
    compared: <br>


    <ul>
      <li>Development environment: an integrated development
      environment (e.g. GUI builder, makefile generator) simplifies
      the software development.</li>

      <li>Documentation and support: immediate help in case of
      occurring problems.</li>

      <li>Costs: While most libraries are freely available for
      private use, for commercial applications sometimes costs
      inccur. For fundamental decisions on software projects such
      costs have to be justified to the decision makers.</li>

      <li>Actual costs for the porting between systems</li>
    </ul>
    In an actual case another issue has to be taken in
    consideration; this does, however, not apply to all projects:
    <br>


    <ul>
      <li>The software produced shall utilize native controls to
      integrate seemlessly into the existing system architecture.
      The user should not be able to identify differences between
      new and the existing software on the system.<br>
      </li>
    </ul>
    By displaying the libraries in a layer-model the following
    picture emerges: <br>


    <center>
      <img src="../../common/images2/article350/layer_en.gif" alt="layer-model" width="496" height="214">
    </center>

    <A NAME="350lfindex0">&nbsp;</A>
<H2>Programming Languages</H2>

    The first criteron to be selected is the programming language.
    There are several choices which will be discussed below: <br>


    <ol>
      <li>C/C++ libraries</li>

      <li>Java</li>

      <li>Kylix</li>

      <li>Smalltalk</li>

      <li>Mozilla</li>
    </ol>
    The alternatives to C and C++ will be explained more in detail
    since they are less established with software developers. <br>
     <br>


    <A NAME="350lfindex1">&nbsp;</A>
<H2>A Sample Application</H2>

    To be able to compare the various software packages a sample
    application, using all libraries, shall be generated. The
    implementation of the application does not possess any
    functionality but it shows the most important controls. For the
    windows page pure Windows software will be created (Visual C++
    6.0, MFC Class-Library), the other packages will be compared to
    it in regard to look &amp; feel. As linux distribution I will
    use RedHat Fedora Core 2 and Debian 3.0. <br>


    <center>
      <table border="0">
        <tr>
          <td><a href=
          "../../common/images2/article350/msvc_win2000.jpg"><img alt="Windows 2000 Screenshot" src="../../common/images2/article350/msvc_win2000_th.jpg" border="0" width="280" height="210"></a></td>

          <td><a href=
          "../../common/images2/article350/msvc_winxp.jpg"><img alt="Windows XP Screenshot" src="../../common/images2/article350/msvc_winxp_th.jpg" border="0" width="280" height="210"></a></td>
        </tr>
      </table>
      <br>
       Windows 2000 and Windows XP Screenshot (source code for
      Visual C++ <a href=
      "../../common/src2/article350/win32_src.zip">here
      (win32_src.zip)</a>).<br>
    </center>

    <A NAME="350lfindex2">&nbsp;</A>
<H2>C/C++ Libraries</H2>


    <A NAME="350lfindex3">&nbsp;</A>
<H3>Trolltech Qt</H3>

    Qt is a class library of the Norwegian company Trolltech for
    platform-independant programming with C++. The Linux window
    manager KDE is based on the Qt package. Originally, Qt was
    under a license which was not acceptable for many Linux users.
    For this reason the GTK+-library was developed, which is the
    basis for the Gnome window manager. In the meantime, the
    Linux-version, as well as the MacOS-version, is available under
    the GPL, including all source code. Qt for Windows is still
    available commercially. A time-limited test version for
    evaluations may be downloaded from the webpage - it will be
    differentiated between commercial application or academic use.
    In the following the commercial evaluation version will be
    explained. This version requires registration. <br>
     <br>
    Besides the versions for Windows, Linux(Unix) and Mac an
    embedded version is available, it runs on embedded Linux
    variants and offers a leaner window administration. <br>
    <br>
    The installation under Linux completes as expected without any
    problem. Included is the GUI generator Qt Designer. The
    detailed documentation example projects, quick start guide and
    class overview. Qt Designer generates as output an XML
    description of the GUI. Using the Qt-Tool qmake you can
    generate a valid Makefile from the XML description. This
    Makefile generates then from the GUI description C++ source
    code (Qt-Tool: uic) and calls the Meta Object Compiler
    (Qt-Tool: moc). The later translates Qt specific language
    extentions into C++ source code. After that a standard make
    procedure to compile the executable can be used. <br>
    <br>
    The following sequence is needed to generate the source files
    manually (Input file is MyDialog.ui):

    <ul>
      <li>uic MyDialog.ui &gt; MyDialog.h</li>

      <li>uic -impl MyDialog.h MyDialog.ui &gt; MyDialog.cpp</li>

      <li>moc -o moc_MyDialog.cpp MyDialog.h</li>
    </ul>
    <br>

    <center>
      <table>
        <tr>
          <td><a href=
          "../../common/images2/article350/qt_linux.png"><img src="../../common/images2/article350/qt_linux_th.png" alt="qt linux"  width="280" height="210"></a></td>

          <td><a href=
          "../../common/images2/article350/qt_win.jpg"><img src="../../common/images2/article350/qt_win_th.jpg" alt="qt win"  width="280" height="210"></a></td>
        </tr>
      </table>
      <br>
      Linux and Windows 2000 Screenshot (source code for QtDesigner
      <a href="../../common/src2/article350/qt_src.tar.gz">here
      (qt_src.tar.gz)</a>
    </center>

    <A NAME="350lfindex4">&nbsp;</A>
<H3>Qt Overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tr>
        <td>Name:<br>
        </td>

        <td>Trolltech Qt<br>
        </td>
      </tr>

      <tr>
        <td>Version:<br>
        </td>

        <td>3.3.2<br>
        </td>
      </tr>

      <tr>
        <td>Operating Systems:<br>
        </td>

        <td>Linux, Win32, MacOS, Solaris, IRIX, AIX, HP-UX<br>
        </td>
      </tr>

      <tr>
        <td>Programing language:<br>
        </td>

        <td>C++<br>
        </td>
      </tr>

      <tr>
        <td>License:<br>
        </td>

        <td>GPL or proprietary License (commercial)<br>
        </td>
      </tr>

      <tr>
        <td>Advantages:</td>

        <td>
          <ul>
            <li>base library for KDE Windows Manager in Linux</li>

            <li>installation packages in all standard distributions
            (installation very simple)<br>
            </li>

            <li>generic controls under Windows</li>

            <li>mighty development environment(s)</li>

            <li>proven<br>
            </li>

            <li>migrations support for Win32 MFC applications
            allows incremental conversion of MFC source code.<br>
            </li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Disadvantages:</td>

        <td>
          <ul>
            <li>possible license costs (expensive)</li>

            <li>Evaluation software produces errors during the
            installation under windows</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Development environment:<br>
        </td>

        <td>e.g. QtDesigner, KDevelop<br>
        </td>
      </tr>

      <tr>
        <td>WWW:</td>

        <td><a href=
        "http://www.trolltech.com/">http://www.trolltech.com</a></td>
      </tr>

      <tr>
        <td>Documentation:<br>
        </td>

        <td>manuals, tutorials, mailing lists<br>
         e.g. <a href=
        "http://doc.trolltech.com/3.3/index.html">http://doc.trolltech.com/3.3/index.html</a><br>

        </td>
      </tr>

      <tr>
        <td>Reference projects:<br>
        </td>

        <td>
          <ul>
            <li>KDE Desktop (Default e.g. with SuSE)<br>
            </li>

            <li>Opera Browser</li>

            <li>Photoshop Album</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Distribution:<br>
        </td>

        <td>very wide spread<br>
        </td>
      </tr>
    </table>

    <p><br>
    </p>

    <A NAME="350lfindex5">&nbsp;</A>
<H3>wxWidgets</H3>

    The wxWidgets toolkit is available since some 12 years, but
    only a few month ago the package got its today's name. The name
    wxWindows, used until that time, was abandoned after "talks"
    with Microsoft. wxWidgets includes a huge collection of classes
    for all application areas. The list of reference applications
    demonstrates the maturity of the software package. <br>
     <br>
    Programming is being done in C++, it is similar to Visual C++
    under Windows. <br>
     <br>
    A disadvantage is that you get with wxWindows2.4.2 under RedHat
    Fedora Core 2 errors when compiling the example programs. The
    cause are GTK+ calls which are declared private in the from
    RedHat patched GTK+ version. Calling those functions is
    therefore not allowed. However those are minor problems.
    Everything will run without problems when the standard GTK+
    library is used. Under Debian everything worked right away.
    <br>
    <br>
    The installation under Windows worked without problems. <br>
    <br>


    <center>
      <table>
        <tr>
          <td><a href=
          "../../common/images2/article350/wx_linux.png"><img src="../../common/images2/article350/wx_linux_th.png" alt="wxWidgets on Linux screenshot" hspace="5"  width="280" height="224">
          </a></td>

          <td><a href=
          "../../common/images2/article350/wx_win32.jpg"><img src="../../common/images2/article350/wx_win32_th.jpg" alt="wxWidgets on Windows screenshot" hspace="5"  width="280" height="210">
          </a></td>
        </tr>
      </table>
      <br>
      Linux  and Windows 2000 Screenshot (source code
      for <a href=
      "../../common/src2/article350/wx_src.zip">here (wx_src.zip)</a>).
    </center>
    <br>


    <A NAME="350lfindex6">&nbsp;</A>
<H3>Overview of wxWidgets</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>wxWidgets<br>
          </td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td>2.4.2<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Linux, Win32, embedded devices<br>
          </td>
        </tr>

        <tr>
          <td>Programming Language:<br>
          </td>

          <td>C++<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>LGPL
          </td>
        </tr>

        <tr>
          <td>Advantages:</td>

          <td>
            <ul>
              <li>simple handling (many examples).<br>
              </li>

              <li>very good documentation.</li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>
            <ul>
              <li>Problems with the combination: Fedora Core 2 -
              wxWindows2.4.2</li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://www.wxwidgets.org/">http://www.wxwidgets.org</a><br>

          </td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>manuals, tutorials, mailing lists, wiki<br>
           e.g. <a href=
          "http://wiki.wxwidgets.org/">http://wiki.wxwidgets.org</a></td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td>AOL Communicator</td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>not wide spread<br>
          </td>
        </tr>
      </tbody>
    </table>

    <p><br>
    </p>

    <A NAME="350lfindex7">&nbsp;</A>
<H3>GTK+ (with gtkmm)</H3>

    The acronym stands for "The GIMP Toolkit". The two well-known
    projects are the Gnome Windows Manger - part of any Linux
    standard distribution - and the graphic application GIMP. Gnome
    is the second major desktop environment - besides KDE (see Qt)
    - under Linux. It is the default environment of many
    distributions . With the introduction of GTK+ version 2 the
    look &amp; feel has been substantially improved. <br>
     <br>
    One particularity of GTK+ is its complete implementation in C.
    Consequently, the GUI builder <i>glade2</i> produces C-code. By
    using <i>gtkmm</i> (formerly GTK--) programming can also be
    done in C++. <br>
     <br>
    Contrary to the professional appearance of GTK+ for Linux,
    'GTK+ for Win32' is not impressive. Clicking on the link on the
    GTK+-mainpage immediately results in the warning "<b>The
    program(s) might crash unexpectedly or behave otherwise
    strangely ".</b> (But of course, so do many commercial programs
    on Windows.) The stability seems to depend a lot on the
    machine, display drivers, other software installed or not
    present (status 2004-09-06). The courageous software developer
    clicks on the download page anyway and faces a long list of
    individual software components for downloading. For a
    comprehensive package, one searches in vain. Instead of that an
    instruction on how to install a number of software components
    can be read and to return to the download page if some specific
    components are missing. This matches the statement of the 'GTK+
    for Windows' webpage: "You are expected to be quite experienced
    to be able to use GTK+ in your own programs. This isn't Visual
    Basic." After installing the initial components and an
    unsuccessful attempt to start one of the sample applications,
    most of the developers may have lost their desire to get deeper
    into it. The very unprofessional presentation of the 'GTK+ for
    Win32' components disqualify the software 'package' for any
    professional application. <br>
     <br>
     <br>


    <center>
      <a href="../../common/images2/article350/gtk.png"><img alt="GTK+ screenshot" src="../../common/images2/article350/gtk_th.png" width="280" height="210"></a><br>
       GTK+ Screenshot for Linux (source code for glade2 <a href=
      "../../common/src2/article350/gtk_src.tar.gz">
      here (gtk_src.tar.gz)</a>)
    </center>

    <A NAME="350lfindex8">&nbsp;</A>
<H3>GTK+ Overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>GTK+ - The GIMP Toolkit<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Linux, Win32<br>
          </td>
        </tr>

        <tr>
          <td>Programming languages:<br>
          </td>

          <td>C (C++ mit gtkmm)<br>
          </td>
        </tr>

        <tr>
          <td>License<br>
          </td>

          <td>LGPL<br>
          </td>
        </tr>

        <tr>
          <td>Advantages:<br>
          </td>

          <td>
            <ul>
              <li>base library for Gnome Windows Manager under
              Linux</li>

              <li>installation package included in all standard
              distributions (installation very simple)<br>
              </li>

              <li>generic controls under Windows</li>

              <li>well-proven (under Linux)<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>
            <ul>
              <li>Win32 implementation is unwieldy, does not run
              stable (status 09-2004)<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td>e.g. <i>2glade</i> (GUI Builder), Anjuta</td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://www.gtk.org/">http://www.gtk.org</a></td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>manuals, tutorials, mailing lists<br>
           e.g. <a href=
          "http://developer.gnome.org/doc/API/2.0/gtk/index.html">http://developer.gnome.org/doc/API/2.0/gtk/index.html</a><br>

          </td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td>
            <ul>
              <li>Gnome Desktop</li>

              <li>GIMP</li>

              <li>Gnumeric<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>Linux: very wide spread, Windows: marginal
          distribution<br>
          </td>
        </tr>
      </tbody>
    </table>
    <br>
     <br>


    <A NAME="350lfindex9">&nbsp;</A>
<H3>FLTK</H3>

    FLTK Toolkit ((Fast, Light Tool Kit) is a largely unknown
    package, it was implemented as successor of <a href=
    "http://freshmeat.net/projects/xforms/">XForms</a>. The
    complete sources are being offered for downloading from the
    program's website. The size of 2.3MB (Linux) or 3MB (Windows)
    proves its name. Installation under Linux without a hitch:
    unpacking and run '<i>make</i>', finished. Subsequently the
    user has libraries, sample applications, the GUI builder
    "<i>fluid</i>" and a programming handbook at his (her)
    disposal. Obviously the number of classes at disposal is
    smaller than those of the heavy-weights of Qt and wxWindows.
    The classes included cover the GUI domain, meaning: windows,
    menus, controls, OpenGL and display of pictures. Classes for
    network communication and such are not included. <br>
     <br>
    The installation under Windows was more complicated. When using
    the Visual C++ Development Environment only the main project
    needs to be translated. This causes however problems with the
    graphic libraries. A simple solution is to uncomment them in
    the config.h configuration file. A second Windows speific
    feature is that the DEBUG version of the FLTK library opens
    always an additional DOS window. This ensures that programs
    which are started from the command line will be able to write
    to stderr and stdout. <br>
     <br>
    All together the FLTK Toolkit leaves the impression of being
    well thought-out. The documentation emphasizes the small size
    of the executables (80kb for a "hello world") and lean fast 2D
    and 3D graphics (OpenGL). Furthermore, the good portability
    shall be mentioned. <br>


    <center>
      <table border="0" cellpadding="2" cellspacing="2">
        <tr>
          <td><a href=
          "../../common/images2/article350/fltk_linux.png"><img alt="Linux FLTK Screenshot" src="../../common/images2/article350/fltk_linux_th.png" width="280" height="210">
          </a><br>
          </td>

          <td><a href=
          "../../common/images2/article350/fltk_win32.jpg"><img alt="Windows FLTK Screenshot" src="../../common/images2/article350/fltk_win32_th.jpg" width="280" height="210">
          </a><br>
          </td>
        </tr>
      </table>
      <br>
       Linux and Windows 2000 screenshot (source code <a href=
      "../../common/src2/article350/fltk_src.tar.gz">here
      (fltk_src.tar.gz)</a> )<br>
    </center>
    <br>


    <A NAME="350lfindex10">&nbsp;</A>
<H3>FLTK Overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tr>
        <td>Name:<br>
        </td>

        <td>Fast Light Tool Kit</td>
      </tr>

      <tr>
        <td>Version:<br>
        </td>

        <td>1.1.5rc2<br>
        </td>
      </tr>

      <tr>
        <td>Operating systems:<br>
        </td>

        <td>Linux, Win32, MacOS<br>
        </td>
      </tr>

      <tr>
        <td>Programming language:<br>
        </td>

        <td>C++<br>
        </td>
      </tr>

      <tr>
        <td>License:<br>
        </td>

        <td>LGPL<br>
        </td>
      </tr>

      <tr>
        <td>Advantages:</td>

        <td>
          <ul>
            <li>a very lean library</li>

            <li>Source code including documentation and development
            environment "fluid".<br>
            </li>

            <li>good OpenGL support (was not tested)<br>
            </li>

            <li>generic controls under Windows</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Disadvantages:<br>
        </td>

        <td>
          <ul>
            <li>Installation under Win32 (Visual C++) not without
            problems</li>

            <li>The fluid development environment does not run
            stable under Windows.</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Development environment:<br>
        </td>

        <td>e.g. fluid (GUI Builder)<br>
        </td>
      </tr>

      <tr>
        <td>WWW:</td>

        <td><a href="http://www.fltk.org/">http://www.fltk.org</a>,
        Download: <a href=
        "http://freshmeat.net/projects/fltk/">http://freshmeat.net/projects/fltk/</a><br>

        </td>
      </tr>

      <tr>
        <td>Documentation:<br>
        </td>

        <td>Manuals, Tutorials, Mailing Lists<br>
         e.g. http://<br>
        </td>
      </tr>

      <tr>
        <td>Reference projects:<br>
        </td>

        <td>
          <ul>
            <li><a href=
            "http://vtkfltk.sourceforge.net/">http://vtkfltk.sourceforge.net/</a><br>

            </li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Distribution:<br>
        </td>

        <td>low distribution, mostly unknown even amongst software
        developers.<br>
        </td>
      </tr>
    </table>
    <br>
     <br>


    <A NAME="350lfindex11">&nbsp;</A>
<H2>FOX Toolkit</H2>

    The Fos Toolkit claims to be the fastest available toolkit. It
    offers a large number of GUI elements and an OpenGL interface.
    <br>
    <br>
    The installations completed under Windows and Linux without any
    problem. Detailed documentation and example projects are
    available. A class overview is not included in the version
    presented here but is available online. <br>


    <center>
      <a href="../../common/images2/article350/fox_win.jpg"><img alt="FOX screenshot" src="../../common/images2/article350/fox_win_th.jpg" width="280" height="210"></a><br>
      <br>
      Windows 2000 Screenshot (Source code <a href=
      "../../common/src2/article350/fox_src.zip">hier
      (fox_src.zip)</a>)
    </center>

    <A NAME="350lfindex12">&nbsp;</A>
<H3>FOX overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tr>
        <td>Name:<br>
        </td>

        <td>FOX Toolkit</td>
      </tr>

      <tr>
        <td>Version:<br>
        </td>

        <td>1.2.9<br>
        </td>
      </tr>

      <tr>
        <td>Operating systems:<br>
        </td>

        <td>Linux, Win32<br>
        </td>
      </tr>

      <tr>
        <td>Programming languages:<br>
        </td>

        <td>C++<br>
        </td>
      </tr>

      <tr>
        <td>License:<br>
        </td>

        <td>LGPL<br>
        </td>
      </tr>

      <tr>
        <td>Advantages:</td>

        <td>
          <ul>
            <li>Good documentation</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Disadvantages:<br>
        </td>

        <td>
        </td>
      </tr>

      <tr>
        <td>Development environment:<br>
        </td>

        <td>
        </td>
      </tr>

      <tr>
        <td>WWW:</td>

        <td><a href=
        "http://www.fox-toolkit.org/">http://www.fox-toolkit.org</a><br>

        </td>
      </tr>

      <tr>
        <td>Documentation:<br>
        </td>

        <td>Manuals, Tutorials, Mailinglist</td>
      </tr>

      <tr>
        <td>Reference project:<br>
        </td>

        <td>
          <ul>
            <li>X File Explorer (Xfe)</li>
          </ul>
        </td>
      </tr>

      <tr>
        <td>Distribution:<br>
        </td>

        <td>low distribution</td>
      </tr>
    </table>
    <br>


    <A NAME="350lfindex13">&nbsp;</A>
<H2>Other possibilities</H2>

    In addition to the above mentioned libraries I would also like
    to mention the following projects which I will however not
    discuss further:

    <ul>
      <li>GNUstep [http://www.gnustep.org/]: Limited usability
      under windows</li>

      <li>Visual Component Framework [http://vcf.sourceforge.net/]:
      No complete Linux version available</li>
    </ul>

    <A NAME="350lfindex14">&nbsp;</A>
<H2>JAVA</H2>

    In 1995 the company Sun introduced a new programming language.
    Besides the customary desktop-PC Java was planned for
    industrial products (coffee machines, toasters, etc.). The main
    breakthrough came initially through internet applications
    (applets) in connection with webbrowsers. In the meantime, Java
    is being used for standalone applications, for which it is well
    suited for its variety of features. <br>
     <br>
    Below we will itemize and explainin short the most important
    features of Java. <br>
     <br>


    <A NAME="350lfindex15">&nbsp;</A>
<H3>Platform-independent</H3>

    Java is platform-independent. Java applications consist of
    byte-code which may be interpreted by a virtual engine. Thus,
    the applications are able to run on any hardware for which a
    virtual engine exists. Interpretation by a virtual engine means
    a lower processing speed, compared to compiled software. To
    counter this disadvantage, improvements have been developed,
    like just-in-time compilation (JIT), which translates program
    instructions of the virtual engine into instructions for the
    physical machine. The result in this case is an aligned program
    in memory, which can be executed rapidly without
    interpretation. Aditional analysis of the runtime behavior with
    Hotspot-technology results in additional improvements. <br>


    <A NAME="350lfindex16">&nbsp;</A>
<H3>Object Orientation</H3>

    Java is object oriented. The developer of the object
    orientation language were inspired by Smalltalk. Presumably for
    performance reasons there are still primitive types of data
    which are not administered as objects. <br>
     <br>


    <A NAME="350lfindex17">&nbsp;</A>
<H3>Language Syntax</H3>

    The language syntax is similar to the one of C and C++,
    however, bug inducing inconsistencies were not adopted. One
    principle for the development of the language was to combine
    the best concepts of the existing programming languages. <br>
     <br>
     Some examples:<br>


    <ul>
      <li>no pre-processor. Pre-processor and header files are no
      longer necessary since all information is being read directly
      from the class files. .</li>

      <li>pointer: Java does not use pointers, references are used
      instead. A reference represents an object.</li>

      <li>garbage-collector: to prevent problems with creating and
      deleting objects, the object administration is being handled
      by the Java runtime-environment. By leaving the active array,
      the objects are automatically deleted. Objects or memory
      arrays, which are not enabled, as well as false destructors
      are being prevented by this technique.</li>

      <li>exeptions: contrary to the treatment of exceptions in C++
      Java exceptions are used more intensely, they are often
      mandatory.<br>
      </li>
    </ul>

    <A NAME="350lfindex18">&nbsp;</A>
<H3>Class Library</H3>

    Java includes an extensive class library: JFC (Java Foundation
    Class) for the generation of surfaces. (The code name
    <i>Swing</i> has caught on.) <br>


    <A NAME="350lfindex19">&nbsp;</A>
<H3>Security</H3>

    Java code is initially being checked by a verifier for
    structural correctness and security of types. A
    security-manager watches the accesses to the periphery. Any
    security problems are reportet as exceptions of the runtime.

    <A NAME="350lfindex20">&nbsp;</A>
<H3>Suitability for Projects<br>
    </H3>

    The advantages mentioned have side effects which render Java
    not wise for all projects. These properties are no mistakes or
    weaknesses but they were consciously not implemented, they
    belong to the philosophy of the language. <br>
    Amongst them are e.g.:

    <ul>
      <li>platform-specific periphery accesses</li>

      <li>direct hardware accesses</li>

      <li>intervention in the operating system</li>
    </ul>

    <A NAME="350lfindex21">&nbsp;</A>
<H3>Java Development Kit (JDK)</H3>


    <p>The Java Development Kit can be downloaded from Sun's
    internet site. It includes a basic scope of applications, java
    classes and online documentation. The applications are a
    compiler, a debugger, an applet-viewer, as well as a variety of
    auxilliary programs, necessary to generate and test Java
    applications and Java applets. This kit offers only the most
    essential, the compiler needs to be run by command line. In
    addition, the package contains the Java Runtime Environment
    (JRE, includes the virtual engine), which is required to excute
    the byte code. The documentation finally describes the whole
    API.<br>
    </p>

    <A NAME="350lfindex22">&nbsp;</A>
<H3>JHelloWorld</H3>

    With the help of standard JDK the mandatory "hello
    world"-application shall be implemented. <br>
    Step 1: Generation of the source code.
<pre class="code">
sh&gt;vi Helloworld.java<br>
<br>
public class HelloWorld {<br>
  public static void main (String[] args) {<br>
<br>
    System.out.println("Hello World!");<br>
  }<br>
}
</pre>
    File name and class name must match. <br>
    Step 2: Translation
<pre class="code">
sh&gt;javac Helloworld.java<br>
</pre>
    <br>
    Step 3: Start application with the use of the virtual engine.
<pre class="code">
sh&gt;java Helloworld<br>
</pre>
    <br>


    <A NAME="350lfindex23">&nbsp;</A>
<H3>JavaScript and Java</H3>

    JavaScript and Java are often assumed to have similiarities.
    That is basically wrong. JavaScript was originally developed by
    Netscape as a script language to be embedded in HTML. It is not
    a self-contained programming language, it depends on the
    browser application. The name JavaScript is more to be seen as
    a marketing gag .

    <A NAME="350lfindex24">&nbsp;</A>
<H3>Attempts to Standardization</H3>

    Up to now all attempts to standardize Java have failed. Reason
    for this may be Sun's reluctance to relinqish exclusive control
    over further development of the Java standards.

    <A NAME="350lfindex25">&nbsp;</A>
<H3>Dekompilierung</H3>

    A problem might be that applications can be de-compiled.
    Despite all security it is at the moment possible to convert
    the Bytecode back into source code. This is possible because
    the Bytecode is written for a virtual processor and contains in
    contrast to traditional assembler important additional
    information. The additional information makes it much easier to
    de-compile the code. You can therefore not hide a propriatary
    API or special knowledge in the code.

    <A NAME="350lfindex26">&nbsp;</A>
<H3>Miracle Language Or Short-lived Hype</H3>

    The Java concept was seen at the beginning as the ultimate
    answer to all platform independent development. However the
    original hype has disappeared. There are version conflicts
    between the different Java machnines and execution speed is an
    issue. Many companies went after first trials back to stnadard
    C++ Programming. The increased numbers of downloads seen by the
    wxWidgets developers is one proof for this. <br>
     <br>
    An intersseting Website in this context is: <a href=
    "http://www.internalmemos.com/memos/memodetails.php?memo_id=1321">
    http://www.internalmemos.com/memos/memodetails.php?memo_id=1321</a>
    where employs from Sun provide arguments against Java.

    <A NAME="350lfindex27">&nbsp;</A>
<H2>GUIs with Java</H2>

    Java offers by default 2 possibilities to program graphical
    interfaces:

    <ol>
      <li>Jave comes with a rich class library (JFC, Swing). No
      oberating system functions are used here. All Widgets are
      draw with Java instructions. This makes it possible to change
      the look and feel at runtime. This can be seen in the
      screenshots below.</li>

      <li>The basic AWT functions. AWT does not have complex
      elements like e.g trees it is therefore not suitable for most
      applications.</li>
    </ol>
    <br>

    <center>
      <table border="0" cellpadding="2" cellspacing="2">
          <tr>
            <td><a href=
            "../../common/images2/article350/java_metal.jpg"><img alt="Java Metal screenshot" src="../../common/images2/article350/java_metal_th.jpg" width="280" height="210">
            </a>
            </td>

            <td><a href=
            "../../common/images2/article350/java_motif.jpg"><img alt="Java Motif screenshot" src="../../common/images2/article350/java_motif_th.jpg" width="280" height="210">
            </a>
            </td>
          </tr>
          <tr>

            <td colspan=2 align="center"><a href=
            "../../common/images2/article350/java_gtk.png"><img alt="Java Gtk screenshot" src="../../common/images2/article350/java_gtk_th.png" width="280" height="210">
            </a>
            </td>
          </tr>
      </table>
      <br>
      Java Screenshots im Metal-, Motif- and GTK+ Look &amp;
      Feel (Quellcode <a href=
      "../../common/src2/article350/java_src.zip">hier
      (java_src.zip)</a>)<br>
      <br>

      <table border="0" cellpadding="2" cellspacing="2">
        <tr>
          <td><a href=
          "../../common/images2/article350/java_win2000.jpg"><img alt="Java on Win2k here." src="../../common/images2/article350/java_win2000_th.jpg" width="280" height="210">
          </a><br>
          </td>

          <td><a href=
          "../../common/images2/article350/java_winxp.jpg"><img alt="Java on WinXP here." src="../../common/images2/article350/java_winxp_th.jpg" width="280" height="210">
          </a><br>
          </td>
        </tr>
      </table>
      <br>
      Java Screenshot with Windows Look &amp; Feel under Windows
      2000 and Windows XP (idential source code)<br>
    </center>
    <br>
    As all common used browsers support Java. Applications can
    therefore also be written such that they run as so called
    applets inside a Webbrowser. This technology can e.g be used
    for embedded technologies where the Java-Bytecode is downloaded
    from a webserver which is integrated in the application. <br>
    <br>
    The following screenshot shows the identical application as a
    Java-Applet integratet into a webpage.

    <center>
      <br>
      <a href=
      "../../common/images2/article350/java_applet.jpg"><img alt="Java applet screenshot" src="../../common/images2/article350/java_applet_th.jpg" width="280" height="210"></a><br>
       Java screen shot with the example application as an Applet
      (code <a href=
      "../../common/src2/article350/java_applet.zip">here
      (java_applet.zip)</a>)<br>
    </center>

    <A NAME="350lfindex28">&nbsp;</A>
<H3>SWT and Eclipse<br>
    </H3>

    Eventhough Java offers similar GUI elements as other toolkit
    developers where complaining about them. The biggest problems
    where insufficient execution speed and lack of fuctionallity.
    IBM developed as an alternative the Standard Widget Toolkit
    (SWT) which allows the use of native GUI elements under Java. A
    refernce project is the also form IBM developed IDE Eclipse
    which offers platfrom independent development tools. The
    toolkit and the development environment are both free software.
    <br>


    <A NAME="350lfindex29">&nbsp;</A>
<H3>Abbreviations used in context with JAVA</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>JDK (Java Development Kit)</td>

          <td>The complete Java package to generate Java
          applications consists of application, Java classes and
          documentation.<br>
          </td>
        </tr>

        <tr>
          <td>JRE (Java Runtime Environment)<br>
          </td>

          <td>comprises the virtual engine, it is mandatory for the
          use of Java applications.<br>
          </td>
        </tr>

        <tr>
          <td>J2ME (Java 2 Micro Edition)<br>
          </td>

          <td>Java for devices with limited resources.<br>
          </td>
        </tr>

        <tr>
          <td>J2SE (Java 2 Standard Edition)<br>
          </td>

          <td>Java for the desktop (Linux, Windows, ...)<br>
          </td>
        </tr>

        <tr>
          <td>J2EE (Java 2 Enterprise Edition)<br>
          </td>

          <td>Java for the generation of multi-layer
          client/server-applications as well as Java-servlets and
          Java server-pages.<br>
          </td>
        </tr>

        <tr>
          <td>JFC (Java Foundation Class)</td>

          <td>Classes to develop GUIs (-&gt;Swing)</td>
        </tr>
      </tbody>
    </table>
    <br>


    <A NAME="350lfindex30">&nbsp;</A>
<H3>Java Overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>JAVA 2 PLATFORM STANDARD EDITION DEVELOPMENT KIT
          5.0</td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td>5.0<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>
            <ul>
              <li>Linux, Windows, Solaris (SUN)</li>

              <li>Linux, Windows, AIX, Solaris (possibly MacOS,
              OS/2, FreeBSD, Amiga, BeOS) (Jikes -&gt; IBM)</li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Programming language:<br>
          </td>

          <td>JAVA<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>proprietary license (SUN)<br>
          </td>
        </tr>

        <tr>
          <td>Advantages:</td>

          <td>
            <ul>
              <li>robust language (many sources for errors are
              eliminated by the concept of the language).<br>
              </li>

              <li><br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>
            <ul>
              <li>proprietary language, controlled exclusively by
              Sun</li>

              <li>virtual engine, must match the target
              platform<br>
              </li>

              <li>slow speed of execution</li>

              <li>SWT programming is more complex than Swing<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td>e.g.. Eclipse<br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://java.sun.com/">http://java.sun.com</a></td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>manuals, tutorials<br>
           general: <a href=
          "http://java.sun.com/j2se/1.5.0/docs/">http://java.sun.com/j2se/1.5.0/docs/</a>,
          <a href=
          "http://www-e.uni-magdeburg.de/mayer/java.html">http://www-e.uni-magdeburg.de/mayer/java.html</a><br>

           SWT: <a href=
          "http://eclipse-wiki.info/SWT">http://eclipse-wiki.info/SWT</a>,
          <a href=
          "http://www.java-tutor.com/java/swtlinks.html">http://www.java-tutor.com/java/swtlinks.html</a><br>

          </td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td>
          </td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>very wide distribution<br>
          </td>
        </tr>
      </tbody>
    </table>

    <A NAME="350lfindex31">&nbsp;</A>
<H2>Kylix</H2>

    Kxlix is a cross-platform development environment for Linux and
    Windows. With the help of Borland's CLX library (Component
    Library for Cross-platform) applications may be developed under
    Delphi and C++, which are able to run under both platforms.
    According to a report of the wikipedia homepage (Link <a href=
    "http://de.wikipedia.org/wiki/Kylix">de.wikipedia.org/wiki/Kylix</a>) this library is
    only a wrapper for the previously described Qt library. In
    addition, the Kylix IDE is obviously a <i>wine</i>-based
    non-native Linux-application (Link <a href=
    "http://de.wikipedia.org/wiki/WINE_Is_Not_an_Emulator">de.wikipedia.org/wiki/WINE_Is_Not_an_Emulator</a>)
    whose executables have to linked to <i>libwine</i>. Considering
    all this, Kylix may not make much sense for C++ developers
    since the use of Qt with a free IDE is more straightforward.
    <br>
     <br>


    <A NAME="350lfindex32">&nbsp;</A>
<H3>Kylix Overview</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>Kylix<br>
          </td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td>3<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Windows, Linux<br>
          </td>
        </tr>

        <tr>
          <td>Programming language:<br>
          </td>

          <td>Delphi, C++<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>Proprietary software<br>
          </td>
        </tr>

        <tr>
          <td>Advantages:</td>

          <td>
            <ul>
              <li>develoment under Delphi and C++<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>
            <ul>
              <li>license costs<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td>Kylix<br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://www.borland.de/kylix">http://www.borland.de/kylix</a></td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>&nbsp;<br>
          </td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>not wide spread<br>
          </td>
        </tr>
      </tbody>
    </table>

    <p><br>
    </p>
    <br>
     <br>


    <A NAME="350lfindex33">&nbsp;</A>
<H2>Smalltalk</H2>

    Smalltalk is a classic amongst the programming languages. It
    was developed in 1969/70 by Xerox and is until today a good
    example for an object oriented language. Everything is an
    object in smalltalk. There are no simple datatypes. Smalltalk
    works like Java and .Net (see below) in a virtual machine. The
    syntax tries to be close to spoken English but is totally
    different from any other programming language. Smalltalk used
    to be programmend already from the beginning in a graphical
    environment. Smalltak was about 10-15 years ahead of its time.
    Smalltalk was quite successful until Java came. <br>
     <br>
    Here the 'Hello world !' programm under smalltalk:
<pre class="code">
Transcript show: 'Hello world !'; cr.
</pre>
    Smalltalk is still used today. The most widely available
    variant is Smalltalk-80 (standardized in 1980). A powerful
    development environment is e.g Squeak.

    <A NAME="350lfindex34">&nbsp;</A>
<H3>Overview of Smalltalk</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>Smalltalk (e.g. Squeak)<br>
          </td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td>3.6<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Windows, Linux, Solaris, MacOSX, Darwin<br>
          </td>
        </tr>

        <tr>
          <td>Programming language:<br>
          </td>

          <td>Smalltalk<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>Open Source<br>
          </td>
        </tr>

        <tr>
          <td>Advantagese:</td>

          <td>Totally object oriented</td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>Smalltalk is pushed asside by Java and has a
          significantly smaller user base.</td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td>e.g. Squeak<br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://www.smalltalk.org/">http://www.smalltalk.org</a></td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>&nbsp;<br>
          </td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>not wide spread</td>
        </tr>
      </tbody>
    </table>

    <p><br>
    </p>
    <br>


    <A NAME="350lfindex35">&nbsp;</A>
<H2><a name="Mozilla"></a>Mozilla</H2>

    Mozilla? A web browser? How can you program with a web browser?
    Mozilla is not only a web browsers but also a platform
    independent Framework that includes different standards such as
    the XUL (XML based interface language). XUL is used to define
    the structure and content of an application. All files are used
    in clear text. Mozilla does not distinguish between programms
    and webpages. <br>
    <br>
    If you enter the following string into the URL field of mozilla
    then the browser itself will be shown:
<pre class="code">
chrome://navigator/content
</pre>
    The following code displays a button in the Mozilla browser
    which will open a window with the text "Hello World" when you
    click on it: <br>
<pre class="code">
&lt;?xml version="1.0"?&gt;
&lt;!-- Beispiel XUL Datei --&gt;
&lt;window
xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"&gt;
&lt;box align="center"&gt;
  &lt;button label="Push" onclick="alert('Hello World');" /&gt;
&lt;/box&gt;
&lt;/window&gt;
</pre>
    Software development with mozilla is very differnt from
    classical software development. Mozilla has many innovations
    such as the seperation of the application and its presentation.
    This makes it possible to change the look of the application
    ("Themes"). Successful projects such as the firefox web browser
    show that it is a robust framework. <br>

    <center>
      <table border="0" cellpadding="2" cellspacing="2">
          <tr>
            <td><a href=
            "../../common/images2/article350/moz_linux.png"><img alt="Mozilla on Linux Screenshot" src="../../common/images2/article350/moz_linux_th.png" width="280" height="210">
            </a><br>
            </td>

            <td><a href=
            "../../common/images2/article350/moz_win.jpg"><img alt="Mozilla on Win2k" src="../../common/images2/article350/moz_win_th.jpg" width="280" height="210">
            </a><br>
            </td>
          </tr>
      </table>
      Linux and Windows 2000 screenshot (source code <a href=
      "../../common/src2/article350/moz_src.tar.gz">here
      (moz_src.tar.gz)</a>).<br>
    </center>
    <br>


    <A NAME="350lfindex36">&nbsp;</A>
<H3>Overview Of Mozilla<br>
    </H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>Mozilla<br>
          </td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td>1.6<br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Windows, Linux,<br>
          </td>
        </tr>

        <tr>
          <td>Programming language:<br>
          </td>

          <td>XUL<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>Mozilla Public License, Netscape Public License</td>
        </tr>

        <tr>
          <td>Advantages:</td>

          <td>
            <ul>
              <li>innovative concepts</li>

              <li>support for many web standards (JavaScript,
              Stylesheets,...)</li>

              <li>applications run in the browser or
              standalone</li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Development environment:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><a href=
          "http://www.mozilla.org/">http://www.mozilla.org</a><br>
          </td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>Manuals, tutorials, mailing lists. E.g
          www.xulplanet.com</td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td>Mozilla firefox</td>
        </tr>

        <tr>
          <td>Distrubution:<br>
          </td>

          <td>widely distributed, but rarely used for software
          projects.<br>
          </td>
        </tr>
      </tbody>
    </table>

    <p><br>
    </p>
    <br>


    <A NAME="350lfindex37">&nbsp;</A>
<H2>Microsoft's Answer</H2>

    In the meantime, Microsoft has of course recognized the signs
    of time and introduced it's own approach. Under the name of
    .NET a platform was developed, which, last not least, shall
    reduce the migration of software developers to the competing
    Java platform. A closer look reveals indeed many parallels of
    the competitors, even though they are concealed by differnt
    names. The equivalent to Java's 'Bytecode' is named C#
    'Intermediate Language' MSIL). <br>
     <br>


    <A NAME="350lfindex38">&nbsp;</A>
<H3>What is .NET ?</H3>

    .NET is a proprietary Microsoft technology which shall be the
    base for all future Microsoft products. Support for the until
    now favored MFC-library for Visual C++ was abandoned with the
    introduction of .NET. .NET shall simplify the the development
    of network- and internet-applications; many ideas of Java were
    adopted. It supports object-oriented programming and is
    provided with a single class library which may be utilized by
    several programming languages (C#, VB.NET). That means, the
    'Intermediate Language' - which accesses the target hardware -
    is being generated from the program code ( compare Java
    Sourcecode -&gt; Java Bytecode -&gt; virtual engine -&gt;
    physical hardware).. <br>
     <br>
    Future versions of Windows are to be supplied with the .NET
    framework. <br>
     <br>


    <A NAME="350lfindex39">&nbsp;</A>
<H3>What Is Visual Studio .NET ?</H3>

    Visual Studio .NET is a programming environment to simplify the
    development of .NET-.software, but it is not mandatory. <br>
     <br>


    <A NAME="350lfindex40">&nbsp;</A>
<H3>Differences Between Visual Basic (VB) And VB .NET</H3>

    Even though VB.NET - for reasons of compitability - supports
    many original VB-functions and the syntax of the language was
    maintained, it is a full-blown new programming language. <br>
     <br>


    <A NAME="350lfindex41">&nbsp;</A>
<H3>Which Programming Language Is The Best Suitable?</H3>

    Since the VB.NET-source code and the C#-source code are
    translated into the MSIL, the programming language does not
    make a difference. There are, for example, no differences in
    speed between C#-code and VB.NET-code. The C# compiler should
    be the more suitable tool since it was developed specifically
    for the .NET framework. <br>
     <br>


    <A NAME="350lfindex42">&nbsp;</A>
<H3>.NET And Linux</H3>

    Despite the platform-independant approach, Microsoft will most
    likely not develop a Linux .NET-variant, which is the reason
    why a developer team - close to Miguel de Icaza (Ximian:
    Evolution) - is engaged with this task. The open source package
    <i>Mono</i>, version 1.0, is in the meantime available. <br>
     <br>
     <br>


    <A NAME="350lfindex43">&nbsp;</A>
<H3>Overview Of .NET</H3>


    <table border="1" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td>Name:<br>
          </td>

          <td>Microsoft .NET-Framework<br>
          </td>
        </tr>

        <tr>
          <td>Version:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Operating systems:<br>
          </td>

          <td>Windows, Linux<br>
          </td>
        </tr>

        <tr>
          <td>Programming language:<br>
          </td>

          <td>C#, Windows: VB.NET<br>
          </td>
        </tr>

        <tr>
          <td>License:<br>
          </td>

          <td>proprietary license<br>
          </td>
        </tr>

        <tr>
          <td>Advantages:</td>

          <td>
            <ul>
              <li>part of future Windows<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>Disadvantages:<br>
          </td>

          <td>
            <ul>
              <li>proprietary software</li>

              <li>no Linux .NET Version available<br>
              </li>

              <li>completely new API<br>
              </li>
            </ul>
          </td>
        </tr>

        <tr>
          <td>development environment:<br>
          </td>

          <td>Visual Studio .NET<br>
          </td>
        </tr>

        <tr>
          <td>WWW:</td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Documentation:<br>
          </td>

          <td>&nbsp;<br>
          </td>
        </tr>

        <tr>
          <td>Reference projects:<br>
          </td>

          <td><br>
          </td>
        </tr>

        <tr>
          <td>Distribution:<br>
          </td>

          <td>Low distribution at present<br>
          </td>
        </tr>
      </tbody>
    </table>

    <p><br>
    </p>
    <br>


    <A NAME="350lfindex44">&nbsp;</A>
<H2><a name="Zusammenfassung"></a> Summary</H2>

    Prior to the final evaluation, the task to be accomplished
    shall again be referred to: the goal is the development of a
    front-end, which shall communicate by network with the
    connected hardware. For this the source code shall able to be
    translated in the Linux- and the Win32-platform. The
    application shall not be distinguishable from existing software
    on the system. With this task the view of the packages tested
    will appear skewed and cannot be assumed to be a valid general
    judgement. <br>
     <br>
    Best example for this is the FLTK toolkit. With it we receive a
    very capable system in a very small package. The strengths are
    small source code, good graphic interface and good portability.
    These properties render the toolkit suitable for projects of
    embedded and graphic applications. For frontend development the
    number of available classes, the handling and the appearance of
    the application generated are more of an issue. Therefore FLTK
    is less suitable for this job. <br>
     <br>
     A harsh disappointment for software developer may be the
    GTK+-project under Windows. The Linux community could
    demonstrate quite a bit more engagement. Warnings placed on the
    website are not really confidence-building. This is even more
    regrettable since the GTK+-package as such looks quite
    accomplished. The potential is quite large; implementation to
    the Windows platform is also wanting. <br>
     <br>
    To utilize the outsiders Smalltalk and Mozilla remains personal
    preference. A company, which earns its income with in-house
    developed hardware, may have little understanding for
    philosophical attempts. Even though Smalltalk is the better
    object-oriented programming language and Mozilla's
    XUL-programming gives the included browser even more of a
    meaning, these packages are not mainstream products for
    software development. <br>
     <br>
    In this review Kylix, as well as GTK+ for Win32, are leaving a
    more negativ impression. Very little remains from the glory of
    the original product Turbo Pascal. In the 80's Borland provided
    a powerful IDE with this product, which ran on home computers
    as well as on very early PC's. It was known for its reasonable
    price and fast code. In the meantime much has changed. Borland
    became Inprise and went back to Borland. Turbo Pascal changed
    to Object Pascal, then Delphi and finally Kylix (of course with
    expansions and changes). The use of it does not make sense at
    present - at least for new projects. <br>
     <br>
    In this environment Microsoft demonstrates that it has
    recognized the demands of our time. Initially, the company
    tried to push the Java standard with Visual++. Besides the
    standard commands of Java, Win32-API access and even access to
    the Windows registry were permitted (which is quite contrary to
    the language philosophy). In addition, Win32 executables were
    generated automatically. After some legal wrangling with Sun, a
    warning had to be shown to indicate that the newly created
    application may not run on other operating systems. The end of
    the story was Microsoft stopped its engagement with Java. A
    completely new strategy was developed. With .NET and C++ an
    entirely new standard was generated. The combination of
    Windows, .NET and C# are certainly a good matching package, but
    that was also the case with the now retired combination of
    Windows with Visual++ and the MFC class library. Disadvantage
    is that one is unconditionally at the mercy of the provider who
    wants to force "his" standard (Windows). Microsoft is most
    likely not planning any implementation of .NET to other
    operating systems in the forseeable future. The free conversion
    Mono has to prove its real-life capability first. Despite
    initial achievements, at present no conclusion may be drawn.
    <br>
     <br>
    Without limitation recommendable are the packages Qt, wxWindows
    and Java. The final choice is difficult since all three
    products are capable to generate complex front-end software.
    Different oppinions may evolve here, depending on the weighting
    of support, costs, readiness, programming philosophy, etc. The
    distinctions may be found in the details; the Java philosophy,
    in fact, does not permit direct hardware access, but it may
    have advantages in other aspects. From the technical point of
    view the three competitors can handle the requested task
    without problems. <br>
     <br>
    Remains one subjective conclusion by the author: the Open
    Source-fan may lean to wxWindows for the task to be
    accomplished. Besides an agreeable concept and good tool
    support sufficient documentation is available. <br>
     <br>
     <!-- vim: set sw=2 ts=2 et tw=74: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=350">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Webpages maintained by the LinuxFocus Editor team</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Michael     Tschater</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">de --&gt; -- : Michael Tschater <small>&lt;tschater/at/web.de&gt;</small></font></td></tr>
  <tr><td><font size="2">de --&gt; en: J&uuml;rgen Pohl &lt;sept.sapins/at/verizon.net&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2004-10-30, generated by lfparser version 2.50</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
