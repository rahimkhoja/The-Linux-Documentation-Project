<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="Hardware">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf384, Hardware: A digital DC power supply -- part 2: the software</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Guido     Socher
 =LF=CAT___: Hardware
 =LF=TITLE_: A digital DC power supply -- part 2: the software
 =LF=NUMBER: 384
 =LF=ANAME_: article384.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Map</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Search</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.html"><FONT color=
           "#FFFFFF">News</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">About LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/July2005/article384.shtml">English</a> &nbsp;<A href="../../ChineseGB/July2005/article384.shtml">ChineseGB</a> &nbsp;<A href="../../Francais/July2005/article384.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images/Guido-S.gif" alt=
    "[Photo of the Author]" height="164" width="173">
<BR>by  Guido Socher <a href="http://linuxfocus.org/~guido/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>About the author:</I><BR>
<!-- aboutauthor_start -->
<p>Guido likes Linux because it is a really good system to
    develop your own hardware.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO en -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Content</i>:
<UL>
  <LI><A HREF="#384lfindex0">Introduction</A></LI>
  <LI><A HREF="#384lfindex1">A word of warning</A></LI>
  <LI><A HREF="#384lfindex2">The structure of the software</A></LI>
  <LI><A HREF="#384lfindex3">Which file contains what</A></LI>
  <LI><A HREF="#384lfindex4">New functionality: store settings</A></LI>
  <LI><A HREF="#384lfindex5">References/Download</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=384">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_07-0384.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>A digital DC power supply -- part 2: the software</H2>
 <img src="../../common/images2/article384_title.jpg" alt="[Illustration]" hspace="10" width="370" height="152">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Abstract</i>:
<P>
<!-- articleabstract_start -->

    This is the second part in the series about the digital
    power supply. You might want to read the <a href=
    "../June2005/article379.shtml">first part</a> first. <br><br>
    There will be a third part where we add i2c communication to
    control the power supply via command from the PC and maybe a
    fourth part where more fancy things are added. I am thinking of
    not only producing DC voltage but also DC + pulses and spikes.
    This way you can test circuits to make sure that they are
    resistant to noise and variations in power. <br><br>
    A kit with the board and parts for this article is available from <a href=
    "http://shop.tuxgraphics.org/electronic/microcontroller.html">shop.tuxgraphics.org</a>.


    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="384lfindex0">&nbsp;</A>
<H2>Introduction</H2>

    Using a clever microcontroller based design we can build a
    power supply which has more features and is a lot cheaper than
    traditional power supplies. This is possible because functions
    which are traditionally implemented in hardware are moved into
    software. <br>
    <br>
    In this article we will do two things:

    <ul>
      <li>I will explain how the different parts of the software
      work.</li>

      <li>Add code to store settings permanently.</li>
    </ul>

    <A NAME="384lfindex1">&nbsp;</A>
<H2>A word of warning</H2>

    This article will give you insights as to how the software
    works and you can use the knowledge to do modifications.
    However be aware that the short circuit protection is also only
    software. If you make a mistake somewhere then this protection
    may not work. If you then cause a short circuit on the output
    your hardware may go off in a could of smoke. To avoid this
    you should use a big resistor (e.g bulb from a car front
    light) which will draw enough current to trigger the protection
    (e.g 6A) but not enough to destroy the hardware. This way you
    can test a short circuit without any danger to loose the
    hardware.

    <A NAME="384lfindex2">&nbsp;</A>
<H2>The structure of the software</H2>

    When you look at the main program (file ddcp.c, download at the end of this
article) you will see
    that there are only a few lines of initialization code executed
    at power on and then the software enters an endless loop. <br>
    There are really 2 endless loops in this software.
    One is the main loop ("while(1){ ...}" in file ddcp.c) and the
    other one is the periodic interrupt from the Analog the Digital
    Converter (function "SIGNAL(SIG_ADC){...}" in file analog.c).
    During initialization the interrupt is configured to execute every
    100&mu; Sec. All functions and code that is executed runs in
    the context of one of those tasks (task the name for a process
    or thread of execution in a real time OS, so I use this word here even if
there is no OS). <br>

    <center>
      <img src="../../common/images2/article384_prio.gif" alt="[priorities]" hspace="10" width="431" height="378">
    </center>
    <br>
    The interrupt task can stop the execution of the main loop at
    any time. It will then execute without being interrupted and
    then execution continues again in the main loop at the place
    where it was interrupted. This has two consequences:

    <ol>
      <li>The code in the interrupt must not be too long as it must
      finish before the next interrupt comes. What counts here are
      the amount of instructions in machine code. A mathematical
      formula, which can be written as just one line of C-code may
      result in hundreds of lines of machine code.<br><br></li>

      <li>Variables that you share between interrupt code and code
      in the main task may suddenly change in the middle of
      execution. This is also valid when you hand more than one
      byte of data from the interrupt to the main task. The copying of two
      bytes will require more than one instruction and then in can
      happen that the first byte is copied before the interrupt
      while the second byte is copied after the interrupt. What to
      do? In most cases it is not a problem because the measurement
      results from the ADC will not differ too much between two
      interrupts. In cases where you can not afford this type of
      occasional fault (it may happen only once every hour) you
      have to use a flag which you can check to see if your code
      was interrupted during the copying.</li>
    </ol>
    All this means that complex things like updating of the
    display, checking of push buttons, conversion of ampere and
    volt values to internal units etc ... must be done in the main
    task. In the interrupt we execute only things that are time
    critical: Current and voltage control, overload protection and
    setting of the DAC. To avoid complex mathematics all
    calculations in the interrupt are done in ADC units. That is
    the same units that the ADC produces (integer values from
    0...1023). <br>
    <br>
    Here is the exact logical flow of operations that we do in the
    main task:
<pre class="code">
1) Copy the latest ADC results from the interrupt task
2) Convert them into display values (ampere and volt)
3) Convert the wanted ampere and volt values (what the user has set)
   to internal equivalent ADC values
4) Copy the wanted equivalent ADC values to variables such that
   the interrupt task can use them.
5) Clear the LCD display
6) Convert the numbers which we want to display on the LCD into
   strings.
7) Write voltage values to the display.
8) Check if the interrupt task regulates currently voltage or current
   (current limitation active)
9) If voltage is the limiting factor then write an arrow behind
   voltage on the display
10) Write ampere values to the display
11) Check if the interrupt task regulates currently voltage or current
    (current limitation active)
12) If current is the limiting factor then write an arrow behind
    current on the display
13) Check if a button was pressed. If not wait 100ms and check again.
    If a button was pressed then wait 200ms. This is to have a good
    response of the buttons and not too fast scrolling if they are
    permanently pressed.
14) Go to step 1).
</pre>
    The interrupt task is much simpler:
<pre class="code">
1) Copy the results from the ADC to variables
2) Toggle the ADC measurement channel between current and voltage
3) Check if excessive current is measured. If so set the DAC immediately
   to a low value (It does not have to be zero since the voltage
   amplifier circuit works only from 0.6V on (0.6 volt input
   produce still 0 volt output)).
4) Check if voltage or current needs to be regulated
5) Check if the DAC (digital to analog converter) needs updating
   according to the decision from 4).
</pre>
    <br>
    <br>
    This is the basic idea of the software. I will also explain
    what you find in which files and then you should be able to
    understand the code (given that you are familiar with C). <br>
    <br>


    <A NAME="384lfindex3">&nbsp;</A>
<H2>Which file contains what</H2>

<pre class="code">
ddcp.c -- this file contains the main program. All initialization is
         done from here.here.  The main loop is also implemented here.

analog.c -- the analog to digital converter and everything that
         runs in the context of the interrupt task can be found here.

dac.c -- the digital to analog converter. Initialized from ddcp.c but
         used only from analog.c

kbd.c -- the keyboard code

lcd.c -- the LCD driver. This is a special version which will not need
         the rw pin of the display. It uses instead an internal timer
         which should be long enough for the display to finish its task.
</pre>

    <A NAME="384lfindex4">&nbsp;</A>
<H2>New functionality: store settings</H2>

    The new functionality we add in this article is not much since
    I spent already a  part of this article to explain how the
    software works and I don't what to make the article too long.
    <br>
    <br>
    Still the function we add now is essential: Store the setting
    such that the voltage and current must not be set again after
    the next power on. We store those values in the eeprom of the
    microcontroller. All eeproms (including usb-sticks) have limit
    as to how often a eeprom storage cell can be written. For the
    Atmega 8 this is 100000 times. After that the eeprom is warren
    out and may not keep the values any longer. A trick to get
    longer life time is to write over several cells but let's first
    calculate what this means for us. 100000 write cycles
    corresponds to storing 10 times a new setting per day for 25
    years. This is more than enough. We can therefore just use the
    simplest solution and store into one eeprom address. <br>
    <br>
    So how do you store/read something to/from the eeprom? There
    are two instructions eeprom_read_word and eeprom_write_word to
    read or write 16bit integers into the eeprom. eeprom addresses
    start from zero and count in bytes. <br>
    <br>
    One complication is that the eeprom is erased when we upload new
    software. So we need to be able to know if we have read some garbage
    from the eeprom (because the software was previously flashed)
    or if we have valid ampere and voltage values in the eeprom. We
    do this by writing a magic number into the eeprom. In other
    words we store every time 3 things: ampere limit, voltage limit,
    magic number. If we read after power on the eeprom then we
    check first for the magic number. If it is our number then the
    values for ampere and volt are correct. The magic number can be
    anything which is not likely to be there by default (e.g 19).
    <br><br>To see the exact code look at the function <br>
    store_permanent() in ddcp.c (download at the end of this
    article). <br>
    <br>
    The software for this article is digitaldcpower-0.3.X where X
    is the revision which I plan to step if there are updates
    needed (the software for the previous article was
    (digitaldcpower-0.2.X). <br>
    <br>
    Have fun! ... The next article will add I2C communication to
    the power supply from the PC. So you can not only press a button
    on the power supply to change something but you can do it via
    command. <br>
    <br>
    I am looking for people who can port the i2c host programs to
    different operating system. Let me know if you can help here.
    You need some knowledge about control of the rs232 interface
    and a compiler. The actual change affects probably only one line of
    code (the ioctl function). <br>
    <br>
    The whole circuit with all parts and a printed circuit board is
    available from shop.tuxgraphics.org (see below).

    <A NAME="384lfindex5">&nbsp;</A>
<H2>References/Download</H2>


    <ul>
      <li><a href="../../common/src2/article384/index.html">Download page</a>
      for this article (updates and corrections will also be
      available from here).</li>

      <li>This first part in this series: <a href=
      "../June2005/article379.shtml">A digital DC powersupply</a></li>

      <li>How to program the atmega8 with gcc: <a href=
      "../November2004/article352.shtml">November2004 article
      352</a></li>

      <li><a href=
      "http://www.tuxgraphics.org/electronics/">Tuxgraphics
      electronics section</a>, a collection of all articles in this
      series.</li>

      <li><a href=
      "http://shop.tuxgraphics.org/electronic/microcontroller.html">
      shop.tuxgraphics.org , microcontroller section</a>, You can
      order all parts (transistors, passive components, LCD
      display, PCB, microcontroller, ...) from here.</li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=80: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=384">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Webpages maintained by the LinuxFocus Editor team</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Guido     Socher</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Guido Socher (<a href="http://linuxfocus.org/~guido/"><font size="1">homepage</font></a>)</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-07-24, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
