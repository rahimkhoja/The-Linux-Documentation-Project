<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="Hardware">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf352, Hardware: Programming the AVR microcontroller with GCC, libc 1.0.4</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Guido     Socher
 =LF=CAT___: Hardware
 =LF=TITLE_: Programming the AVR microcontroller with GCC, libc 1.0.4
 =LF=NUMBER: 352
 =LF=ANAME_: article352.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Map</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Search</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.html"><FONT color=
           "#FFFFFF">News</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archives</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">About LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/November2004/article352.shtml">English</a> &nbsp;<A href="../../Castellano/November2004/article352.shtml">Castellano</a> &nbsp;<A href="../../Deutsch/November2004/article352.shtml">Deutsch</a> &nbsp;<A href="../../Francais/November2004/article352.shtml">Francais</a> &nbsp;<A href="../../Italiano/November2004/article352.shtml">Italiano</a> &nbsp;<A href="../../Turkce/November2004/article352.shtml">Turkce</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images/Guido-S.gif" alt=
    "[Photo of the Author]" height="164" width="173">
<BR>by  Guido Socher <a href="http://linuxfocus.org/~guido/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>About the author:</I><BR>
<!-- aboutauthor_start -->
<p>Guido likes Linux because it is a really good system to
    develop your own hardware.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO en -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Content</i>:
<UL>
  <LI><A HREF="#352lfindex0">Introduction</A></LI>
  <LI><A HREF="#352lfindex1">Software installation: What you need</A></LI>
  <LI><A HREF="#352lfindex2">Software installation: GNU binutils</A></LI>
  <LI><A HREF="#352lfindex3">Software installation: AVR gcc</A></LI>
  <LI><A HREF="#352lfindex4">Software installation: The AVR C-library</A></LI>
  <LI><A HREF="#352lfindex5">Software installation: The Programmer</A></LI>
  <LI><A HREF="#352lfindex6">A small test project</A></LI>
  <LI><A HREF="#352lfindex7">Needed Hardware</A></LI>
  <LI><A HREF="#352lfindex8">Building the programmer hardware</A></LI>
  <LI><A HREF="#352lfindex9">Writing software</A></LI>
  <LI><A HREF="#352lfindex10">Compiling and loading</A></LI>
  <LI><A HREF="#352lfindex11">Some interesting binutils</A></LI>
  <LI><A HREF="#352lfindex12">Ideas and suggestions</A></LI>
  <LI><A HREF="#352lfindex13">References</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=352">Talkback form for this article</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2004_11-0352.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>Programming the AVR microcontroller with GCC, libc 1.0.4</H2>
 <img src="../../common/images2/article352/illustration.gif"
    alt="[Illustration]" hspace="10" width="208" height="148">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Abstract</i>:
<P>
<!-- articleabstract_start -->

    The AVR 8-Bit RISC microcontroller from Atmel is a very common
    microcontroller. This microcontroller is one chip with EEPROM,
    Ram, Analog to Digital converter, a lot of digital input and
    output lines, timers, UART for RS 232 communication and many
    other things. <br><br>
     The best is however that a complete programming environment is
    available under Linux: You can program this microcontroller in
    C using GCC. <br><br>
    I wrote already in <a href=
    "../March2002/article231.shtml">March 2002 an article</a> about
    the same subject. A lot of things have changed in the avr-libc
    development and the AT90S4433 microcontroller which I used in
    2002 is no longer manufactured by Atmel. This is therefore an
    update of the March 2002 article. I will use libc-1.0.4 and the
    ATmega8 microcontroller. <br><br>
     This article shall be only an introduction and in a later
    series of articles we will again build interesting hardware
    but this time based on the ATmega8.

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="352lfindex0">&nbsp;</A>
<H2>Introduction</H2>

    Many people where interested in microcontroller programming
    after the article which I wrote in 2002. However this first
    step to get the development environment up and running is the
    hardest. If something does not work then you have absolutely no
    clue where the fault is. Programmer cable wrong?? Circuit
    faulty? Installation incorrect? Parallelport disabled in bios?
    Kernel modules for ppdev compiled wrong? There can be a lot of
    reasons why things don't work. <a href=
    "http://shop.tuxgraphics.org/electronic/microcontroller.html"><img
     src="../../common/images2/article352/linuxavrcd_th.jpg" align=
    "right" width="150" height="213"></a> <br>
     <br>
    To make the entrance to the exciting world of microcontrollers
    easier <a href=
    "http://shop.tuxgraphics.org/electronic/microcontroller.html">shop.tuxgraphics.org</a>
    offers now a bootable CD with a manual and the programmer
    hardware. All you need to do then is boot from this CD and
    everything is up and running. No software installation is
    required and nothing is modified on your local computer. <br>
     <br>
    Even I use such a CD now for a while because the hardware I
    build often survives several generations of kernels and
    software installations on my PC. If I want later on to update
    some microcontroller software then I do not have to worry if
    the development environment on my Linux PC is still working. I
    just boot from the CD and it is up and running. <br>
     <br>
Independent of this CD I will explain the installation of the GCC
avr development environment in the following paragraphs.
     If you have the CD from tuxgraphics then continue
    with chapter "A small test project".

    <A NAME="352lfindex1">&nbsp;</A>
<H2>Software installation: What you need</H2>


    <p>To use the GNU C development environment you need the
    following software:</p>

    <table border="1">
      <tr>
        <td>binutils-2.15.tar.bz2</td>

        <td>Available from:<br>
         ftp://ftp.gnu.org/gnu/binutils/<br>
         or any mirror. E.g:<br>
         ftp://gatekeeper.dec.com/pub/GNU/binutils/</td>
      </tr>

      <tr>
        <td>gcc-core-3.4.2.tar.bz2</td>

        <td>Available from: ftp://ftp.gnu.org/gnu/gcc/<br>
         or any mirror. E.g:<br>
         ftp://gatekeeper.dec.com/pub/GNU/gcc/</td>
      </tr>

      <tr>
        <td>avr-libc-1.0.4.tar.bz2</td>

        <td>The AVR C-library is available from:
        http://savannah.nongnu.org/projects/avr-libc/</td>
      </tr>

      <tr>
        <td>uisp-20040311.tar.bz2</td>

        <td>The AVR programmer software is available from:
        http://savannah.nongnu.org/projects/uisp</td>
      </tr>
    </table>
    <br>
    <br>
     We will install all the programs to /usr/local/avr. This is to
    keep the program separate from your normal Linux C compiler.
    Create this directory with the command:
<pre class="code">
    mkdir /usr/local/avr

You can add it already now to your PATH:
    mkdir /usr/local/avr/bin
    export PATH=/usr/local/avr/bin:${PATH}
</pre>

    <A NAME="352lfindex2">&nbsp;</A>
<H2>Software installation: GNU binutils</H2>

    The binutils package provides all the low-level utilities
    needed for building object files. It includes an AVR assembler
    (avr-as), linker (avr-ld), library handling tools (avr-ranlib,
    avr-ar), programs to generate object files loadable to the
    microcontroller's EEPROM (avr-objcopy), disassembler
    (avr-objdump) and utilities such as avr-strip and avr-size.
    <br>
     <br>
     Run the following commands to build and install the binutils :

<pre class="code">
tar jxvf binutils-2.15.tar.bz2
cd binutils-2.15/
mkdir obj-avr
cd obj-avr
../configure --target=avr --prefix=/usr/local/avr --disable-nls
make

# as root:
make install
</pre>
    <br>
    <br>
     Add the line /usr/local/avr/lib to the file /etc/ld.so.conf
    and run the command /sbin/ldconfig to rebuild the linker cache.


    <A NAME="352lfindex3">&nbsp;</A>
<H2>Software installation: AVR gcc</H2>

    avr-gcc will be our C compiler. <br>
     <br>
     Run the following command to build and install it:
<pre class="code">
tar jxvf gcc-core-3.4.2.tar.bz2
cd gcc-3.4.2

mkdir obj-avr
cd obj-avr
../configure --target=avr --prefix=/usr/local/avr --disable-nls --enable-language=c

make

# as root:
make install

</pre>

    <A NAME="352lfindex4">&nbsp;</A>
<H2>Software installation: The AVR C-library</H2>

    The C-library is quite stable now compared to the one I
    presented in March 2002. <br>
     Run the following command to build and install it:
<pre class="code">
tar jxvf avr-libc-1.0.4.tar.bz2
cd avr-libc-1.0.4
PREFIX=/usr/local/avr
export PREFIX
sh -x ./doconf
./domake

cd build
#as root:
make install

</pre>

    <A NAME="352lfindex5">&nbsp;</A>
<H2>Software installation: The Programmer</H2>

    The programmer software loads the specially prepared object
    code into the EEPROM of our microcontroller. <br>
     <br>
     The uisp programmer for Linux is a very good programmer. It
    can be used directly from within a Makefile. You just add a
    "make load" rule and you can compile and load the software in
    one go. <br>
     <br>
     uisp is installed as follows:
<pre class="code">
tar jxvf uisp-20040311.tar.bz2.tar
cd uisp-20040311
./configure --prefix=/usr/local/avr
make

# as root:
make install

</pre>

    <A NAME="352lfindex6">&nbsp;</A>
<H2>A small test project</H2>

    We will start with a small test circuit which you can expand later on.
     <br>
    <br>
    This circuit can also be used as a simple test environment for
    more complex hardware. You can easily test load software and
    attach sensors or measurement equipment. <br>
    <br>
    Our test program as presented here will just cause a LED to
    blink. <br>
     <img src="../../common/images2/article352/circuit.gif" width=
    "600" height="400"> <br>


    <A NAME="352lfindex7">&nbsp;</A>
<H2>Needed Hardware</H2>

    <img src=
    "../../common/images2/article352/avrm8ledtest_circuit.jpg" alt=
    "[test circuit]" align="right" width="300" height="286"><br>
     You need the parts listed in the table below. Although it is a
    very common microcontroller it might not be available in every
    local radio shop but bigger distributors for electronic
    components like ( www.conrad.de (germany), www.selectronic.fr
    (france), digikey.com (US, CA), etc... have it in store). <br>
    The best place to get the microcontroller and the other parts is however:
    <a href="http://shop.tuxgraphics.org/">shop.tuxgraphics.org</a> ;-).
    <br clear="all">


    <table border="1" width="70%">
      <tr>
        <td>1 x ATmega8 DIP version, Atmel 8 bit Avr risc
        processor.</td>
      </tr>

      <tr>
        <td>1 x 28 pin 7.5mm IC socket<br>
         The 28 pin socket is a bit more difficult to get. Usually
        the 28 sockets are 14mm wide but we need a 7.5mm
        socket.</td>
      </tr>

      <tr>
        <td>1 x 10K resistor (color code: brown,black,orange)<br>
         1 x 1K resistor (color code: brown,black,red)<br>
         1 x 10uF electrolytic capacitor<br>
         Some wires<br>
         1 x LED<br>
         matrix board<br>
        </td>
      </tr>

      <tr>
        <td>The following is needed for the programmer <small>(not
        needed if you get the "Linux AVR programming kit" from
        tuxgraphics)</small>:<br>
        1 x DB25 connector to plug into the parallel port.<br>
         Any kind of 5 pin connector/socket for the programmer. I
        recommend to use precision strip connectors (similar to IC
        sockets) and break 5 pins off.<br>
         1 x 220 Ohm resistor (color code: red,red,brown)<br>
         2 x 470 Ohm resistor (color code: yellow,purple,brown)<br>
        </td>
      </tr>
    </table>
    In addition to the above parts you need a 5V electronically
    stabilized DC power supply or you can use a 4.5V battery as
    power supply. <br>
    <br>
    You have probably noticed that we do not need a crystal. This
    is because the ATmega8 has now a build-in oscilator. This
    oscilator can be used when accurate timing is not an issue.
    However if you want to build precise measurement equipment or
    you want to use the UART/RS232 interface then you will need a
    crystal. Which type of oscilator is used can be defined via
    fuse bits which you can modify with the programmer. By default
    (factory setting) the internal 1Mhz oscilator is active.

    <A NAME="352lfindex8">&nbsp;</A>
<H2>Building the programmer hardware</H2>

    The AVR microcontrollers allows for in circuit programming
    (ISP). <img src=
    "../../common/images2/article352/avr_programmer.jpg" alt=
    "[Linux AVR programmer]" align="right" width="300" height=
    "303"><br>
     That is: you do not need to remove the microcontroller
    form the board to program it. You will see that you can get
    different programmer hardware from 50-150 Euro. However with
    Linux running it is also possible to build a very simple
    programmer that does the job. You need a free parallel port on
    your computer and the following cable. <br>
    <br>
    Note that this is an improved programmer compared to the one
    presented in the March 2002 article. We build the protection
    resistors into the programmer. This will then save some space
    and parts on the circuit board. The wiring for the programmer
    cable has to be as follows: <br>


    <table border="1" bgcolor="#CDCDCD">
      <tr>
        <th>pin on pcb</th>

        <th>pin on AVR</th>

        <th>protection resistor</th>

        <th>Pin on parallel port</th>
      </tr>

      <tr>
        <td>5</td>

        <td>Reset (1)</td>

        <td>--</td>

        <td>Init (16)</td>
      </tr>

      <tr>
        <td>4</td>

        <td>MOSI (17)</td>

        <td>470 Ohm</td>

        <td>D0 (2)</td>
      </tr>

      <tr>
        <td>3</td>

        <td>MISO (18)</td>

        <td>220 Ohm</td>

        <td>Busy (11)</td>
      </tr>

      <tr>
        <td>2</td>

        <td>SCK (19)</td>

        <td>470 Ohm</td>

        <td>Strobe (1)</td>
      </tr>

      <tr>
        <td>1</td>

        <td>GND</td>

        <td>--</td>

        <td>GND (18)</td>
      </tr>
    </table>
    <br>
     The cable should not be longer than 70cm. <br>
    <br>
    The protection resistors can be build into the connector as
    show on the picture on the right.

    <A NAME="352lfindex9">&nbsp;</A>
<H2>Writing software</H2>

    The Atmeag 8 can be programmed in plain C with the help of gcc.
    To know some AVR assembler can be useful but it is not needed.
    <br>
    <br>
    The AVR libc comes with an <a href=
    "../../common/src2/article352/avr-libc-user-manual-1.0.4.pdf">avr-libc-user-manual-1.0.4.pdf
    (1139921 bytes)</a> which documents all functions available in
    C. From Atmel's website, (<a href=
    "http://www.atmel.com">www.atmel.com</a>, go to: avr products
    -&gt; 8 bit risc-&gt; Datasheets), you can download the
    complete data sheet. It describes all the registers and how to
    use the CPU. <br>
     <br>
     One thing to keep in mind when using a microcontroller is that
    it has only a few bytes of Ram. That means you must not declare
    large data structures or strings. Your program should not use
    deeply nested function calls or recursion. <br>
     <br>
     Much better than all theory is a real example. We will write a
    program that causes our LED to blink in 0.5 seconds intervals.
    Not very useful but very good to get started. <br>
    <br>
    The avr-libc has changed a lot. Previously you did set a bit on
    a port with sbi and you cleared it with cbi. Now those
    functions are deprecated. First I present the "good old way":
<pre class="code">
    /* defines for future compatibility */
    #ifndef cbi
    #define cbi(sfr, bit) (_SFR_BYTE(sfr) &amp;= ~_BV(bit))
    #endif
    #ifndef sbi
    #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
    #endif

    void main(void)
    {
          /* INITIALIZE */
          /* enable PC5 as output */
          sbi(DDRC,PC5);


          /* BLINK, BLINK ... */
          while (1) {
                /* led on, pin=0 */
                cbi(PORTC,PC5);
                delay_ms(500);
                /* set output to 5V, LED off */
                sbi(PORTC,PC5);
                delay_ms(500);
          }
    }

</pre>
    The following example does exactly the same but uses the new
    syntax:
<pre class="code">
    void main(void)
    {
          /* INITIALIZE */
          /* enable PC5 as output */
          DDRC|= _BV(PC5);


          /* BLINK, BLINK ... */

          /* PC5 is 5 (see file include/avr/iom8.h) and _BV(PC5) is 00100000 */
          while (1) {
                /* led on, pin=0 */
                PORTC&amp;= ~_BV(PC5);
                delay_ms(500);
                /* set output to 5V, LED off */
                PORTC|= _BV(PC5);
                delay_ms(500);
          }
    }

</pre>
    The above code snipet shows how simple it is to write a program.
    You see only the main program, the delay_ms function is included
    in the <a href=
    "../../common/src2/article352/avrm8ledtest.c.html">full listing
    (avrm8ledtest.c)</a>. To use pin PC5 as output you need to set
    the PC5 bit in the data direction register for port C (DDRC).
    After that you can set PC5 to 0V with the function
    cbi(PORTC,PC5) (clear bit PC5) or to 5V with sbi(PORTC,PC5)
    (set bit PC5). The value of "PC5" is defined in iom8.h which is
    included via io.h. You don't have to worry about it. If you
    have already written programs for multi user / multi tasking
    systems such as Linux you know that one must never program a
    non blocking endless loop. This would be a waste of CPU time
    and slow the system very much down. In the case of the AVR this
    is different. We don't have several tasks and there is no other
    program running. There is not even an operating system. It is
    therefore quite normal to busy loop forever.

    <A NAME="352lfindex10">&nbsp;</A>
<H2>Compiling and loading</H2>

    Before you start make sure that you have /usr/local/avr/bin in
    the PATH. If needed edit your .bash_profile or .tcshrc and add:


    <p class="code">export PATH=/usr/local/avr/bin:${PATH} (for
    bash)<br>
     setenv PATH /usr/local/atmel/bin:${PATH} (for tcsh)</p>
    We use the parallel port and uisp to program the AVR. Uisp uses
    the ppdev interface of the kernel. Therefore you need to have
    the following kernel modules loaded:
<pre class="code">
    # /sbin/lsmod
    parport_pc
    ppdev
    parport
</pre>
    Check with the command /sbin/lsmod that they are loaded otherwise
    load them (as root) with:
<pre class="code">
    modprobe parport
    modprobe parport_pc
    modprobe ppdev

</pre>
    It is a good idea to execute these commands automatically
    during startup. You can add them to a rc script (e.g for Redhat
    /etc/rc.d/rc.local). <br>
     To use the ppdev interface as normal user root needs to give
    you write access by once running the command

    <p class="code">chmod 666 /dev/parport0</p>
    Make as well sure that no printer daemon is running on the
    parallel port. If you have one running then stop it before you
    connect the programmer cable. Now everything is ready to
    compile and program our microcontroller.<br>
     <br>
     The package for our test program (<a href="../../common/src2/article352/index.html">avrm8ledtest-0.1.tar.gz</a>)
    includes a make file. All you need to do is type:<br>
<br>
     make <br>
     make load<br>
<br>
     This will compile and load the software. I will not go into
    the details of all the commands. You can see them in the <a
    href="../../common/src2/article352/Makefile.html">Makefile</a>
    and they are always the same. I can my self not remember all of
    them. I just know that I need to use "make load". If you want
    to write a different program then just replace all occurrences
    of avrm8ledtest in the Makefile with the name of your program.

    <A NAME="352lfindex11">&nbsp;</A>
<H2>Some interesting binutils</H2>

    More interesting than the actual compilation process are some
    of the binutils. <br>
    Those utilities have however not really changed since March
    2002. Take a look at the "Some interesting binutils" chapter in
    <a href="../March2002/article231.shtml">article231, March
    2002</a>.

    <A NAME="352lfindex12">&nbsp;</A>
<H2>Ideas and suggestions</H2>

    The ATmega8 is compatible to the AT90S4433 for most uses. You
    need to program the fuse bits to use the external oscilator and
    the previously presented hardware might work with possibly
    minor changes. Unfortunatley I have not had time yet to re-test
    all circuits for the ATmega8. If you want to be on the save
    side then use the AT90S4433 for the old articles. If you don't
    mind to troubleshoot and solve problems then try the ATmega8
    with the old articles/circuits. <br>
    <br>
    Here is a list of those previous hardware articles:

    <ul>
      <li><a href="../May2002/article236.shtml">A LCD control panel
      for your Linux server</a></li>

      <li><a href="../November2002/article251.shtml">A
      microcontroller based DC power supply</a></li>

      <li><a href="../September2002/article253.shtml">Frequency
      counter 1Hz-100Mhz with LCD display and RS232
      interface</a></li>

      <li><a href="../March2003/article286.shtml">Linux USB LCD
      display with watchdog and buttons</a></li>

      <li><a href="../July2003/article297.shtml">Building an
      autonomous light finder robot</a></li>
    </ul>
    <br>
    <br>
    Note: the programmer presented here includes already the
    protection resistors which were build into the circuit board in the
older hardware articles.  To use the new programmer with
    the old boards you will just need to replace the protection
    resistors on the board by wires.
<p>Atmel provides an application note "AVR081: Replacing AT90S4433 by
ATmega8" which lists all the incompatibilities: <a
href="../../common/src2/article352/at90s4433_to_atmega8.pdf">at90s4433_to_atmega8.pdf
(101343 bytes)</a>

    <A NAME="352lfindex13">&nbsp;</A>
<H2>References</H2>


    <ul>
      <li>Pascal Stang's AVRlib: <a href=
      "http://www.procyonengineering.com/avr/avrlib/index.html">http://www.procyonengineering.com/avr/avrlib/index.html</a> or <a href="http://hubbard.engr.scu.edu/embedded/avr/avrlib/">http://hubbard.engr.scu.edu/embedded/avr/avrlib/</a></li>

      <li>the tavrasm assembler for Linux: <a href=
      "http://www.tavrasm.org/">www.tavrasm.org</a></li>

      <li><b>All software and documents <a href="../../common/src2/article352/index.html">mentioned in this
      article</a></b></li>

      <li>The atmel website: <a href=
      "http://www.atmel.com/">www.atmel.com</a></li>

      <li>Electronic pages from the tuxgraphics shop:
<a href=
    "http://shop.tuxgraphics.org/">shop.tuxgraphics.org</a>
<br>(Here you can get the Linux AVR programming CD, kits and microcontrollers)
    </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=80: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback form for this article</h2>
Every article has its own talkback page. On this page you can submit a comment or look at comments from other readers:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=352">&nbsp;talkback page&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Webpages maintained by the LinuxFocus Editor team</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Guido     Socher</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Translation information:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Guido Socher (<a href="http://linuxfocus.org/~guido/"><font size="1">homepage</font></a>)</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-02-14, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
