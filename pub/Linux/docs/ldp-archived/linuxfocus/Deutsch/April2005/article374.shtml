<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf374, SoftwareDevelopment: LINUX &amp; PERL: Werkzeuge f&uuml;r das Studium und die Analyse von biologischen Informationen</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Carlos     Andr&eacute;s P&eacute;rez
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: LINUX &amp; PERL: Werkzeuge f&uuml;r das Studium und die Analyse von biologischen Informationen
 =LF=NUMBER: 374
 =LF=ANAME_: article374.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Plan</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Index</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Suchen</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Nachrichten</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Archiv</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.shtml"><FONT color=
           "#FFFFFF">Links</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">&Uuml;ber uns</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Dieses Dokument ist verf&uuml;bar auf: <A href="../../English/April2005/article374.shtml">English</a> &nbsp;<A href="../../Castellano/April2005/article374.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/April2005/article374.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/April2005/article374.shtml">Deutsch</a> &nbsp;<A href="../../Francais/April2005/article374.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/CarlosAndresPerez.jpg" alt=
    "Photo des Autors">
<BR>von  Carlos Andr&eacute;s P&eacute;rez <br> <small>&lt;caperez /at/ usc.edu.co&gt;</small>
<BR><BR>
<I>&Uuml;ber den Autor:</I><BR>
<!-- aboutauthor_start -->
<p>Carlos Andr&eacute;s P&eacute;rez ist Spezialist f&uuml;r
      Molekularsimulation und Doktorand der Biotechnologie. Technischer
      Berater der Grupo de Investigaci&oacute;n en
      Educaci&oacute;n Virtual (GIEV) [Forschungsgruppe f&uuml;r
      e-Learning]. Adresse: Universidad Santiago de Cali, Calle 5&ordf;
      carrera 62 Campus Pampalinda, Cali &ndash; Colombia.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO de -->
<BR><BR><I>&Uuml;bersetzt ins Deutsche von:</I><BR>
Viktor Horvath <small>&lt;ViktorHorvath(at)gmx.net&gt;</small>
<br>
<!--
 =LF=TRANSTO=de: Viktor Horvath
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Inhalt</i>:
<UL>
  <LI><A HREF="#374lfindex0">Bioinformatik</A></LI>
  <LI><A HREF="#374lfindex1">Perl</A></LI>
  <LI><A HREF="#374lfindex2">Perl-Dateiverwaltung</A></LI>
  <LI><A HREF="#374lfindex3">Suche nach Aminos&auml;ure-Mustern</A></LI>
  <LI><A HREF="#374lfindex4">Berechnung von H&auml;ufigkeiten der Aminos&auml;uren</A></LI>
  <LI><A HREF="#374lfindex5">Referenzen</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">Talkback f&uuml;r diesen Artikel</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_04-0374.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>LINUX &amp; PERL: Werkzeuge f&uuml;r das Studium und die Analyse von biologischen Informationen</H2>
 <img src="../../common/images2/article374.jpg" alt=
    "[Illustration]" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Zusammenfassung</i>:
<P>
<!-- articleabstract_start -->
<p>Dieser Artikel will einige der Vorteile zeigen, die
      Perl-Programmierung unter Unix f&uuml;r die Auswertung biologischer DNS-,
      RNS- und Proteinsequenz-Datenbanken bietet, in
      Vergleichsprozessen oder Analyse. Das Humangenomprojekt und die
      DNS-Klontechniken haben den Fortschritt der Wissenschaft auf diesem
      Gebiet beschleunigt. Die t&auml;glich generierten Daten &uuml;bersteigen h&auml;ufig
      die Kapazit&auml;ten, sie unter dem Gesichtspunkt der Evolution zu
      verarbeiten.</p><p>Die schnelle Vermehrung der biologischen Informationen zu
      verschiedenen Genomen (Summen der Gene eines Organismus) treibt die
      Bioinformatik als eine fundamentale Disziplin f&uuml;r die Handhabung und
      Analyse dieser Daten an.</p>
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="374lfindex0">&nbsp;</A>
<H2>Bioinformatik</H2>


    <p>Die Bioinformatik entstand, als Wissenschaftler Gensequenzen digital
      zu speichern und mittels Programmen zu vergleichen begannen. Lange war
      Bioinformatik auf die Sequenzanalyse beschr&auml;nkt. Die Wichtigkeit, die
      Molek&uuml;lstruktur festzustellen, sorgte jedoch daf&uuml;r, da&szlig; Computer zu
      einem wichtigen Werkzeug f&uuml;r Untersuchungen in theoretischer
      Biochemie wurden. T&auml;glich gibt es mehr Informationen und mehr
      Datensammlungen zur dreidimensionalen Molek&uuml;lstruktur. Gene werden
      nicht mehr einzeln, sondern im Ganzen oder in einem gr&ouml;&szlig;eren Teil
      untersucht. Es ist jetzt einfacher zu verstehen, wie sie sich
      untereinander und in bezug auf die Proteine verhalten und wie sie
      sich in Stoffwechselwegen organisieren. Jedes Mal werden wir uns mehr
      dar&uuml;ber bewu&szlig;t, wie wichtig es ist, die Daten zu organisieren.</p>

    <p>Jede der beschriebenen Aktivit&auml;ten hat mindestens zwei
      Gesichtspunkte, unter denen sie interessant ist. Einerseits ist es
      das biologische Interesse, die Beziehungen zwischen organischen
      Molek&uuml;len zu kennen, und andererseits ger&auml;t der Zusammenbau zu einem
      interessanten Problem des Softwaredesign. Biologische Informationen
      m&uuml;ssen kombiniert und integriert werden, um eine globale und
      effektive Sicht der zugrundeliegenden biologischen Prozesse zu
      erhalten. Wir haben selber die Notwendigkeit bemerkt, f&uuml;r eine
      wirksame L&ouml;sung die
      verschiedenen Felder der Informatik zusammenzuf&uuml;hren:
      Datenbankverwaltung, auch Datenintegration, effiziente Algorithmen,
      leistungsf&auml;hige Hardware - Parallelrechner, Multiprozessorsysteme
      etc.</p>

    <A NAME="374lfindex1">&nbsp;</A>
<H2>Perl</H2>


    <p><strong>Larry Wall</strong> begann die Entwicklung von Perl
      1986. Perl ist eine interpretierte Programmiersprache, ideal zur
      Handhabung von Text, Dateien und Prozessen. Perl erlaubt die
      schnelle Entwicklung kleiner Programme. Man k&ouml;nnte sagen, da&szlig; Perl
      eine optimierte Mischung einer Hochsprache (z.B. C) und einer
      Skriptsprache (z.B. bash) ist.</p>

    <p>Perl-Programme k&ouml;nnen unter verschiedenen Betriebssystemen oder
      Plattformen laufen. Es ist jedoch unter den UNIX-Systemen entstanden
      und hat sich dort verbreitet. Perl hat seinen anf&auml;nglichen Bereich
      endg&uuml;ltig verlassen, seit es als Sprache f&uuml;r Web-Applikationen
      eingesetzt wird. Vor Perl waren <strong>awk</strong>,
      <strong>thirst</strong> und <strong>grep</strong> die Werkzeuge zur
      Dateianalyse und der Extraktion von Informationen.</p>

    <p>Perl vereinigte die F&auml;higkeiten dieser UNIX-Werkzeuge in einem
      einzigen Programm, wobei jedes mit mehr Funktionalit&auml;t erweitert und
      modernisiert wurde.</p>

    <p>Perl ist eine freie Programmiersprache, und es l&auml;uft auf jedem
      Betriebssystem, das in biologischen Forschungslaboren g&auml;ngig
      ist. Unter UNIX und Mac OS X ist es schon vorinstalliert, ansonsten
      mu&szlig; man es installieren. Es gen&uuml;gt, die passende Version von dieser
      Seite zu laden: <a
	href="http://www.cpan.org/">http://www.cpan.org</a></p>

    <p>Unter Linux wird Perl mit der Datei als Argument aufgerufen, die die
      auszuf&uuml;hrenden Befehle enth&auml;lt. Eine andere, h&auml;ufig verwendete
      Methode gestattet es, direkt diese Datei aufzurufen. Daf&uuml;r m&uuml;ssen wir
      zweierlei machen: (a) einen besonderen Kommentar als erste Zeile in
      das Programm schreiben:</p>
<pre class="code">
#!/usr/bin/env perl<br>
print "Hi\n";
</pre>
    <p>und (b) die Datei unter Unix ausf&uuml;hrbar machen:</p>
<pre class="code">
% chmod +x greetings.pl
</pre>
    <p>Dann k&ouml;nnen wir die Programmdatei einfach unter ihrem Namen
      aufrufen.</p>

    <A NAME="374lfindex2">&nbsp;</A>
<H2>Perl-Dateiverwaltung</H2>


    <p>Wenn wir eine Datenbank von Molekularsequenzen in Textformat haben,
      k&ouml;nnen wir mit Perl eine Sequenz-Suchmaschine schreiben. Dieses
      Beispiel zeigt, wie man nach einer Proteinsequenz in einer Datenbank
      im Format SWISS-PROT (db_human_swissprot) durch Angabe ihrer ID
      sucht.</p>
<pre class="code">
#!/usr/bin/perl<br>
# Suche nach einer Aminos&auml;ure-Sequenz in einer Datenbank
# im Format SWISS-PROT, mit einem gegebenen ID-Code.
# Frage nach dem ID-Code und speichere ihn
# von der Eingabe (stdin) in eine Variable<br>
print "Enter the ID to search: ";
$id_query=&lt;STDIN&gt;;
chomp $id_query;<br>
# Wir &ouml;ffnen die Datenbank-Datei.
# Wenn das unm&ouml;glich ist, endet das Programm<br>
open (db, "human_kinases_swissprot.txt") ||
 die "problem opening the file human_kinases_swissprot.txt\n";<br>
# Suche Zeile f&uuml;r Zeile in der Datenbank<br>
while (&lt;db&gt;) {
chomp $_;<br>
# Pr&uuml;fe, ob wir in einem ID-Feld sind<br>
if ($_ =~ /^ID/) {<br>
# Wenn ja, sammeln wir die Information
# und trennen die Zeile bei den Leerzeichen<br>
($a1,$id_db) = split (/\s+/,$_);<br>
# Wenn das ID-Feld nicht das gesuchte ist,
# gehen wir zum n&auml;chsten<br>
next if ($id_db ne $id_query);<br>
# Wenn wir darauf sto&szlig;en, setzen wir eine Marke<br>
$signal_good=1;<br>
# Dann pr&uuml;fen wir, ob es sich um das Sequenz-Feld handelt
# und ob die Marke 1 ist (gesuchte Sequenz)
# Wenn ja, &auml;ndern wir die Marke auf 2, um die Sequenz zu sammeln<br>
} elsif (($_ =~ /^SQ/) &amp;&amp; ($signal_good==1)) {
$signal_good=2;<br>
# Wenn die Marke schlie&szlig;lich 2 ist, zeigen wir jede Zeile
# der Sequenz an, au&szlig;er wenn die Zeile mit // beginnt
# In dem Fall verlassen wir die while-Schleife<br>
} elsif ($signal_good == 2) {
last if ($_ =~ /^\/\//);
print &quot;$_\n&quot;;
}
}<br>
# Wenn wir die while-Schleife verlassen haben, pr&uuml;fen wir die Marke.
# Ist der Test negativ, hei&szlig;t das, da&szlig; wir die gesuchte Sequenz
# nicht gefunden haben und wir einen Fehler ausgeben.<br>
if (!$signal_good) {
print &quot;ERROR: &quot;.&quot;Sequence not found\n&quot;;
}<br>
# Als letztes schlie&szlig;en wir die noch offene Datei<br>
close (db);
exit;
</pre>
    <br>

    <A NAME="374lfindex3">&nbsp;</A>
<H2>Suche nach Aminos&auml;ure-Mustern</H2>

<pre class="code">
#!/usr/bin/perl
# Suchmaschine f&uuml;r Aminos&auml;ure-Muster
# Frage den Nutzer nach den zu suchenden Mustern<br>
print "Please, introduce the pattern to search in query.seq: ";
$patron = &lt;STDIN&gt;;
chomp $patron;<br>
# Wir &ouml;ffnen die Datenbank-Datei.
# Wenn das unm&ouml;glich ist, endet das Programm<br>
open (query, "query_seq.txt") || die "problem opening the file query_seq.txt\n";<br>
# Suche Zeile f&uuml;r Zeile nach der SWISS-PROT-Sequenz<br>
while (&lt;query&gt;) {
chomp $_;<br>
# Wenn wir beim SQ-Feld ankommen, Marke auf 1 setzen<br>
   if ($_ =~ /^SQ/) {
         $signal_seq = 1;<br>
# Wenn wir am Ende der Sequenz ankommen, verlasse die Schleife.
# Dieser Ausdruck mu&szlig; vor dem Test, ob die Marke 1 ist, stehen,
# denn diese Zeile geh&ouml;rt nicht zur Aminos&auml;ure-Sequenz.<br>
   } elsif ($_ =~ /^\/\//) {
         last;<br>
# Teste, ob die Marke 1 ist. Wenn ja, l&ouml;sche die Leerzeichen
# in der Sequenzzeile und vereinige jede Zeile in einer neuen Variable.
# Zum Zusammenf&uuml;gen k&ouml;nnen wir auch folgendes machen:
# $secuencia_total.=$_;<br>
   } elsif ($signal_seq == 1) {
         $_ =~ s/ //g;
         $secuencia_total=$secuencia_total.$_;
   }
  }<br>
# Jetzt vergleiche die komplett zusammengef&uuml;gte Sequenz
# mit dem gesuchten Muster<br>
  if ($secuencia_total =~ /$patron/) {
   print &quot;The sequence query.seq contains the pattern $patron\n&quot;;
  } else {
   print &quot;The sequence query.seq doesn't contain the pattern $patron\n&quot;;
  }<br>
# Als letztes schlie&szlig;en wir die noch offene Datei<br>
close (query);
exit;
</pre>

    <p>Falls wir die genaue Fundstelle des Musters erfahren wollen, m&uuml;ssen
    wir eine bestimmte Variable <tt>$&amp;</tt> benutzen. Sie beh&auml;lt das
    gefundene Muster nach der Auswertung eines regul&auml;ren Ausdrucks (man
    m&uuml;&szlig;te sie direkt nach die Zeile <tt>if ($$secuencia_total&gt;=
    ~/$$patron&gt;/) {</tt> schreiben. Das k&ouml;nnen wir mit den Variablen
    <tt>$ `</tt> und <tt>$ &acute;</tt> verbinden, die alles links und
    rechts vom gefundenen Muster speichern. Hier die Modifikation des
    vorigen Programms mit diesen neuen Variablen, um die genaue Position
    des Musters anzugeben. Hinweis: Auch die Funktion
    <tt>length</tt> kann n&uuml;tzlich sein, die die L&auml;nge einer
    Zeichenkette liefert.</p>

<pre class="code">
# Wir m&uuml;ssen nur das "if" da &auml;ndern, wo das Muster gefunden wurde.
# Jetzt vergleiche die komplett zusammengef&uuml;gte Sequenz
# mit dem gesuchten Muster und pr&uuml;fe dessen Position in der Sequenz<br>
  if ($secuencia_total =~ /$patron/) {
   $posicion=length($`)+1;
   print &quot;The sequence query_seq.txt contains the pattern $patron in the following position $posicion\n&quot;;
  } else {
  print &quot;The sequence query_seq.txt doesn't contain the pattern $patron\n&quot;;
  }
</pre>

    <A NAME="374lfindex4">&nbsp;</A>
<H2>Berechnung von H&auml;ufigkeiten der Aminos&auml;uren</H2>


    <p>Die H&auml;ufigkeiten der einzelnen Aminos&auml;uren in einem Protein ist
      unterschiedlich, je nach seiner Funktion oder bevorzugten
      Umgebung. Daher sehen wir in diesem Beispiel, wie man die
      H&auml;ufigkeiten der Aminos&auml;uren in einer gegebenen Aminos&auml;uren-Sequenz
      berechnet.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# Berechnet die H&auml;ufigkeiten der Aminos&auml;uren in einer Proteinsequenz
# Erh&auml;lt den Dateinamen von der Kommandozeile (Format SWISS-PROT)
# Kann auch mit "print" von &lt;stdin&gt; erfragt werden<br>
if (!$ARGV[0]) {print &quot;The execution line shall be: program.pl file_swissprot\n&quot;;}
$fichero = $ARGV[0];<br>
# Initialisiere die Variable $errores<br>
my $errores=0;<br>
# &Ouml;ffne die Datei zum Lesen<br>
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";<br>
# Zuerst &uuml;berpr&uuml;fen wir die Sequenz wie im zweiten Beispiel<br>
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
   last if ($_ =~ /^\/\//);
   $_ =~ s/\s//g;
   $secuencia.=$_;
}
}
close (FICHA);<br>
# Jetzt verwenden wir eine Schleife, die jede Position einer Aminos&auml;ure
# in der Sequenz testet (in einer eigenen Funktion, die sp&auml;ter in anderen
# Programmen benutzt werden kann)<br>
comprueba_aa ($secuencia);<br>
# Gib die Ergebnisse auf dem Schirm aus
# Zuerst die 20 Aminos&auml;uren und dann das Array mit ihren H&auml;ufigkeiten
# In diesem Fall kann "sort" nicht in "foreach" benutzt werden,
# denn das Array enth&auml;lt die H&auml;ufigkeiten als Zahlen.<br>
print&quot;A\tC\tD\tE\tF\tG\tH\tI\tK\tL\tM\tN\tP\tQ\tR\tS\tT\tV\tW\tY\n&quot;;
foreach $each_aa (@aa) {
print &quot;$each_aa\t&quot;;
}<br>
# Dann gibt das Programm m&ouml;gliche Fehler zur&uuml;ck und terminiert<br>
print "\nerrores = $errores\n";
exit;<br><br>
# Funktionen:
# Diese berechnet die H&auml;ufigkeit
# einer jeden Aminos&auml;ure einer Proteinsequenz<br>
sub comprueba_aa {<br>
# Sequenz nehmen<br>
my ($secuencia)=@_;<br>
# und jede Aminos&auml;ure ansehen, a l&auml;uft von 0 bis zur Sequenzl&auml;nge<br>
for ($posicion=0 ; $posicion&lt;length $secuencia ; $posicion++ ) {<br>
# Aminos&auml;ure nehmen<br>
$aa = substr($secuencia, $posicion, 1);<br>
# und in einer Bedingung pr&uuml;fen, welche es ist
# Bei &Uuml;bereinstimmung wird die entsprechende H&auml;ufigkeit um 1 erh&ouml;ht
# in einem Array, das f&uuml;r jede Aminos&auml;ure eine Variable bereith&auml;lt,
# alphabetisch geordnet.<br>
if ( $aa eq 'A' ) {
$aa[0]++;
} elsif ( $aa eq 'C' ) {
$aa[1]++;
} elsif ( $aa eq 'D' ) {
$aa[2]++;
} elsif ( $aa eq 'E' ) {
$aa[3]++;
} elsif ( $aa eq 'F' ) {
$aa[4]++;
} elsif ( $aa eq 'G' ) {
$aa[5]++;
} elsif ( $aa eq 'H' ) {
$aa[6]++;
} elsif ( $aa eq 'I' ) {
$aa[7]++;
} elsif ( $aa eq 'K' ) {
$aa[8]++;
} elsif ( $aa eq 'L' ) {
$aa[9]++;
} elsif ( $aa eq 'M' ) {
$aa[10]++;
} elsif ( $aa eq 'N' ) {
$aa[11]++;
} elsif ( $aa eq 'P' ) {
$aa[12]++;
} elsif ( $aa eq 'Q' ) {
$aa[13]++;
} elsif ( $aa eq 'R' ) {
$aa[14]++;
} elsif ( $aa eq 'S' ) {
$aa[15]++;
} elsif ( $aa eq 'T' ) {
$aa[16]++;
} elsif ( $aa eq 'V' ) {
$aa[17]++;
} elsif ( $aa eq 'W' ) {
$aa[18]++;
} elsif ( $aa eq 'Y' ) {
$aa[19]++;<br>
# Wenn die Aminos&auml;ure nicht gefunden wurde,
# wird die Fehlerzahl inkrementiert<br>
} else {
print "ERROR: Aminoacid not found: $aa\n";
$errores++;
}
}<br>
# Schlie&szlig;lich das Array mit den H&auml;ufigkeiten zur&uuml;ckgeben<br>
return @aa;
}
</pre>

    <p>Jetzt werden wir den Schritt betrachten, der nach dem
    Informationsflu&szlig; und der Transkription in einer Zelle geschieht. Das
    ist die Translation, durch die eine RNS-Sequenz, die von einem aus DNS
    bestehenden Gen kommt, zu einem Baustein eines Proteins oder einer
    Aminos&auml;ure-Sequenz wird. Daf&uuml;r m&uuml;ssen wir den genetischen Code kennen,
    der ein RNS/DNS-Tripel einer Aminos&auml;ure zuordnet. Die Sequenz
    extrahieren wir aus der EMBL-formatierten Datei eines Gens von
    <em>Escherichia coli</em>, und bald werden wir die &Uuml;bersetzung mit der
    in der Datei existierenden &uuml;berpr&uuml;fen. F&uuml;r dieses Beispiel m&uuml;ssen wir
    ein &bdquo;Associate Array&ldquo; (Hashtabelle) einf&uuml;hren. Im Programm
    wird nur der Kodierbereich gebraucht, der sich im Feld &bdquo;FT
    CDS&ldquo; befindet.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# &Uuml;bersetzt eine DNS-Sequenz von einer EMBL-Datei
# zur korrespondierenden Aminos&auml;ure
# Erh&auml;lt den Dateinamen von der Kommandozeile (Format SWISS-PROT)
# Kann auch mit "print" von &lt;stdin&gt; erfragt werden<br>
if (!$ARGV[0]) {print "The program line shall be: program.pl ficha_embl\n";}
$fichero = $ARGV[0];<br>
# &Ouml;ffne die Datei zum Lesen<br>
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";<br>
# Zuerst &uuml;berpr&uuml;fen wir die Sequenz wie im zweiten Beispiel<br>
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^FT CDS/) {
$_ =~ tr/../ /;
($a1,$a2,$a3,$a4) = split (" ",$_);
}
elsif ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
last if ($_ =~ /^\/\//);<br>
# Zahlen und Leerzeichen l&ouml;schen<br>
$_ =~ tr/0-9/ /;
$_ =~ s/\s//g;
$secuencia.=$_;
}
}
close (FICHA);<br>
# Hier definieren wir ein "Associate Array", das
# Aminos&auml;uren und Nukleotide zuordnet (ebenfalls in
# einer eigenen Funktion f&uuml;r den Fall, da&szlig; derselbe Code
# in einem anderen Programm benutzt wird)<br>
my(%codigo_genetico) = (
'TCA' =&gt; 'S',# Serin
'TCC' =&gt; 'S',# Serin
'TCG' =&gt; 'S',# Serin
'TCT' =&gt; 'S',# Serin
'TTC' =&gt; 'F',# Phenylalanin
'TTT' =&gt; 'F',# Phenylalanin
'TTA' =&gt; 'L',# Leucin
'TTG' =&gt; 'L',# Leucin
'TAC' =&gt; 'Y',# Tyrosin
'TAT' =&gt; 'Y',# Tyrosin
'TAA' =&gt; '*',# stop
'TAG' =&gt; '*',# stop
'TGC' =&gt; 'C',# Cystein
'TGT' =&gt; 'C',# Cystein
'TGA' =&gt; '*',# stop
'TGG' =&gt; 'W',# Tryptophan
'CTA' =&gt; 'L',# Leucin
'CTC' =&gt; 'L',# Leucin
'CTG' =&gt; 'L',# Leucin
'CTT' =&gt; 'L',# Leucin
'CCA' =&gt; 'P',# Prolin
'CCC' =&gt; 'P',# Prolin
'CCG' =&gt; 'P',# Prolin
'CCT' =&gt; 'P',# Prolin
'CAC' =&gt; 'H',# Histidin
'CAT' =&gt; 'H',# Histidin
'CAA' =&gt; 'Q',# Glutamin
'CAG' =&gt; 'Q',# Glutamin
'CGA' =&gt; 'R',# Arginin
'CGC' =&gt; 'R',# Arginin
'CGG' =&gt; 'R',# Arginin
'CGT' =&gt; 'R',# Arginin
'ATA' =&gt; 'I',# Isoleucin
'ATC' =&gt; 'I',# Isoleucin
'ATT' =&gt; 'I',# Isoleucin
'ATG' =&gt; 'M',# Methionin
'ACA' =&gt; 'T',# Threonin
'ACC' =&gt; 'T',# Threonin
'ACG' =&gt; 'T',# Threonin
'ACT' =&gt; 'T',# Threonin
'AAC' =&gt; 'N',# Asparagin
'AAT' =&gt; 'N',# Asparagin
'AAA' =&gt; 'K',# Lysin
'AAG' =&gt; 'K',# Lysin
'AGC' =&gt; 'S',# Serin
'AGT' =&gt; 'S',# Serin
'AGA' =&gt; 'R',# Arginin
'AGG' =&gt; 'R',# Arginin
'GTA' =&gt; 'V',# Valin
'GTC' =&gt; 'V',# Valin
'GTG' =&gt; 'V',# Valin
'GTT' =&gt; 'V',# Valin
'GCA' =&gt; 'A',# Alanin
'GCC' =&gt; 'A',# Alanin
'GCG' =&gt; 'A',# Alanin
'GCT' =&gt; 'A',# Alanin
'GAC' =&gt; 'D',# Asparagins&auml;ure
'GAT' =&gt; 'D',# Asparagins&auml;ure
'GAA' =&gt; 'E',# Glutamins&auml;ure
'GAG' =&gt; 'E',# Glutamins&auml;ure
'GGA' =&gt; 'G',# Glycin
'GGC' =&gt; 'G',# Glycin
'GGG' =&gt; 'G',# Glycin
'GGT' =&gt; 'G',# Glycin
);<br>
# &Uuml;bersetze jedes Codon in die entsprechende Aminos&auml;ure
# und f&uuml;ge sie der Proteinsequenz hinzu<br>
print $a3;
for($i=$a3 - 1; $i &lt; $a4 - 3 ; $i += 3) {
$codon = substr($secuencia,$i,3);<br>
# Schreibe das Codon gro&szlig; (statt klein wie im EMBL-Format)<br>
$codon =~ tr/a-z/A-Z/;
$protein.= codon2aa($codon);
}
print "This proteinic sequence of the gen:\n$secuencia\nis the following:\n$protein\n\n";
exit;
</pre>

    <A NAME="374lfindex5">&nbsp;</A>
<H2>Referenzen</H2>


    <ul>
      <li><a href="http://bioperl.org/">http://bioperl.org/</a><br>
      <br>
      </li>

      <li><a href=
      "http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html">
      http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html</a><br>

      <br>
      </li>

      <li>
        <p><a href=
        "http://www.unix.org.ua/orelly/perl/prog3/">http://www.unix.org.ua/orelly/perl/prog3/</a><br>

        <br>
        </p>
      </li>

      <li><strong>Beispieldateien:</strong><br>
      - <a href=
      "../../common/src2/article374/human_kinases_swissprot.txt">human_kinases_swissprot.txt</a><br>

      - <a href=
      "../../common/src2/article374/query_seq.txt">query_seq.txt</a><br>

      - <a href=
      "../../common/src2/article374/ecoli_embl.txt">ecoli_embl.txt</a><br>

      <br>
      </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=74: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Talkback f&uuml;r diesen Artikel</h2>
Jeder Artikel hat seine eigene Seite f&uuml;r Kommentare und R&uuml;ckmeldungen. Auf dieser Seite kann jeder eigene Kommentare abgeben und die Kommentare anderer Leser sehen:
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">&nbsp;Talkback Seite&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Home</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Zum index dieser Ausgabe</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Der LinuxFocus Redaktion schreiben</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Carlos     Andr&eacute;s P&eacute;rez</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Autoren und &Uuml;bersetzer:</font>
<TABLE summary="translators">
  <tr><td><font size="2">es --&gt; -- : Carlos Andr&eacute;s P&eacute;rez <small>&lt;caperez /at/ usc.edu.co&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; es: Carlos Andr&eacute;s P&eacute;rez &lt;caperez /at/ usc.edu.co&gt;</font></td></tr>
  <tr><td><font size="2">en --&gt; de: Viktor Horvath &lt;ViktorHorvath(at)gmx.net&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-05-18, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
