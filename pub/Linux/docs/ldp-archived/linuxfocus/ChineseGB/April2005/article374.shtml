<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=gb2312">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf374, SoftwareDevelopment: LINUX &amp; PERL, 学习和分析生物学信息的电脑工具</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Carlos     Andr&eacute;s P&eacute;rez
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: LINUX &amp; PERL, 学习和分析生物学信息的电脑工具
 =LF=NUMBER: 374
 =LF=ANAME_: article374.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">站点地图</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">索引</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.shtml"><FONT color=
                 "#DDDDDD" size="2">搜索</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">新闻</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/"><FONT color=
           "#FFFFFF">过往期刊</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.shtml"><FONT color=
           "#FFFFFF">链接</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">关于LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">This document is available in: <A href="../../English/April2005/article374.shtml">English</a> &nbsp;<A href="../../Castellano/April2005/article374.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/April2005/article374.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/April2005/article374.shtml">Deutsch</a> &nbsp;<A href="../../Francais/April2005/article374.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/CarlosAndresPerez.jpg" alt=
    "La Foto">
<BR>by  Carlos Andr&eacute;s P&eacute;rez <br> <small>&lt;caperez /at/ usc.edu.co&gt;</small>
<BR><BR>
<I>关于作者:</I><BR>
<!-- aboutauthor_start -->
<p>Carlos Andr&eacute;s P&eacute;rez 是分子模拟的专家，生物学博士，GIEV 的技术顾问(GIEV, the Grupo de Investigaci&oacute;n en Educaci&oacute;n Virtual (GIEV) - Research Group in Virtual Learning，即虚拟学习技术研究小组)。地址: Universidad Santiago de Cali, Calle 5&ordf;
    carrera 62 Campus Pampalinda, Cali &ndash; Colombia.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO gb -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>目录</i>:
<UL>
  <LI><A HREF="#374lfindex0">生物信息学（Bioinformatics）</A></LI>
  <LI><A HREF="#374lfindex1">Perl</A></LI>
  <LI><A HREF="#374lfindex2">用Perl来文件管理:</A></LI>
  <LI><A HREF="#374lfindex3">查找氨基酸的模式（Search for aminoacid patterns）</A></LI>
  <LI><A HREF="#374lfindex4">计算氨基酸的频度（Calculus of aminoacid frequences）:</A></LI>
  <LI><A HREF="#374lfindex5">Bibliographic References</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">对这篇文章发表评论</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
 

<H2>LINUX &amp; PERL, 学习和分析生物学信息的电脑工具</H2>
 <img src="../../common/images2/article374.jpg" alt=
    "[Illustration]" hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>摘要</i>:
<P>
<!-- articleabstract_start -->

    这篇文章介绍了对DNA、RNA和蛋白质序列数据库的生物信息提取时，在Unix上的Perl程序的一些优点。这些Perl程序可用来作数据比对处理和分析。人类基因组计划和DNA克隆技术的发展加速了这个领域的进步。这些领域每天产生的大量信息使得我们处理这些信息的方式不得不有所改进。
    <br><br>
    不同基因组（生物有机体上的一组基因）上激增的生物信息推动着生物信息学成为处理分析这些数据的基础手段。

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="374lfindex0">&nbsp;</A>
<H2>生物信息学（Bioinformatics）</H2>


    <p>生物信息学开始于科学家们将生物学数据以数字格式存放并且用程序来处理这些数据。很长一段时间以来，生物信息学都限制在序列的分析上。然而，随着构建分子的结构模型的重要性开始显现，电子计算机也开始成为理论生物化学的重要工具。每天都不断有关于分子3D信息和数据被采集，人们对基因的认识和研究也从单个的基因研究转变为从整体上或者扩展式的研究。由于生物信息学的发展，现在更容易理解蛋白质之间为何相互之间那样作用、又是如何通过新陈代谢来组织相互的。而且我们现在也越来越清醒的认识到组织好这些数据的重要性。</p>

    <p>生物信息学里面至少有两点特征使她变得非常有趣。其一，生物信息学的研究目标是找出各种生命分子的关系；而这个目标恰恰是一个有趣的程序设计问题，因为这就需要我们联合并整合我们得到的那些信息，然后从中得到对生命活动的一些整体的和有效的一些认识。我们还发现，将计算机科学中的不同领域的知识结合起来是非常必要的，比如数据的管理和整合、高效可靠的算法和强劲的硬件－－格点技术、多处理器的使用等。

    <A NAME="374lfindex1">&nbsp;</A>
<H2>Perl</H2>


    <p><strong>Larry Wall</strong> 于1986年开始开发Perl。 Perl是一种解释型的语言，是处理文本、文件和进程的强大的工具。Perl使得我们能够很快的开发出小程序。可以说，Perl是高级编程语言（例如C）和脚本语言（如bash）的一种有效组合。
    <br>
    <br>
    Perl程序可以运行在多种操作系统／平台上，尽管Perl是在Unix上诞生并且快速发展的。由于Perl广泛的用于web程序设计，其发展很快便超出了其预想。在Perl之前，人们使用<strong>awk</strong>,<strong>thirst</strong>和<strong>grep</strong> 来分析文件并提取信息。</p>

    <p>Perl将这些UNIX上广泛使用的工具统一在一个程序里面，并将这些功能扩展和现代化以适应各种需求。</p>

    <p>Perl是一种免费／自由的程序语言，可以运行在现代生物实验室里使用的各种操作系统上。在UNIX和MacOSX上，它是预安装好的，在其他系统上，得先安装好Perl。<a href="http://www.cpan.org/">http://www.cpan.org</a> 网站上有安装和使用Perl的很多实用信息。</p>

    <p>在Linux下，运行Perl程序，是将这个程序的文件名作为perl 这个命令的一个参数，然后perl 会依次解释执行这个程序里的命令。</p>

    <p>另一种常用的方法，不需要运行perl 这个命令，为此，我们需要做以下两件事： (a)在程序的文件里加入一行特殊的注释：
</p>
<pre class="code">
#!/usr/bin/env perl<br>
print "Hi\n";
</pre>

    <p>(b)&nbsp;保存此文件并给它加上可执行的属性：</p>
<pre class="code">
% chmod +x greetings.pl
</pre>

    <p>这样，我们就可以直接通过文件名来运行这个程序：
<pre class="code">
% ./greetings.pl
</pre>
    </p>

    <A NAME="374lfindex2">&nbsp;</A>
<H2>用Perl来文件管理:</H2>


    <p>当我们有了文本格式的分子序列，我们可以用Perl写一个序列搜索工具。下面的例子我们可以看到如何在SWISS-PROT(db_human_swissprot)格式的数据库中用id码来查找蛋白质序列。</p>
<pre class="code">
#!/usr/bin/perl<br>
# Look for aminoacid sequence in a database<br>
# SWISS-PROT formated, with a given id code<br>
# Ask for the code in the ID field<br>
# and it assigns it from the input(STDIN)to a variable<br>
print "Enter the ID to search: ";
$id_query=&lt;STDIN&gt;;
chomp $id_query;
# We open the database file<br>
# but if it isn't possible the program ends<br>
open (db, "human_kinases_swissprot.txt") ||
 die "problem opening the file human_kinases_swissprot.txt\n";
# Look line by line in the database<br>
while (&lt;db&gt;) {
chomp $_;
# Check if we are in the ID field
if ($_ =~ /^ID/) {
# If it is possitive we gather the information<br>
# breaking the line by spaces<br>
($a1,$id_db) = split (/\s+/,$_);
# but if there is no coincidence of ID we continue to the following<br>
next if ($id_db ne $id_query);
# When they coincide, we put a mark<br>
$signal_good=1;
# Then we check the sequence field<br>
# and if the mark is 1 (chosen sequence)
# If possitive, we change the mark to 2,to collect the sequence<br>
} elsif (($_ =~ /^SQ/) &amp;&amp; ($signal_good==1)) {
$signal_good=2;
# Finally, if the mark is 2, we present each line<br>
# of the sequence, until the line begins with //
# is such case we broke the while
} elsif ($signal_good == 2) {
last if ($_ =~ /^\/\//);
print &quot;$_\n&quot;;
}
}
# When we left the while instruction we check the mark<br>
# if negative that means that we don't find the chosen sequence<br>
# that will give us an error<br>
if (!$signal_good) {
print &quot;ERROR: &quot;.&quot;Sequence not found\n&quot;;
}
# Finally, we close the file
# that still si open<br>
close (db);
exit;
</pre>
    <br>

    <A NAME="374lfindex3">&nbsp;</A>
<H2>查找氨基酸的模式（Search for aminoacid patterns）</H2>

<pre class="code">
#!/usr/bin/perl
# Searcher for aminoacid patterns
# Ask the user the patterns for search
print "Please, introduce the pattern to search in query.seq: ";
$patron = &lt;STDIN&gt;;
chomp $patron;
# Open the database file
# but if it can't it ends the program
open (query, "query_seq.txt") || die "problem opening the file query_seq.txt\n";
# Look line by line the SWISS-PROT sequence
while (&lt;query&gt;) {
chomp $_;
# When arrives to the SQ field,put the mark in 1<br>
   if ($_ =~ /^SQ/) {<br>
         $signal_seq = 1;
# When arrive to the end of sequence, leave the curl<br>
# Check that this expression is put before to check<br>
# the mark=1,because this line doesn't belong to the aminoacid sequence<br>
   } elsif ($_ =~ /^\/\//) {<br>
         last;
# Check the mark if it is equal to 1, if possitive<br>
# eliminate the blank spaces in the sequence line<br>
# and join every line in a new variable<br>
# To concatenate, we also can do:<br>
# $secuencia_total.=$_;<br>
   } elsif ($signal_seq == 1) {<br>
         $_ =~ s/ //g;<br>
         $secuencia_total=$secuencia_total.$_;<br>
   }<br>
  }
# Now check the sequence, collected in its entirety,<br>
# for the given pattern<br>
  if ($secuencia_total =~ /$patron/) {<br>
   print &quot;The sequence query.seq contains the pattern $patron\n&quot;;<br>
  } else {<br>
   print &quot;The sequence query.seq doesn't contains the pattern $patron\n&quot;;<br>
  }
# Finally we close the file<br>
# and leave the program<br>
close (query);<br>
exit;
</pre>

    <p>如果想知道数据库里模式的具体位置，我们必须使用特殊变量`$&amp;'，这个变量在对正则表达式求值后仍然保存着找到的模式（应该将它放在`<strong>if ($$secuencia_total&gt;= ~/$$patron&gt;/ 一句的后面）。另外，可以将变量` $ ` ' 和` $ &acute; '组合起来使用，它们会将找到的模式的左右位置的信息保存。将这些变量正确的加入前面的程序中，我们就可以给出模式的确切位置。注意：<strong>length</strong>也是非常有用的，它会给出一串数据的长度。</p>

    <p>&nbsp;</p>
<pre class="code">
# Only we need to change the if where the pattern was found
# Now check the sequence, collected in its entirety,<br>
# for the given pattern<br>
# and check its position in the sequence<br>
  if ($secuencia_total =~ /$patron/) {<br>
   $posicion=length($`)+1;<br>
   print &quot;The sequence query_seq.txt contains the pattern $patron in the following position $posicion\n&quot;;
  } else {<br>
  print &quot;The sequence query_seq.txt doesn't contains the pattern $patron\n&quot;;<br>
  }
</pre>

    <A NAME="374lfindex4">&nbsp;</A>
<H2>计算氨基酸的频度（Calculus of aminoacid frequences）:</H2>


    <p>不同蛋白质里，特定的氨基酸出现的频度是不同的，这是因为他们处在不同的环境里面、并且功能不同。下面，我们给出一个例子来展示如何计算给定氨基酸序列里某种氨基酸频度。</p>
<pre class="code">
<br>
#!/usr/bin/perl
# Calculates the frequency of aminoacid in a proteinic sequence
# Gets the file name from the command line
# (SWISS-PROT formatted)
# Also can be asked with print from the &lt;STDIN&gt;
if (!$ARGV[0]) {print &quot;The execution line shall be: program.pl file_swissprot\n&quot;;}
$fichero = $ARGV[0];
# Initialize the variable $errores
my $errores=0;
# Open the file for reading
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";
# First we check the sequence as did in the example 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
   last if ($_ =~ /^\/\//);
   $_ =~ s/\s//g;
   $secuencia.=$_;
}
}
close (FICHA);
# Now use a curl that checks every position of the aminoacid
# in the sequence (from a funcion of its own,that can be used after in other
# programs)
comprueba_aa ($secuencia);
# Print the results to the screen
# First the  20 aminoacids and then the array with their frequencies
# In this case 'sort' can't be used in foreach,
# because the array contains the frequencies (numbers)
print&quot;A\tC\tD\tE\tF\tG\tH\tI\tK\tL\tM\tN\tP\tQ\tR\tS\tT\tV\tW\tY\n&quot;;
foreach $each_aa (@aa) {
print &quot;$each_aa\t&quot;;
}
# Ten it gives the possible errors
# and ends the program
print "\nerrores = $errores\n";
exit;
# Functions
# This one calculates each aminoacid frequency
# from a proteinic sequence
sub comprueba_aa {
# Gets the sequence
my ($secuencia)=@_;
# and runs aminoacid by aminoacid, using a for running
# from 0 until the sequence length
for ($posicion=0 ; $posicion&lt;length $secuencia ; $posicion++ ) {
# Gets the aminoacid
$aa = substr($secuencia, $posicion, 1);
# and checks which one is using if
# when it is checked it aggregates 1 to the correspondant frequency
# in an array using a pointer for each one
# ordered in alphabetic way
if ( $aa eq 'A' ) {
$aa[0]++;
} elsif ( $aa eq 'C' ) {
$aa[1]++;
} elsif ( $aa eq 'D' ) {
$aa[2]++;
} elsif ( $aa eq 'E' ) {
$aa[3]++;
} elsif ( $aa eq 'F' ) {
$aa[4]++;
} elsif ( $aa eq 'G' ) {
$aa[5]++;
} elsif ( $aa eq 'H' ) {
$aa[6]++;
} elsif ( $aa eq 'I' ) {
$aa[7]++;
} elsif ( $aa eq 'K' ) {
$aa[8]++;
} elsif ( $aa eq 'L' ) {
$aa[9]++;
} elsif ( $aa eq 'M' ) {
$aa[10]++;
} elsif ( $aa eq 'N' ) {
$aa[11]++;
} elsif ( $aa eq 'P' ) {
$aa[12]++;
} elsif ( $aa eq 'Q' ) {
$aa[13]++;
} elsif ( $aa eq 'R' ) {
$aa[14]++;
} elsif ( $aa eq 'S' ) {
$aa[15]++;
} elsif ( $aa eq 'T' ) {
$aa[16]++;
} elsif ( $aa eq 'V' ) {
$aa[17]++;
} elsif ( $aa eq 'W' ) {
$aa[18]++;
} elsif ( $aa eq 'Y' ) {
$aa[19]++;
# If the aminoacid is not found
# it aggregates 1 to the errors
} else {
print "ERROR: Aminoacid not found: $aa\n";
$errores++;
}
}
# Finally returns to the frequency array
return @aa;
}
</pre>

    <p>下面就让我们跟着大自然的步伐，看看细胞中的信息流向了何方。其中之一就是转录，RNA
    从DNA（基因）中复制出遗传信息，然后又将这些信息传递给蛋白质或者氨基酸序列。为此，我们必须使用与氨基酸对应的基因密码--所谓的RNA／DNA三联密码子。我们要提取<em>Escherichia coli（一种埃[舍利]希氏杆菌属的大肠杆菌）</em> 的基因所对应的氨基酸序列，而这些信息都是以EMBL（European Molecular Biology Laboratory）要求的格式。做完这些转换之后，我们将与已有的转录信息校验。对这个例子，非常有必要引进数组的关联变量（associative variables of arrays）和哈希表。</p>
<pre class="code">
<br>
#!/usr/bin/perl
# Translates an ADN sequence from an EMBL fiche
# to the aminoacid correspondant
# Gets the file name from the command line
# (SWISS-PROT formatted)
# Also can be asked with print from the &lt;STDIN&gt;
if (!$ARGV[0]) {print "The program line shall be: program.pl ficha_embl\n";}
$fichero = $ARGV[0];
# Open the file for reading
open (FICHA, "$fichero") || die "problem opening the file $fichero\n";
# First we check the sequence as did in the example 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^FT CDS/) {
$_ =~ tr/../ /;
($a1,$a2,$a3,$a4) = split (" ",$_);
}
elsif ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
last if ($_ =~ /^\/\//);
# Eliminate numbers and spaces
$_ =~ tr/0-9/ /;
$_ =~ s/\s//g;
$secuencia.=$_;
}
}
close (FICHA);
# Now we define an associate array with the correpondence
# of every aminoacids with their nucleotide
# correspondants (also in an own function,
# for if the same genetic code is used in other program
my(%codigo_genetico) = (
'TCA' =&gt; 'S',# Serine
'TCC' =&gt; 'S',# Serine
'TCG' =&gt; 'S',# Serine
'TCT' =&gt; 'S',# Serine
'TTC' =&gt; 'F',# Fenilalanine
'TTT' =&gt; 'F',# Fenilalanine
'TTA' =&gt; 'L',# Leucine
'TTG' =&gt; 'L',# Leucine
'TAC' =&gt; 'Y',# Tirosine
'TAT' =&gt; 'Y',# Tirosine
'TAA' =&gt; '*',# Stop
'TAG' =&gt; '*',# Stop
'TGC' =&gt; 'C',# Cysteine
'TGT' =&gt; 'C',# Cysteine
'TGA' =&gt; '*',# Stop
'TGG' =&gt; 'W',# Tryptofane
'CTA' =&gt; 'L',# Leucine
'CTC' =&gt; 'L',# Leucine
'CTG' =&gt; 'L',# Leucine
'CTT' =&gt; 'L',# Leucine
'CCA' =&gt; 'P',# Proline
'CCC' =&gt; 'P',# Proline
'CCG' =&gt; 'P',# Proline
'CCT' =&gt; 'P',# Proline
'CAC' =&gt; 'H',# Hystidine
'CAT' =&gt; 'H',# Hystidine
'CAA' =&gt; 'Q',# Glutamine
'CAG' =&gt; 'Q',# Glutamine
'CGA' =&gt; 'R',# Arginine
'CGC' =&gt; 'R',# Arginine
'CGG' =&gt; 'R',# Arginine
'CGT' =&gt; 'R',# Arginine
'ATA' =&gt; 'I',# IsoLeucine
'ATC' =&gt; 'I',# IsoLeucine
'ATT' =&gt; 'I',# IsoLeucine
'ATG' =&gt; 'M',# Methionina
'ACA' =&gt; 'T',# Treonina
'ACC' =&gt; 'T',# Treonina
'ACG' =&gt; 'T',# Treonina
'ACT' =&gt; 'T',# Treonina
'AAC' =&gt; 'N',# Asparagina
'AAT' =&gt; 'N',# Asparagina
'AAA' =&gt; 'K',# Lisina
'AAG' =&gt; 'K',# Lisina
'AGC' =&gt; 'S',# Serine
'AGT' =&gt; 'S',# Serine
'AGA' =&gt; 'R',# Arginine
'AGG' =&gt; 'R',# Arginine
'GTA' =&gt; 'V',# Valine
'GTC' =&gt; 'V',# Valine
'GTG' =&gt; 'V',# Valine
'GTT' =&gt; 'V',# Valine
'GCA' =&gt; 'A',# Alanine
'GCC' =&gt; 'A',# Alanine
'GCG' =&gt; 'A',# Alanine
'GCT' =&gt; 'A',# Alanine
'GAC' =&gt; 'D',# Aspartic Acid
'GAT' =&gt; 'D',# Aspartic Acid
'GAA' =&gt; 'E',# Glutamic Acid
'GAG' =&gt; 'E',# Glutamic Acid
'GGA' =&gt; 'G',# Glicine
'GGC' =&gt; 'G',# Glicine
'GGG' =&gt; 'G',# Glicine
'GGT' =&gt; 'G',# Glicine
);
# Translate every codon in its correspondant aminoacid
# and aggregates to the proteinic sequence
print $a3;
for($i=$a3 - 1; $i &lt; $a4 - 3 ; $i += 3) {
$codon = substr($secuencia,$i,3);
# Pass the codon from subcase (EMBL format) to uppercase
$codon =~ tr/a-z/A-Z/;
$protein.= codon2aa($codon);
}
print "This proteinic sequence of the gen:\n$secuencia\nis the following:\n$protein\n\n";
exit;
</pre>

    <A NAME="374lfindex5">&nbsp;</A>
<H2>Bibliographic References</H2>


    <ul>
      <li><a href="http://bioperl.org/">http://bioperl.org/</a><br>
      <br>
      </li>

      <li><a href=
      "http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html">
      http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html</a><br>

      <br>
      </li>

      <li>
        <p><a href=
        "http://www.unix.org.ua/orelly/perl/prog3/">http://www.unix.org.ua/orelly/perl/prog3/</a><br>

        <br>
        </p>
      </li>

      <li><strong>Example files :</strong><br>
      - <a href=
      "../../common/src2/article374/human_kinases_swissprot.txt">human_kinases_swissprot.txt</a><br>

      - <a href=
      "../../common/src2/article374/query_seq.txt">query_seq.txt</a><br>

      - <a href=
      "../../common/src2/article374/ecoli_embl.txt">ecoli_embl.txt</a><br>

      <br>
      </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=74: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>对这篇文章发表评论</h2>
每篇文章都有各自的反馈页面。在这个页面里，您可以提交评论，也可以查看其他读者的评论：
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">&nbsp;反馈页面&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF 首页</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">Go to the index of this issue</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">主页由LinuxFocus编辑组维护</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Carlos     Andr&eacute;s P&eacute;rez</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>翻译信息:</font>
<TABLE summary="translators">
  <tr><td><font size="2">es --&gt; -- : Carlos Andr&eacute;s P&eacute;rez <small>&lt;caperez /at/ usc.edu.co&gt;</small></font></td></tr>
  <tr><td><font size="2">en --&gt; CN: 汪 君 &lt;daxiawj(Q)gmail.com&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-05-06, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
