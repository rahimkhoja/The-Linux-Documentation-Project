<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.51">
 <META NAME="LFCATEGORY" CONTENT="Hardware">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf352, Hardware: Programando el microcontrolador AVR con GCC usando libc 1.0.4</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Guido     Socher
 =LF=CAT___: Hardware
 =LF=TITLE_: Programando el microcontrolador AVR con GCC usando libc 1.0.4
 =LF=NUMBER: 352
 =LF=ANAME_: article352.shtml
 =LF=PARSER: 2.51
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Este documento est&aacute; disponible en los siguientes idiomas: <A href="../../English/November2004/article352.shtml">English</a> &nbsp;<A href="../../Castellano/November2004/article352.shtml">Castellano</a> &nbsp;<A href="../../Deutsch/November2004/article352.shtml">Deutsch</a> &nbsp;<A href="../../Francais/November2004/article352.shtml">Francais</a> &nbsp;<A href="../../Italiano/November2004/article352.shtml">Italiano</a> &nbsp;<A href="../../Turkce/November2004/article352.shtml">Turkce</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images/Guido-S.gif" alt=
    "[Photo of the Author]" height="164" width="173">
<BR>por  Guido Socher <a href="http://linuxfocus.org/~guido/"><font size="1">(homepage)</font></a>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>A Guido le gusta Linux porque es un buen sistema donde desarrollar uno mismo su propio hardware.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO es -->
<BR><BR><I>Traducido al espa&ntilde;ol por:</I><BR>
Alberto Pardo <small>&lt;apardoyo(at)yahoo.es&gt;</small>
<br>
<!--
 =LF=TRANSTO=es: Alberto Pardo
-->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#352lfindex0">Introducci&oacute;n</A></LI>
  <LI><A HREF="#352lfindex1">Instalaci&oacute;n del software : Todo lo que necesitas</A></LI>
  <LI><A HREF="#352lfindex2"> Instalacion del Software : las bintuils de GNU </A></LI>
  <LI><A HREF="#352lfindex3">Instalaci&oacute;n del Software : AVR gcc</A></LI>
  <LI><A HREF="#352lfindex4">Instalaci&oacute;n del Software : La libreria de C de AVR</A></LI>
  <LI><A HREF="#352lfindex5">Instalaci&oacute;n del Software : El Programador</A></LI>
  <LI><A HREF="#352lfindex6">Un peque&ntilde;o proyecto de test</A></LI>
  <LI><A HREF="#352lfindex7">Hardware necesario</A></LI>
  <LI><A HREF="#352lfindex8">Construyendo el hardware del programador</A></LI>
  <LI><A HREF="#352lfindex9">Esribiendo el software</A></LI>
  <LI><A HREF="#352lfindex10">La compilaci&oacute;n y la Carga</A></LI>
  <LI><A HREF="#352lfindex11">Algunas binutils interesantes</A></LI>
  <LI><A HREF="#352lfindex12">Ideas y sugerencias </A></LI>
  <LI><A HREF="#352lfindex13">Referencias</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=352">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<H2>Programando el microcontrolador AVR con GCC usando libc 1.0.4</H2>
 <img src="../../common/images2/article352/illustration.gif"
    alt="[Illustration]" hspace="10" width="208" height="148">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->

    El microcontrolador de 8 bits AVR de tecnologia RISC de Atmel
    es un microcontrolador muy popular. Este microcontrolador es
    un chip con EPROM, Ram, un conversor Anal&oacute;gico-Digital, unas
    cuantas entradas y salidas digitales, timers, una UART para
    comunici&oacute;n RS 232 y muchas otras cosas.
     <br><br>
     Sin embargo, lo mejor es su entorno de programaci&oacute;n disponible
    en Linux: Se puede programar este microcontrolador in C usando
    GCC.<br><br>
    Ya escrib&iacute; en <a href=
    "../March2002/article231.shtml">Marzo del 2002 un art&iacute;culo </a>
    sobre el mismo tema. Han canbiado muchas cosas en el desarrollo
    de avr-libc y Atmel ha dejado de fabricar el microcontrolador
    AT90S4433 que use en el 2002 . Por lo que este art&iacute;culo es una
    actualizaci&oacute;n del publicado en Marzo del 2002. Utilizar&eacute; la
    libc-1.0.4 y el microcontrolador ATmega8. <br><br>

     Este art&iacute;culo s&oacute;lo es una introducci&oacute;n. En posteriores art&iacute;culos
    construiremos interesantes montajes basados en este microcontrolador.
    Pero ahora vamos a conocer al ATmega8.

    
<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


    <A NAME="352lfindex0">&nbsp;</A>
<H2>Introducci&oacute;n</H2>

     Mucha gente se interes&oacute; por la programaci&oacute;n de microcontroladores
    despues del art&iacute;culo que escrib&iacute; en el 2002.Sin embargo tener el
    sistema de desarrollo listo y funcionando es el proceso m&aacute;s complicado.


    Si algo falla y no tienes pistas de por donde puede fallar, entonces
    es el momento de planterase una serie de posibilidades como causantes
    del fallo : &iquest;El cable esta mal? &iquest;Es un fallo del circuito? &iquest;Es correcta
    la instalaci&oacute;n? &iquest;Esta desactivado el puerto paralelo en la Bios?.
    <a href="http://shop.tuxgraphics.org/electronic/microcontroller.html">
    <img src="../../common/images2/article352/linuxavrcd_th.jpg" align=
    "right" width="150" height="213"></a> <br>
     <br>
    Para facilitar la entrada al excitante mundo de los microcontroladores
    la empresa  <a href="http://shop.tuxgraphics.org/electronic/microcontroller.html">shop.tuxgraphics.org</a>
    ofrece un CD botable con el manual y el hardware de programaci&oacute;n.
    Todo lo que necesitas es arrancar con este CD. No hace falta instalar
    el software, por lo que no se modificara nada en tu ordenador.<br>
     <br>
     Particularmente, el uso de este CD autoarrancable me presenta la
    ventaja de no preocuparme por todas las actualizaciones del kernel
    o instalaciones de software en mi PC. Si tengo que actualizar el
    software del microcontrolador, arranco desde el CD y todo lo tengo
    listo y funcionando. <br>
     <br>
     Independientemente de este CD, esplicar&eacute; a continuaci&oacute;n la instalaci&oacute;n
    del entorno de desarrollo de avr en GCC.
     Si tienes el CD de tuxgraphics continua en el cap&iacute;tulo "Un peque&ntilde;o
    proyecto de test".


    <A NAME="352lfindex1">&nbsp;</A>
<H2>Instalaci&oacute;n del software : Todo lo que necesitas</H2>


    <p>Para usar el entorno de desarrollo GNU C necesitaras el siguiente
    software:</p>

    <table border="1">
      <tr>
        <td>binutils-2.15.tar.bz2</td>

        <td>Disponible en:<br>
         ftp://ftp.gnu.org/gnu/binutils/<br>
         o cualquier mirror. Ejemplo:<br>
         ftp://gatekeeper.dec.com/pub/GNU/binutils/</td>
      </tr>

      <tr>
        <td>gcc-core-3.4.2.tar.bz2</td>

        <td>Disponible en: ftp://ftp.gnu.org/gnu/gcc/<br>
         o cualquier mirror. Ejemplo:<br>
         ftp://gatekeeper.dec.com/pub/GNU/gcc/</td>
      </tr>

      <tr>
        <td>avr-libc-1.0.4.tar.bz2</td>

        <td>La libreria AVR C disponible en:
        http://savannah.nongnu.org/projects/avr-libc/</td>
      </tr>

      <tr>
        <td>uisp-20040311.tar.bz2</td>

        <td>El software de programaci&oacute;n AVR  disponible en:
        http://savannah.nongnu.org/projects/uisp</td>
      </tr>
    </table>
    <br>
    <br>
     Instalaremos todos los programas en /usr/local/avr. De esta
    manera los mantendremos separados del compilador de C de Linux.
    Crea este directorio con el comando:

<pre class="code">
    mkdir /usr/local/avr

A&ntilde;ades el camino en el PATH:
    mkdir /usr/local/avr/bin
    export PATH=/usr/local/avr/bin:${PATH}
</pre>

    <A NAME="352lfindex2">&nbsp;</A>
<H2> Instalacion del Software : las bintuils de GNU </H2>

     El paquete de las binutils proporciona todas la utilidades
    necesarias a bajo nivel para construir los fichero objeto.
    Estas utilidades incluyen: Un ensamblador AVR (avs-asm),un
    enlazador o linkador (avr-ld),la libreria "handling tools"
    (avr-ranlib,avr-ar), los programas para generar los ficheros
    objeto para poder ser cargados a la EEPROM del microcontrolador
    (avr-objcopy), el desensamblador (avr-objdump) y las utilidades
    avr-strip y avr-size.
     <br>
     <br>
     Ejecuta las siguientes instruciones para construir e instalar las
     binuitls:

<pre class="code">
tar jxvf binutils-2.15.tar.bz2
cd binutils-2.15/
mkdir obj-avr
cd obj-avr
../configure --target=avr --prefix=/usr/local/avr --disable-nls
make

# as root:
make install
</pre>
    <br>
    <br>
     A&ntilde;ade la linea /usr/local/avr/lib al fichero /etc/ld.so.conf
    y ejecuta el comando /sbin/ldconfig para reconstruir la cache
    del enlazador o linkador.


    <A NAME="352lfindex3">&nbsp;</A>
<H2>Instalaci&oacute;n del Software : AVR gcc</H2>

    avr-gcc ser&aacute; nuestro compilador de C. <br>
     <br>
     Ejecuta el siguiente comando para construirlo e instalarlo:

<pre class="code">
tar jxvf gcc-core-3.4.2.tar.bz2
cd gcc-3.4.2

mkdir obj-avr
cd obj-avr
../configure --target=avr --prefix=/usr/local/avr --disable-nls --enable-language=c

make

# as root:
make install

</pre>

    <A NAME="352lfindex4">&nbsp;</A>
<H2>Instalaci&oacute;n del Software : La libreria de C de AVR</H2>

    La actual libreria de C es lo suficientemente estable comparada
    con la que presente en Marzo del 2002.<br>

    Ejecuta el siguiente comando para construirlo e instalarlo
<pre class="code">
tar jxvf avr-libc-1.0.4.tar.bz2
cd avr-libc-1.0.4
PREFIX=/usr/local/avr
export PREFIX
sh -x ./doconf
./domake

cd build
#as root:
make install

</pre>

    <A NAME="352lfindex5">&nbsp;</A>
<H2>Instalaci&oacute;n del Software : El Programador</H2>

    El software de programaci&oacute;n carga el codigo objeto en la
    EEPROM de nuestro microcontrolador.  <br>
     <br>
     El programador uisp para Linux es un buen programador. Se puede
    usar desde el "Makefile". Tan solo con a&ntilde;adir la regla "make load",
    podras compilar y cargar el software en un paso.<br>
     <br>
     Ver como se instala uisp:
<pre class="code">
tar jxvf uisp-20040311.tar.bz2.tar
cd uisp-20040311
./configure --prefix=/usr/local/avr
make

# as root:
make install

</pre>

    <A NAME="352lfindex6">&nbsp;</A>
<H2>Un peque&ntilde;o proyecto de test</H2>

    Empezaremos con un circuito sencillo de test, el cual ampliaremos m&aacute;s
    adelante.
    <br>
    <br>
    Este circuito lo podremos usar como un test sencillo de entorno
    para desarrollos m&aacute;s complejos de hardware. Podr&aacute;s cargar facilmente
    el software en el microcontroloador y comprobar los sensores conectados
    o el equipo de medida. <br>
    <br>
    El siguiente programa de test har&aacute; parpadear a un led.<br>
     <img src="../../common/images2/article352/circuit.gif" width=
    "600" height="400"> <br>


    <A NAME="352lfindex7">&nbsp;</A>
<H2>Hardware necesario</H2>

    <img src=
    "../../common/images2/article352/avrm8ledtest_circuit.jpg" alt=
    "[test circuit]" align="right" width="300" height="286"><br>
     Necesitaras los componentes que aparecen en el listado de la
    tabla. Aunque se trata de un microcontrolador muy com&uacute;n,te
    resultar&aacute; m&aacute;s facil localizarlo en un gran distribuidor de componentes
    electr&oacute;nicos : www.conrad.de (germany), www.selectronic.fr
    (france), digikey.com (US, CA), etc... <br>
    Tambi&eacute;n puedes adquirir todo el kit o s&oacute;lo el microcontrolador en
    <a href="http://shop.tuxgraphics.org/">shop.tuxgraphics.org</a>
    <br clear="all">


    <table border="1" width="70%">
      <tr>
        <td>1 x ATmega8 versi&oacute;n DIP , procesador Atmel 8 bit Avr risc.</td>
      </tr>

      <tr>
        <td>Zocalo 1 x 28 pins 7.5mm <br>
         Los zocalos de 28 pins son dificiles de localizar.Tener
        en cuenta que suelen ser de 14 mm de ancho , pero para
        el montaje  necesitamos un zocalo de 7.5mm.</td>
      </tr>

      <tr>
        <td>1 x resistencia de 10K (c&oacute;digo de color : marr&oacute;n,negro, naranja)<br>
         1 x resistencia de 1K (c&oacute;digo de color : marr&oacute;n,negro,rojo)<br>
         1 x 10uF condensador electrol&iacute;tico<br>
         Algunos cables<br>
         1 x LED<br>
         matrix board (protoboard o placa perforada con pads soldables)<br>
        </td>
      </tr>

      <tr>
        <td>El siguiente material se necesita para el programador
       <small>(no es necesario si se tiene el "Kit AVR de programaci&oacute;n
       en Linux" de tuxgraphics)</small>:<br>
        1 x conector DB25 para conectar al puerto paralelo.<br>
         Cualquier tipo de conector/zocalo de 5 pins para conectar al
        programador. Recomiendo el uso de conectores de precisi&oacute;n strip
        (similares a los zocalos).<br>
         1 x Resistencia de 220 Ohm (c&oacute;digo de color : rojo,rojo,marr&oacute;n)<br>
         2 x Resitencia de 470 Ohm (c&oacute;digo de color : amarillo,violeta,marr&oacute;n)<br>
        </td>
      </tr>
    </table>
    Adem&aacute;s de una fuente electr&oacute;nica de 5V o en su defecto ,
    una bateria de 4,5V. <br>
    <br>
    Habr&aacute;s observado que no es necesario un cristal. Actualmente el
    ATmega8 tiene incorporado un oscilador. Se puede usar este
    oscilador cuando no se necesite un alta precisi&oacute;n de reloj.
    Por contra, si necesitas construir un equipo de medida o
    usar el interface UART/RS232 necesitaras el cristal. El tipo de
    oscilardo usado se puede modificar con el programa. Por defecto
    (selecci&oacute;n de fabrica) esta ativo el oscilador interno de 1MHz.


    <A NAME="352lfindex8">&nbsp;</A>
<H2>Construyendo el hardware del programador</H2>

    Los microcontroladores AVR permiten la programaci&oacute;n "in circuit".
    (ISP). <img src=
    "../../common/images2/article352/avr_programmer.jpg" alt=
    "[Linux AVR programmer]" align="right" width="300" height=
    "303"><br>
     Esto significa que no es necesario extraer el microcontrolador
    de la placa de circuito impreso para reprogramarlo. Encontraras
    varios tipos de programadores desde 50 hasta 150 euros. De
    cualquier forma, ejecutando Linux es posible tener un programador
    sencillo. Necesitar&aacute;s un puerto paralelo libre y el siguiente cable. <br>
    <br>
     Notar que se trata de un programador mejorado respecto al presentado en el
    art&iacute;culo presentado en Marzo del 2002. Las resistencias protectoras
    se construyen en el interior del programador. Esto ahorra espacio y
    componentes en la placa del cirucuito impreso. A continuaci&oacute;n se puede
    ver como se cablea:
<br>


    <table border="1" bgcolor="#CDCDCD">
      <tr>
        <th>pin sobre la pcb</th>

        <th>pin sobre el AVR</th>

        <th>resistencia de proteci&oacute;n</th>

        <th>Pin sobre el puerto paralelo</th>
      </tr>

      <tr>
        <td>5</td>

        <td>Reset (1)</td>

        <td>--</td>

        <td>Init (16)</td>
      </tr>

      <tr>
        <td>4</td>

        <td>MOSI (17)</td>

        <td>470 Ohm</td>

        <td>D0 (2)</td>
      </tr>

      <tr>
        <td>3</td>

        <td>MISO (18)</td>

        <td>220 Ohm</td>

        <td>Busy (11)</td>
      </tr>

      <tr>
        <td>2</td>

        <td>SCK (19)</td>

        <td>470 Ohm</td>

        <td>Strobe (1)</td>
      </tr>

      <tr>
        <td>1</td>

        <td>GND</td>

        <td>--</td>

        <td>GND (18)</td>
      </tr>
    </table>
    <br>
     El cable no ha de ser m&aacute;s largo de 70cm. <br>
    <br>
    La resistencia de protecci&oacute;n se puede montar dentro del
    mismo conector. Tal como se muesta en la foto de la derecha.

    <A NAME="352lfindex9">&nbsp;</A>
<H2>Esribiendo el software</H2>

    El ATmega 8 se puede programar en C standard con la ayuda de gcc.
    Puede ser &uacute;til conocer algo de ensamblador del AVR , pero no es
    necesario.
    <br>
    <br>
    El libc de AVR libc viene con un manual <a href=
    "../../common/src2/article352/avr-libc-user-manual-1.0.4.pdf">avr-libc-user-manual-1.0.4.pdf
    (1139921 bytes)</a> que documenta todas las librerias disponibles en C.
    En la web de Atmel (<a href=
    "http://www.atmel.com">www.atmel.com</a>, ir a: avr products
    -&gt; 8 bit risc-&gt; Datasheets), podr&aacute;s descargar la "data sheet"
    completa. En ella se describen todos los registros y como usarlos.
     <br>
     <br>
     Una cosa a tener en cuenta cuando se usa el microcontrolador es
    que s&oacute;lo dispone de pocos bytes de RAM. Esto significa que no puedes
    declarar estructuras largas de datos o strings. Los programas no deben
    contener demasiadas llamadas anidadas o de recursi&oacute;n.
     <br>
     <br>
     Pasemos a la pr&aacute;ctica. Vamos a escribir un programa que haga
    parpadear nuestro led a intervalos de 0.5 segundos. No es muy &uacute;til,
    pero ya esta bien para empezar.
    <br>
    <br>
    La avr-libc ha cambiado bastante. Antes se activaba un bit en el
    puerto con sbi y lo desactivabas cbi. Ahora estas fuciones se han
    eliminado. No obstante, presento un programa usando estas funciones
    eliminadas:

<pre class="code">
    /* Definici&oacute;n de "defines" para una compatibilidad futura */
    #ifndef cbi
    #define cbi(sfr, bit) (_SFR_BYTE(sfr) &amp;= ~_BV(bit))
    #endif
    #ifndef sbi
    #define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
    #endif

    void main(void)
    {
          /* INICIALIZACION */
          /* activa PC5 como salida */
          sbi(DDRC,PC5);


          /* Parpadeo, Parpadeo ... */
          while (1) {
                /* led on, pin=0 */
                cbi(PORTC,PC5);
                delay_ms(500);
                /* Activa la salida a 5V, LED apagado */
                sbi(PORTC,PC5);
                delay_ms(500);
          }
    }

</pre>
    El siguiente ejemplo hace exactamente lo mismo, pero usando la
    nueva sintaxis:

<pre class="code">
    void main(void)
    {
          /* INICIALIZACION */
          /* activa PC5 como salida */
          DDRC|= _BV(PC5);


          /* Parpadeo, Parpadeo ... */

          /* PC5 esta a 5 (ver el fichero include/avr/iom8.h) y _BV(PC5) es 00100000 */
          while (1) {
                /* led on, pin=0 */
                PORTC&amp;= ~_BV(PC5);
                delay_ms(500);
                /* Activa la salida a 5V, LED desactivado */
                PORTC|= _BV(PC5);
                delay_ms(500);
          }
    }

</pre>
    El c&oacute;digo superior muestra lo simple que es escribir un programa.
    Mirando s&oacute;lo el programa principal, la funci&oacute;n delay_ms esta incluida
    en el  <a href=
    "../../common/src2/article352/avrm8ledtest.c.html">listado completo
    (avrm8ledtest.c)</a>. Para usar el pin PC5 como salida se de activar
    el bit PC5 en el registro de direcci&oacute;n de datos del port C(DDR).
    Despues puedes activar PC5 a 0V con la funci&oacute;n cbi(PORT,PC5) (Desactiva
    el bit PC5) o a 5V con sbi(PORTC,PC5) )(activa el bit PC5).El
    valor de  "PC5" se define en iom8.h que se incluye via io.h. No hace
    falta que te preocupes por ello. Si has escrito programas para
    sistemas multiusuario / multitarea como Linux, sabr&aacute;s que no se ha de
    programar un bucle infinito.Esto consumir&aacute; tiempo de CPU y enlentecer&aacute;
    el sistema mucho.Pero el caso de AVR es diferente.No tenemos varias
    tareas y no hay ning&uacute;n otro programa ejecutandose. Aqu&iacute; no hay un
    sistema operativo. Es normal tener un bucle infinito.


    <A NAME="352lfindex10">&nbsp;</A>
<H2>La compilaci&oacute;n y la Carga</H2>

    Antes de nada, asegurate que tienes /usr/local/avr/bin en el PATH.
    Si es necesario edita tu fichero .bash_profile o .tcshrc y a&ntilde;adelo:


    <p class="code">export PATH=/usr/local/avr/bin:${PATH} (para
    bash)<br>
     setenv PATH /usr/local/atmel/bin:${PATH} (para tcsh)</p>
    Utilizamos el puerto paralelo u el uisp para programar el AVR. Uisp
    usa el interface ppdev del kernel. Por lo tanto necesitaras tener
    los siguientes modulos del kernel cargados:

<pre class="code">
    # /sbin/lsmod
    parport_pc
    ppdev
    parport
</pre>
    Verifica con el siguiente comando : /sbin/lsmod  , que est&aacute;n cargados.
    En otro caso, cargalos (como root) con:

<pre class="code">
    modprobe parport
    modprobe parport_pc
    modprobe ppdev

</pre>
    Ser&iacute;a buena idea que se ejecuten autom&aacute;ticamente durante el startup.
    Puedes a&ntilde;adirlos en un script rc (ejemplo para Redhat
    /etc/rc.d/rc.local). <br>
    Para poder acceder al interface ppdev como usuario, el root te ha de
    dar permiso de acceso mediante el comando:

    <p class="code">chmod 666 /dev/parport0</p>

    Asegurate que el daemon de la impresora no est&aacute; ejecutandose ya que
    utiliza el puerto paralelo. Si esta ejecutandose es mejor desactivar
    este daemon antes de conectar el cable paralelo. Ahora ya esta todo
    listo para compilar y programar nuestro microcontrolador.<br>
     <br>
     El paquete para nuestro programa test (<a href=
    "../../common/src2/article352/avrm8ledtest-0.1.tar.gz">avrm8ledtest-0.1.tar.gz</a>)
    incluye un fichero make. Tan s&oacute;lo tienes que teclear:<br>
<br>
     make <br>
     make load<br>
<br>
     Esto compilar&aacute; y cargar&aacute; el software.No te explicar&eacute; los detalles
    de todas las instruciones. Las puedes ver en <a
    href="../../common/src2/article352/Makefile.html">Makefile</a>
    y son siempre las mismas. No puedo recordarlas todas. Si quieres
    escribir un programa diferente,entoces reemplaza en los lugares
    pertinentes de avrm8ledtest en el Makefile con el nombre de tu
    programa.

    <A NAME="352lfindex11">&nbsp;</A>
<H2>Algunas binutils interesantes</H2>

    Hay algunas binutils que resultan m&aacute;s interesantes que el propio
    proceso de compilaci&oacute;n.<br>
    Esta utilidades no han cambiado desde Marzo del 2002. Revisa el
    cap&iacute;tulo "Algunas binutils interesantes" en
    <a href="../March2002/article231.shtml">article231, March
    2002</a>.

    <A NAME="352lfindex12">&nbsp;</A>
<H2>Ideas y sugerencias </H2>

    Para muchos casos el ATmega8 es compatible con el AT90S4433.Tendr&aacute;s
    que programar el microcontrolador para usar el oscilador externo y
    podr&aacute;s utilizar con pocos cambios todo el hardware que present&eacute; en
    articulos anteriores. Desgraciadamente no he tenido tiempo de probar
    todos los circuitos con el ATmega8. Para evitar problemas, ser&iacute;a mejor
    usar el viejo AT90S4433. Pero si no te importa los problemas y deseas
    solventarlos entonces prueba el ATmega8 con los art&iacute;culos y montajes
    previos.<br>
    <br>
    A continuaci&oacute;n tienes una lista de los art&iacute;culos realizados con
    el hardware antiguo:

    <ul>
      <li><a href="../May2002/article236.shtml">Un panel de control
      LCD para tu servidor linux</a></li>

      <li><a href="../November2002/article251.shtml">Una
      fuente de alimentaci&oacute;n controlada por un microcontrolador</a></li>

      <li><a href="../September2002/article253.shtml">Un frecuenciometro
      con rango de 1Hz a 100MHz con display LCD e interface RS232</a></li>

      <li><a href="../March2003/article286.shtml">Un display LCD USB en Linux
     con watchdog y pulsadores</a></li>

      <li><a href="../July2003/article297.shtml">Construcci&oacute;n de un
      robot aut&oacute;nomo guiado por luz</a></li>
    </ul>
    <br>
    <br>
    Nota: El programador presentado el este art&iacute;culo, ya incorpora
   las resistencias protectoras que se montaban en los circuitos
   propuestos en pasados art&iacute;culos. Para poder usar las placas
   propuestas en esos art&iacute;culos, se han de sustituir las resistencias
   protectoras por un cable o puente.

<p>Atmel suministra una nota de aplicaci&oacute;n "AVR081: Replacing AT90S4433
by ATmega8" donde se indican todas las incompatibilidades : <a
href="../../common/src2/article352/at90s4433_to_atmega8.pdf">at90s4433_to_atmega8.pdf
(101343 bytes)</a>

    <A NAME="352lfindex13">&nbsp;</A>
<H2>Referencias</H2>


    <ul>
      <li>La AVRlib Pascal Stang's : <a href=
      "http://www.procyonengineering.com/avr/avrlib/index.html">http://www.procyonengineering.com/avr/avrlib/index.html</a> o <a href="http://hubbard.engr.scu.edu/embedded/avr/avrlib/">http://hubbard.engr.scu.edu/embedded/avr/avrlib/</a></li>

      <li>el assebler tavrasm para Linux: <a href=
      "http://www.tavrasm.org/">www.tavrasm.org</a></li>

      <li><b>Todo el software y la documentaci&oacute;n <a href="../../common/src2/article352/index.html">mencionada en este
      articulo</a></b></li>

      <li>El website de atmel: <a href=
      "http://www.atmel.com/">www.atmel.com</a></li>

      <li>La web de la tienda de tuxgraphics:
<a href=
    "http://shop.tuxgraphics.org/">shop.tuxgraphics.org</a>
<br>(Donde puedes obtener el CD de programaci&oacute;n del AVR en Linux, kits y microcontroladores)
    </li>
    </ul>
    <!-- vim: set sw=2 ts=2 et tw=80: -->
  



<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=352">&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Hogar</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">&Iacute;ndice de este n&uacute;mero</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Guido     Socher</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">en --&gt; -- : Guido Socher (<a href="http://linuxfocus.org/~guido/"><font size="1">homepage</font></a>)</font></td></tr>
  <tr><td><font size="2">en --&gt; es: Alberto Pardo &lt;apardoyo(at)yahoo.es&gt;</font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-01-09, generated by lfparser version 2.51</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
