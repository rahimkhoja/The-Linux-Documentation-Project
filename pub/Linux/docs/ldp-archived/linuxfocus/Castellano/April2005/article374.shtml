<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <META NAME="GENERATOR" CONTENT="lfparser_2.52">
 <META NAME="LFCATEGORY" CONTENT="SoftwareDevelopment">
 <link rel="icon" href="../../common/images/lf-16.png" type="image/png">
 <TITLE>lf374, SoftwareDevelopment: LINUX Y PERL, integraci&oacute;n de herramientas inform&aacute;ticas para estudio y an&aacute;lisis de informaci&oacute;n biol&oacute;gica</TITLE>
<style type="text/css">
<!--
 td.top {font-family: Arial,Geneva,Verdana,Helvetica,sans-serif; font-size:12 }
 pre { font-family:monospace,Courier }
 pre.code { font-family:monospace,Courier;background-color:#aedbe8; }
 p.cl { color:#EE9500 }
 table.left { margin-right:0.3cm }
 a.nodec { text-decoration:none }
 p.trans { font-size:8pt; text-align:right }
 p.clbox { width:50%; alignment:center; background-color:#FFD700; 
           border-style:none; border-width:medium; border-color:#FFD700; 
           padding:0.5cm;  text-align:center }
 p.code { width:80%; alignment:center; background-color:#aedbe8; 
          border-style:none; border-width:medium; border-color:#aedbe8; 
          padding:0.1cm;  text-align:left }
 p.foot { background-color:#AAAAAA; color:#FFFFFF; border-style:none; 
          border-width:medium; border-color:#AAAAAA; padding:0.5cm ; 
          margin-top:0.1cm; margin-right:1cm; margin-left:1cm; 
          text-align:center }
 div.tbbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   margin: 2px 5px 2px 5px;
   text-align: center;
   width: 20em;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
 div.bbutton {
   background: #ddd;
   border-right: 1px solid #aaa;
   border-bottom: 1px solid #aaa;
   float: left;
   margin: 2px 5px 2px 5px;
   text-align: center;
   line-height: 1.2em;
   padding: 2px;
   font-size: 12px;
   white-space: nowrap;
   color: #555;
 }
-->
</style>
 
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
 <!-- this is generated html code. NEVER use this file for your
 translation work. Instead get the file with the same article number
 and .meta.shtml in its name. Translate this meta file and then
 use lfparser program to generate the final article -->
 <!-- lfparser can be obtained from http://main.linuxfocus.org/~guido/dev/lfparser.html -->

<!-- this is used by a number of tools:
 =LF=AUTHOR: Carlos Andr&eacute;s P&eacute;rez
 =LF=CAT___: SoftwareDevelopment
 =LF=TITLE_: LINUX Y PERL, integraci&oacute;n de herramientas inform&aacute;ticas para estudio y an&aacute;lisis de informaci&oacute;n biol&oacute;gica
 =LF=NUMBER: 374
 =LF=ANAME_: article374.shtml
 =LF=PARSER: 2.52
 -->

<!-- 2pdaIgnoreStart -->

<!-- start navegation bar, current, style=2 -->
 <!-- top navegation bar -->
 <TABLE summary="topbar_1" cellspacing="0" cellpadding="0" border="0" align="center" width="90%">
   <TR bgcolor="#2e2292">
     <TD class="top"><TABLE summary="topbar_1_logo" cellspacing="0" cellpadding="0" border="0" width=
       "100%">
         <TR><TD width="319"><a href="../../index.shtml"><IMG src="../../common/images/logolftop_319x45.gif"
           alt="[LinuxFocus-icon]" width="319" height="45" align="left" 
           border="0"></a></TD>

           <TD class="top">
             <TABLE summary="topbar_1_links" width="100%">
               <TR align="right">
                 <TD class="top">
                 
                 <A class="nodec" href="../../index.shtml"><FONT color=
                 "#DDDDDD" size="2">&lt;--</FONT></A> &nbsp;| 
                 <A class="nodec" href="../map.html"><FONT color=
                 "#DDDDDD" size="2">Mapa</FONT></A> &nbsp;| 
                 <A class="nodec" href="../indice.html"><FONT color=
                 "#DDDDDD" size="2">Indice</FONT></A> &nbsp;| 
                 <A class="nodec" href="../Search/index.html"><FONT color=
                 "#DDDDDD" size="2">Busqueda</FONT></A> </TD>
                 
               </TR>

               <TR align="right">
                 <TD class="top">
                   <HR width="100%" noshade size="1">
                 </TD>
               </TR>
             </TABLE>
           </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end top navegation bar -->
 <!-- blue bar -->
 <TABLE summary="topbar_2" cellspacing="0" cellpadding="0" border="0" align="center"
 width="90%">
   <TR bgcolor="#00ffff">
     <TD><IMG src="../../common/images/transpix.gif" width="1" height=
     "2" alt=""></TD>
   </TR>
 </TABLE>
 <!-- end blue bar -->
 <!-- bottom navegation bar -->
 <TABLE summary="topbar_3" cellspacing="0" cellpadding="0" border="0" align="center"
 width="94%">
   <TR bgcolor="#000000">
     <TD>
       <TABLE summary="topbar_3_links" cellspacing="0" cellpadding="1" border="0" width=
       "100%">
         <TR align="center">
           <TD WIDTH="20%"><A class="nodec" href="../News/index.shtml"><FONT color=
           "#FFFFFF">Noticias</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Archives/index.html"><FONT color=
           "#FFFFFF">Arca</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../Links/index.html"><FONT color=
           "#FFFFFF">Enlaces</FONT></A> </TD>
           <TD WIDTH="5%"><FONT color="#FFFFFF">|</FONT> </TD>
           <TD WIDTH="20%"><A class="nodec" href="../aboutus.html"><FONT color=
           "#FFFFFF">Sobre LF</FONT></A> </TD>
         </TR>
       </TABLE>
     </TD>
   </TR>
 </TABLE>
 <!-- end bottom navegation bar -->
<!-- stop navegation bar -->

<!-- SSI_INFO -->

<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfdynahead ver 1.5 --><TABLE ALIGN="right" border=0><TR><TD ALIGN="right"><FONT SIZE="-1" FACE="Arial,Helvetica">Este documento est&aacute; disponible en los siguientes idiomas: <A href="../../English/April2005/article374.shtml">English</a> &nbsp;<A href="../../Castellano/April2005/article374.shtml">Castellano</a> &nbsp;<A href="../../ChineseGB/April2005/article374.shtml">ChineseGB</a> &nbsp;<A href="../../Deutsch/April2005/article374.shtml">Deutsch</a> &nbsp;<A href="../../Francais/April2005/article374.shtml">Francais</a> &nbsp;</FONT></TD></TR></TABLE><br>
 


<!-- SSI_INFO STOP -->
<!-- 2pdaIgnoreStop -->

<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_START -->
<TABLE ALIGN="LEFT" BORDER="0" WIDTH="195" summary="about the author" class="left">
<TR>
<TD>

<img src="../../common/images2/CarlosAndresPerez.jpg" alt=
"La Foto">
<BR>por  Carlos Andr&eacute;s P&eacute;rez <br> <small>&lt;caperez(at)usc.edu.co&gt;</small>
<BR><BR>
<I>Sobre el autor:</I><BR>
<!-- aboutauthor_start -->
<p>Carlos Andr&eacute;s P&eacute;rez es especialista en
Simulaci&oacute;n Molecular, Doctorando en Biotecnolog&iacute;a.
Asesor t&eacute;cnico del Grupo de Investigaci&oacute;n en
Educaci&oacute;n Virtual (GIEV). Direcci&oacute;n: Universidad
Santiago de Cali, Calle 5&ordf; carrera 62 Campus Pampalinda, Cali
&ndash; Colombia.</p>
<!-- aboutauthor_stop -->
<!-- TRANSLATED_TO es -->
<!-- TRANSLATED_TO_STOP -->
<!-- INDEX_START -->
<BR><i>Contenidos</i>:
<UL>
  <LI><A HREF="#374lfindex0">Bioinform&aacute;tica</A></LI>
  <LI><A HREF="#374lfindex1">Perl</A></LI>
  <LI><A HREF="#374lfindex2">Manipulaci&oacute;n de Ficheros en Perl:</A></LI>
  <LI><A HREF="#374lfindex3">B&uacute;squeda de patrones de amino&aacute;cidos</A></LI>
  <LI><A HREF="#374lfindex4">Calculo de las frecuencias de amino&aacute;cidos:</A></LI>
  <LI><A HREF="#374lfindex5">Referencias Bibliogr&aacute;ficas:</A></LI>
  <LI><A HREF="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">Formulario de "talkback" para este art&iacute;culo</A></LI>
</UL>

</TD></TR></TABLE>
<!-- INDEX_STOP -->
<!-- SHORT_BIO_ABOUT_THE_AUTHOR_AND_INDEX_STOP -->
<!-- HEAD_OF_THE_ARTICLE_START -->
<br>&nbsp;
<table border="0"><tr><td>
<!-- tr_staticssi include virtual -->
<!-- tr_staticssi exec cmd -->
<!-- addedByLfPdf ver 0.1 -->
<TABLE style="border-style:outset; border-width:1px" align="right" bgcolor="#ff9616" cellspacing="1"><TR><TD bgcolor="#ff9616">
        <a href="../Archives/lf-2005_04-0374.pdf"><small>PDF</small></a>
        </TD></TR></TABLE>
         

<H2>LINUX Y PERL, integraci&oacute;n de herramientas inform&aacute;ticas para estudio y an&aacute;lisis de informaci&oacute;n biol&oacute;gica</H2>
 <img src="../../common/images2/article374.jpg" alt="[Illustration]"
hspace="10">
<!-- ABSTRACT OF THE ARTICLE -->
<P><i>Resumen</i>:
<P>
<!-- articleabstract_start -->


El presente art&iacute;culo pretende exponer algunas de las
ventajas de la programaci&oacute;n en Perl bajo entornos
Un&iacute;x, para la extracci&oacute;n de informaci&oacute;n
biol&oacute;gica de las bases de datos de secuencias de DNA, RNA y
prote&iacute;nas, con el fin de utilizarlas en procesos
comparativos o de an&aacute;lisis. El proyecto Genoma Humano y las
diferentes t&eacute;cnicas de clonaci&oacute;n de DNA han acelerado
el proceso de generaci&oacute;n de informaci&oacute;n sobre la
secuencia de muchos genes funcionales a tal punto que la
informaci&oacute;n sobre secuencias gen&eacute;ticas que se genera
a diario supera la capacidad de analizar dicha informaci&oacute;n
desde el punto de vista evolutivo y los procesos de
interacci&oacute;n de estos genes y su forma de regularse. La
r&aacute;pida proliferaci&oacute;n de la informaci&oacute;n
biol&oacute;gica sobre diferentes genomas (dotaci&oacute;n de genes
de un organismo) est&aacute; constituyendo a la
bioinform&aacute;tica como una disciplina fundamental para el
manejo y an&aacute;lisis de estos datos.


<!-- articleabstract_stop -->

<br><!-- HR divider --><center><font color="#8282e0"><b>_________________ _________________ _________________</b></font></center><br>
</td></tr></table>
<!-- HEAD_OF_THE_ARTICLE_STOP -->
<!-- BODY_OF_THE_ARTICLE_START -->


<A NAME="374lfindex0">&nbsp;</A>
<H2>Bioinform&aacute;tica</H2>


<p>La bioinform&aacute;tica nace cuando se empiezan a almacenar las
secuencias biol&oacute;gicas en un formato digital y surgen los
primeros programas para compararlas. Durante mucho tiempo la
bioinform&aacute;tica se limito al an&aacute;lisis de secuencias .
Sin embargo, la importancia de establecer la forma estructural de
las mol&eacute;culas hace que las computadoras se conviertan en una
importante herramienta investigaci&oacute;n en Bioqu&iacute;mica
te&oacute;rica. Cada vez hay m&aacute;s informaci&oacute;n y
m&aacute;s colecciones de datos sobre la conformaci&oacute;n 3D de
las mol&eacute;culas. La expresi&oacute;n de los genes ha pasado de
estudiarse en forma individual a hacerlo sobre el conjunto
completo, o una parte muy extensa, de los genes de un organismo. Se
comprende la importancia de la interacci&oacute;n entre genes,
entre prote&iacute;nas y su organizaci&oacute;n en las rutas
metab&oacute;licas. Y cada vez m&aacute;s nos percatamos de la
necesidad de utilizar todo este colosal conjunto de datos de forma
integrada.</p>

<p>Cada una de las actividades descritas tienen al menos dos caras
desde las que resultan interesantes. Por una parte es indudable el
inter&eacute;s biol&oacute;gico de conocer las relaciones entre las
mol&eacute;culas de la vida, y por otra parte se hace interesante
el conjunto de problemas computacionales que se plantean. Es
indudable la necesidad de combinar e integrar la informaci&oacute;n
biol&oacute;gica para obtener una visi&oacute;n global y efectiva
de los procesos biol&oacute;gicos que subyacen en ella. De la misma
forma nos hemos percatado de la necesidad de combinar las
diferentes &aacute;reas de la inform&aacute;tica para dar una
soluci&oacute;n efectiva. No solo se trata de gesti&oacute;n de
bases de datos, tambi&eacute;n de integraci&oacute;n de datos; no
solo de algoritmos eficientes, sino de hardware potente -grids,
multiprocesadores, etc; no solo de algoritmos exactos, sino
tambi&eacute;n de aprendizaje y heur&iacute;sticos.</p>

<A NAME="374lfindex1">&nbsp;</A>
<H2>Perl</H2>


<p><strong>Larry Wall</strong> comenz&oacute; el desarroll&oacute;
de Perl en 1986. Perl es un lenguaje de programaci&oacute;n
interpretado, ideal para manipular textos, ficheros y procesos.
Perl permite desarrollar r&aacute;pidamente trabajos que
normalmente se realizar&iacute;an en C o en alguna Shell.
Podr&iacute;a decirse que Perl es una mezcla optimizada de un
lenguaje de alto nivel (por ejemplo C) y un lenguaje de script (por
ejemplo bash).&nbsp;<br>
&nbsp; &nbsp;&nbsp;<br>
Lo que se programe en Perl se puede ejecutar en varios sistemas
operativos/plataformas. No obstante, donde naci&oacute; y donde
m&aacute;s se ha difundido es bajo el sistema operativo
UNIX,&nbsp;es un int&eacute;rprete de c&oacute;digo, un lenguaje de
programaci&oacute;n, pensado inicialmente para recoger en un
&uacute;nico lenguaje ampliado las caracter&iacute;sticas de
varios. Perl sobrepas&oacute; con creces sus objetivos iniciales
especialmente por el impulso que recibi&oacute; su inmediato uso
como programador web. Antes que Perl se utilizaban awk, sed y grep
para analizar ficheros y extraer de ellos informaci&oacute;n que
permitieran ejecutar acciones.</p>

<p>Perl reuni&oacute; las posibilidades de estas ideas UNIX en un
s&oacute;lo programa ampliando y modernizando cada funci&oacute;n y
haci&eacute;ndolam&aacute;s potente, pr&aacute;ctica y m&aacute;s
r&aacute;pida.</p>

<p>Perl es un lenguaje de programaci&oacute;n gratuito y se puede
ejecutar en cualquiera de los sistemas operativos que generalmente
se encuentran en los laboratorios de investigaciones
biol&oacute;gicas, aunque presenta una gran integralidad con
Un&iacute;x y Linux. En UNIX y MacOSX viene instalado, en los
dem&aacute;s hay que instalarlo. Basta con obtenerlo del sitio: <a
href="http://www.cpan.org/">http://www.cpan.org/</a> para el
sistema que estemos usando.</p>

<p>Los programas en perl bajo Linux se pueden Llamar con el nombre
del fichero que contiene las instrucciones a ejecutar. Es lo
m&aacute;s usual. Las instrucciones est&aacute;n guardas en un
fichero y se llama a perl con el nombre del fichero como
argumento.</p>

<p>Otro m&eacute;todo tan frecuente como el anterior es el de
guardar las instrucciones Perl en un fichero pero sin llamar a Perl
expl&iacute;citamente. Para ello se tienen que hacer dos cosas:
(a)&nbsp;poner un indicativo especial en la primera l&iacute;nea
del programa:</p>

<pre class="code">
#!/usr/bin/env perl<br>
print "Hola\n";
</pre>

<p>y (b)&nbsp;guardar el fichero y asignarle el atributo UNIX de
fichero ejecutable:<!-- this give a blue box: -->
</p>

<pre class="code">
% chmod +x saludo.pl
</pre>

<p>Una vez hecho esto se puede llamar al fichero-programa cuantas
veces se desee directamente por su nombre, llegando a olvidarse
finalmente que es un programa Perl. De hecho la extensi&oacute;n
muchas veces se quita a este tipo de programas quedando mezcladas
con las utilidades del sistema.<br>
</p>

<A NAME="374lfindex2">&nbsp;</A>
<H2>Manipulaci&oacute;n de Ficheros en Perl:</H2>


<p>Cuando tenemos una base de datos de secuencias moleculares en
formato texto, una posible herramienta que podemos crear con Perl,
es un buscador de secuencias. As&iacute;, en este ejemplo, vamos a
ver como se puede buscar una secuencia de prote&iacute;nas en una
base de datos con formato SWISS-PROT (db_human.swissprot), a partir
de su c&oacute;digo de identificaci&oacute;n.</p>

<pre class="code">
#!/usr/bin/perl
# Buscar una secuencia de aminoacidos en una base de datos
# con formato SWISS-PROT, dado un codigo de identificacion
# Pide el codigo de identificacion que esta en el campo ID
# y lo pasa de la entrada estandar (STDIN) a una variable
print "Introduce el ID de la secuencia a buscar: ";
$id_query=&lt;STDIN&gt;;
chomp $id_query;
# Abrimos el fichero de la base de datos
# pero si no se puede, finaliza el programa
open (db, "human_kinases.swissprot") || die "problema abriendo el fichero human_kinases.swissprot\n";
# Miramos linea por linea en la base de datos
while (&lt;db&gt;) {
chomp $_;
# Comprobamos si estamos en el campo ID
if ($_ =~ /^ID/) {
# Si estamos en el campo ID, recogemos el identificador
# fragmentando la linea por espacios
($a1,$id_db) = split (/\s+/,$_);
# Pero si no es el ID elegido, pasamos a la siguiente linea
next if ($id_db ne $id_query);
# Y si lo es, ponemos un marcador
$signal_good=1;
# Luego comprobamos si estamos en el campo de la secuencia
# y si, a la vez, el marcador estaba puesto a 1 (secuencia elegida)
# Si es asi, ponemos el marcador a 2, para asi recoger la secuencia
} elsif (($_ =~ /^SQ/) &amp;&amp; ($signal_good==1)) {
$signal_good=2;
# Finalmente, si la marca es igual a 2, presentamos cada linea
# de la secuencia, hasta que la linea comience por //
# en cuyo caso nos salimos del bucle del while
} elsif ($signal_good == 2) {
last if ($_ =~ /^\/\//);
print "$_\n";
}
}
# Al salir del bucle, comprobamos si la marca existe
# y si no es asi, es que no hemos encontrado la secuencia elegida
# con lo que daremos un error
if (!$signal_good) {
print "ERROR: "."Secuencia no encontrada\n";
}
# Por ultimo, cerramos el fichero de la base de datos,
# que aun estaba abierto
close (db);
exit;
</pre>

<br>
<A NAME="374lfindex3">&nbsp;</A>
<H2>B&uacute;squeda de patrones de amino&aacute;cidos</H2>


<pre class="code">
#!/usr/bin/perl
# Buscador de patrones aminoacidicos
# Pide al usuario el patron aminoacidico a buscar
print "Por favor, introduce un patron para buscar en query.seq: ";
$patron = &lt;STDIN&gt;;
chomp $patron;
# Abrimos el fichero de la base de datos
# pero si no se puede, finaliza el programa
open (query, "query.seq") || die "problema abriendo el fichero query.seq\n";
# Miramos linea por linea la ficha SWISS-PROT
while (&lt;query&gt;) {
chomp $_;
# Cuando lleguemos al campo SQ, ponemos el marcador a 1<br>
   if ($_ =~ /^SQ/) {<br>
         $signal_seq = 1;
# Cuando lleguemos al final de secuencia, nos salimos del bucle<br>
# Obsevar que esta expresion la ponemos antes de comprobar si<br>
# el marcador=1, ya que esta linea no corresponde a la secuencia<br>
# aminoacidica en si<br>
   } elsif ($_ =~ /^\/\//) {<br>
         last;
# Comprobamos si el marcador esta puesto a 1, y si es asi,<br>
# eliminamos los espacios en blanco de la linea de secuencia<br>
# y vamos concatenando cada linea en una nueva variable<br>
# Para concatenar, tambien podriamos haber puesto:<br>
# $secuencia_total.=$_;<br>
   } elsif ($signal_seq == 1) {<br>
         $_ =~ s/ //g;<br>
         $secuencia_total=$secuencia_total.$_;<br>
   }<br>
  }
# Ahora comprobamos si la secuencia, recogida ya enteramente,<br>
# contiene el patron dado<br>
  if ($secuencia_total =~ /$patron/) {<br>
   print "La secuencia query.seq contiene el patron $patron\n";<br>
  } else {<br>
   print "La secuencia query.seq no contiene el patron $patron\n";<br>
  }
# Por ultimo, cerramos el fichero de la secuencia<br>
# y salimos del programa<br>
close (query);<br>
exit;
</pre>

<p>Si queremos saber la posici&oacute;n exacta en donde ha
encontrado el patr&oacute;n, tenemos que hacer uso de un variable
especial &lsquo;$&amp;&rsquo;. Esta variable guarda el
patr&oacute;n encontrado despu&eacute;s de evaluar una
expresi&oacute;n regular (habr&iacute;a que ponerlo justo
despu&eacute;s de la l&iacute;nea &lsquo;<strong>if
($secuencia_total =~ /$patron/) {</strong>&lsquo;. Adem&aacute;s se
puede combinar con las variables &lsquo;$`&rsquo; y
&lsquo;$&acute;&rsquo; que guardan todo lo que queda a la izquierda
del patr&oacute;n encontrado y a la derecha, respectivamente.
Modifica el programa anterior con estas nuevas variables, para dar
la posici&oacute;n exacta del patr&oacute;n. Nota: Tambi&eacute;n
te puede ser &uacute;til la funci&oacute;n length, que da la
longitud de una cadena.</p>

<p>&nbsp;</p>

<pre class="code">
# tan solo hay que modificar la if en la que se encuentra el patron
# Ahora comprobamos si la secuencia, recogida ya enteramente,<br>
# contiene el patron dado<br>
# y damos su posicion en la secuencia<br>
  if ($secuencia_total =~ /$patron/) {<br>
   $posicion=length($`)+1;<br>
   print "La secuencia query.seq contiene el patron $patron en la posicion $posicion\n";
  } else {<br>
   print "La secuencia query.seq no contiene el patron $patron\n";<br>
  }
</pre>

<A NAME="374lfindex4">&nbsp;</A>
<H2>Calculo de las frecuencias de amino&aacute;cidos:</H2>


<p>La frecuencia de los diferentes amino&aacute;cidos en las
prote&iacute;nas es variable, como consecuencia de sus distintas
funciones o entornos preferidos. As&iacute;, en este ejemplo,
veremos como calcular la frecuencia aminoac&iacute;dica de una
secuencia de amino&aacute;cidos dada.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# Calcula la frecuencia de aminoacidos en una secuencia proteica
# Recoge el nombre de fichero de la linea de comando
# (Ficha en formato SWISS-PROT)
# Tambien se puede pedir con un print, y recoger con &lt;STDIN&gt;
if (!$ARGV[0]) {print "La linea de ejecucion del programa debe ser: programa.pl ficha_swissprot\n";}
$fichero = $ARGV[0];
# Inicializamos la variable $errores
my $errores=0;
# Abrimos el fichero para lectura
open (FICHA, "$fichero") || die "problema abriendo el fichero $fichero\n";
# Primero recogemos la secuencia, similar a como lo hicimos en el ejemplo 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
   last if ($_ =~ /^\/\//);
   $_ =~ s/\s//g;
   $secuencia.=$_;
}
}
close (FICHA);
# Ahora usamos un bucle que coja todas las posiciones aminoacidicas
# de la secuencia (desde una funcion propia, que nos puede servir
# luego en otros programas)
comprueba_aa ($secuencia);
# Imprime los resultados por pantalla
# Primero los 20 aminoacidos y luego el array con sus frecuencias
# En este caso no se debe usar &lsquo;sort&rsquo; en el bucle foreach, ya que
# lo que contiene el array son las frecuencias (numeros)
print"A\tC\tD\tE\tF\tG\tH\tI\tK\tL\tM\tN\tP\tQ\tR\tS\tT\tV\tW\tY\n";
foreach $each_aa (@aa) {
print "$each_aa\t";
}
# Por ultimo da el numero de posibles errores
# y finaliza el programa
print "\nerrores = $errores\n";
exit;
#Subrutinas
# Esta subrutina calcula la frecuencia de cada aminoacido
# de una secuencia proteica
sub comprueba_aa {
# Recoge la secuencia
my ($secuencia)=@_;
# Y recorre aminoacido por aminoacido, con un bucle for que va
# desde 0 hasta la longitud de la secuencia
for ($posicion=0 ; $posicion&lt;length $secuencia ; $posicion++ ) {
# Coge el aminoacido
$aa = substr($secuencia, $posicion, 1);
# Y ahora comprueba cual es, por una serie de if
# Cuando descubre cual es, suma uno al elemento correspondiente
# de un array, segun el subindice que le corresponde a cada
# aminoacido por su orden alfabetico
if ( $aa eq 'A' ) {
$aa[0]++;
} elsif ( $aa eq 'C' ) {
$aa[1]++;
} elsif ( $aa eq 'D' ) {
$aa[2]++;
} elsif ( $aa eq 'E' ) {
$aa[3]++;
} elsif ( $aa eq 'F' ) {
$aa[4]++;
} elsif ( $aa eq 'G' ) {
$aa[5]++;
} elsif ( $aa eq 'H' ) {
$aa[6]++;
} elsif ( $aa eq 'I' ) {
$aa[7]++;
} elsif ( $aa eq 'K' ) {
$aa[8]++;
} elsif ( $aa eq 'L' ) {
$aa[9]++;
} elsif ( $aa eq 'M' ) {
$aa[10]++;
} elsif ( $aa eq 'N' ) {
$aa[11]++;
} elsif ( $aa eq 'P' ) {
$aa[12]++;
} elsif ( $aa eq 'Q' ) {
$aa[13]++;
} elsif ( $aa eq 'R' ) {
$aa[14]++;
} elsif ( $aa eq 'S' ) {
$aa[15]++;
} elsif ( $aa eq 'T' ) {
$aa[16]++;
} elsif ( $aa eq 'V' ) {
$aa[17]++;
} elsif ( $aa eq 'W' ) {
$aa[18]++;
} elsif ( $aa eq 'Y' ) {
$aa[19]++;
# Si no encontramos el aminoacido, la letra no es correcta
# y sumamos un error
} else {
print "ERROR: No reconozco este aminacido: $aa\n";
$errores++;
}
}
# Finalmente retornamos el array de frecuencias
return @aa;
}


</pre>

<p>Ahora vamos a realizar el siguiente paso que sigue el flujo de
informaci&oacute;n en una c&eacute;lula, tras la
transcripci&oacute;n. Se trata de la traducci&oacute;n, por el cual
una secuencia de ARN procedente de un gen, que era de ADN, pasa a
proteinas o secuencia de amino&aacute;cidos. Para ello debemos
hacer uso del c&oacute;digo gen&eacute;tico, que se basa en que a
un triplete de ARN/ADN le corresponde un amino&aacute;cido. La
secuencia la vamos a extraer de una ficha de un gen de
<em>Escherichia coli</em>, en formato EMBL y luego comprobaremos la
traducci&oacute;n con la existente en la ficha. Para este ejemplo,
ser&aacute; necesario introducir las variables de arrays
asociativos o tablas hash. En el programa hay que tener en cuenta
que solo hay que recoger la regi&oacute;n codificarte, incluida en
el campo &lsquo;FT&nbsp;&nbsp; CDS.</p>

<pre class="code">
<br>
#!/usr/bin/perl
# Traduce una secuencia de ADN de una ficha EMBL
# en su correspondiente de aminoacidos
# Recoge el nombre de fichero de la linea de comando
# (Ficha en formato SWISS-PROT)
# Tambien se puede pedir con un print, y recoger con &lt;STDIN&gt;
if (!$ARGV[0]) {print "La linea de ejecucion del programa debe ser: programa.pl ficha_embl\n";}
$fichero = $ARGV[0];
# Abrimos el fichero para lectura
open (FICHA, "$fichero") || die "problema abriendo el fichero $fichero\n";
# Primero recogemos la secuencia, similar a como
# lo hicimos en el ejemplo 2
while (&lt;FICHA&gt;) {
chomp $_;
if ($_ =~ /^FT CDS/) {
$_ =~ tr/../ /;
($a1,$a2,$a3,$a4) = split (" ",$_);
}
elsif ($_ =~ /^SQ/) {
$signal_good = 1;
} elsif ($signal_good == 1) {
last if ($_ =~ /^\/\//);
# Eliminamos los espacios y los numeros
$_ =~ tr/0-9/ /;
$_ =~ s/\s//g;
$secuencia.=$_;
}
}
close (FICHA);
# Ahora definimos un array asociativo con la correspondencia
# de todos los aminoacidos con su/sus tripletes de nucleotidos
# correspondientes (tambien se puede poner en una funcion propia,
# por si este mismo codigo genetico
# lo usamos en distintos programas
my(%codigo_genetico) = (
'TCA' =&gt; 'S',# Serina
'TCC' =&gt; 'S',# Serina
'TCG' =&gt; 'S',# Serina
'TCT' =&gt; 'S',# Serina
'TTC' =&gt; 'F',# Fenilalanina
'TTT' =&gt; 'F',# Fenilalanina
'TTA' =&gt; 'L',# Leucina
'TTG' =&gt; 'L',# Leucina
'TAC' =&gt; 'Y',# Tirosina
'TAT' =&gt; 'Y',# Tirosina
'TAA' =&gt; '*',# Stop
'TAG' =&gt; '*',# Stop
'TGC' =&gt; 'C',# Cisteina
'TGT' =&gt; 'C',# Cisteina
'TGA' =&gt; '*',# Stop
'TGG' =&gt; 'W',# Triptofano
'CTA' =&gt; 'L',# Leucina
'CTC' =&gt; 'L',# Leucina
'CTG' =&gt; 'L',# Leucina
'CTT' =&gt; 'L',# Leucina
'CCA' =&gt; 'P',# Prolina
'CCC' =&gt; 'P',# Prolina
'CCG' =&gt; 'P',# Prolina
'CCT' =&gt; 'P',# Prolina
'CAC' =&gt; 'H',# Histidina
'CAT' =&gt; 'H',# Histidina
'CAA' =&gt; 'Q',# Glutamina
'CAG' =&gt; 'Q',# Glutamina
'CGA' =&gt; 'R',# Arginina
'CGC' =&gt; 'R',# Arginina
'CGG' =&gt; 'R',# Arginina
'CGT' =&gt; 'R',# Arginina
'ATA' =&gt; 'I',# Isoleucina
'ATC' =&gt; 'I',# Isoleucina
'ATT' =&gt; 'I',# Isoleucina
'ATG' =&gt; 'M',# Methionina
'ACA' =&gt; 'T',# Treonina
'ACC' =&gt; 'T',# Treonina
'ACG' =&gt; 'T',# Treonina
'ACT' =&gt; 'T',# Treonina
'AAC' =&gt; 'N',# Asparagina
'AAT' =&gt; 'N',# Asparagina
'AAA' =&gt; 'K',# Lisina
'AAG' =&gt; 'K',# Lisina
'AGC' =&gt; 'S',# Serina
'AGT' =&gt; 'S',# Serina
'AGA' =&gt; 'R',# Arginina
'AGG' =&gt; 'R',# Arginina
'GTA' =&gt; 'V',# Valina
'GTC' =&gt; 'V',# Valina
'GTG' =&gt; 'V',# Valina
'GTT' =&gt; 'V',# Valina
'GCA' =&gt; 'A',# Alanina
'GCC' =&gt; 'A',# Alanina
'GCG' =&gt; 'A',# Alanina
'GCT' =&gt; 'A',# Alanina
'GAC' =&gt; 'D',# Acido Aspartico
'GAT' =&gt; 'D',# Acido Aspartico
'GAA' =&gt; 'E',# Acido Glutamico
'GAG' =&gt; 'E',# Acido Glutamico
'GGA' =&gt; 'G',# Glicina
'GGC' =&gt; 'G',# Glicina
'GGG' =&gt; 'G',# Glicina
'GGT' =&gt; 'G',# Glicina
);
# Traduce cada codon in su aminoacido correspondiente
# y lo va sumando a la secuencia proteica
print $a3;
for($i=$a3 - 1; $i &lt; $a4 - 3 ; $i += 3) {
$codon = substr($secuencia,$i,3);
# Pasamos el codon de minusculas (formato EMBL) a mayusculas
$codon =~ tr/a-z/A-Z/;
$protein.= codon2aa($codon);
}
print "La secuencia de proteinas de este gen:\n$secuencia\nes la siguiente:\n$protein\n\n";
exit;
</pre>

<A NAME="374lfindex5">&nbsp;</A>
<H2>Referencias Bibliogr&aacute;ficas:</H2>


<p><a href="http://bioperl.org/">http://bioperl.org/</a></p>

<p><a href=
"http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html">
http://changjiang.whlib.ac.cn/pylorus/download/book/Beginning%20Perl%20for%20Bioinformatics/contents.html</a></p>

<p><a href=
"http://www.unix.org.ua/orelly/perl/prog3/">http://www.unix.org.ua/orelly/perl/prog3/</a></p>

<p><strong><em>Archivos de ejemplo:</em></strong></p>

- <a href=
"../../common/src2/article374/human_kinases_swissprot.txt">human_kinases_swissprot.txt</a><br>

 - <a href=
"../../common/src2/article374/query_seq.txt">query_seq.txt</a><br>
 - <a href=
"../../common/src2/article374/ecoli_embl.txt">ecoli_embl.txt</a><br>

 <br>
 <br>
<br>
<!-- vim: set sw=2 ts=2 et tw=74: -->




<!-- BODY_OF_THE_ARTICLE_STOP -->
<!-- 2pdaIgnoreStart -->
<A NAME="talkback">&nbsp;</a>
<h2>Formulario de "talkback" para este art&iacute;culo</h2>
Cada art&iacute;culo tiene su propia p&aacute;gina de "talkback". A trav&eacute;s de esa p&aacute;gina puedes enviar un comentario o consultar los comentarios de otros lectores
<center>
    <table width="250" border=0><tr><td>
    <div class="tbbutton"><A class="nodec" href="http://cgi.linuxfocus.org/cgi-bin/lftalkback?anum=374">&nbsp;Ir a la p&aacute;gina de "talkback"&nbsp;</a></div>
    </td></tr></table>
</center>

<br clear="all">
<HR size="2" noshade>
<table width="250" border=0><tr><td>
<div class="bbutton"><a class="nodec" href="../../index.shtml">&lt;--, LF Hogar</a></div>
</td><td>
<div class="bbutton"><a class="nodec" href="index.shtml">&Iacute;ndice de este n&uacute;mero</a></div>
</td></tr></table>
<br clear="all">
<HR size="2" noshade>
<!-- ARTICLE FOOT -->
<CENTER><TABLE WIDTH="98%" summary="footer">
<TR><TD ALIGN=CENTER BGCOLOR="#bdc6d5" WIDTH="50%">
<A HREF="../../common/lfteam.html">Contactar con el equipo de LinuFocus</A>
<BR><FONT COLOR="#1111aa"><a href="../../common/copy.html">&copy; Carlos Andr&eacute;s P&eacute;rez</a><br>&quot;some rights reserved&quot; see <a href="../../license/index.shtml">linuxfocus.org/license/</a><br><a href="http://www.linuxfocus.org">http://www.LinuxFocus.org</a></FONT>
</TD>
<TD BGCOLOR="#bdc6d5">
<!-- TRANSLATION INFO -->
<font size=2>Informaci&oacute;n sobre la traducci&oacute;n:</font>
<TABLE summary="translators">
  <tr><td><font size="2">es --&gt; -- : Carlos Andr&eacute;s P&eacute;rez <small>&lt;caperez(at)usc.edu.co&gt;</small></font></td></tr>
</TABLE>
</TD>
</TR></TABLE></CENTER>
<p><font size=1>2005-04-12, generated by lfparser version 2.52</font></p>
<!-- 2pdaIgnoreStop -->
</BODY>
</HTML>
